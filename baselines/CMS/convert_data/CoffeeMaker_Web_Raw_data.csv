method_id,method_name,class_name,software_system,filepath,start_line,end_line,Length_of_Head_Comment,Head_Comment,Length_of_the_Implementation,Method_Implementation
1,makeCoffee,Main,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Main.java,217,244,3,/**\n   * Make coffee user interface the processes input.\n   */,28,"  public static void makeCoffee() {\n    Recipe [] recipes = coffeeMaker.getRecipes();\n    for(int i = 0; i < recipes.length; i++) {\n      if (recipes[i] != null) {\n        System.out.println((i+1) + "". "" + recipes[i].getName());\n      }\n    }\n    \n    int recipeToPurchase = recipeListSelection(""Please select the number of the recipe to purchase."");\n    \n    String amountPaid = inputOutput(""Please enter the amount you wish to pay"");\n    int amtPaid = 0;\n    try {\n      amtPaid = Integer.parseInt(amountPaid);\n    } catch (NumberFormatException e) {\n      System.out.println(""Please enter a positive integer"");\n      mainMenu();\n    }\n    \n    int change = coffeeMaker.makeCoffee(recipeToPurchase, amtPaid);\n    \n    if (change == amtPaid) {\n      System.out.println(""Insufficient funds to purchase."");\n    } else {\n      System.out.println(""Thank you for purchasing "" + coffeeMaker.getRecipes()[recipeToPurchase].getName());\n    }\n    System.out.println(""Your change is: "" + change + ""\\n"");\n    mainMenu();\n"
2,deleteRecipe,Main,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Main.java,103,123,3,/**\n   * Delete recipe user interface that processes input.\n   */,21,"  public static void deleteRecipe() {\n    Recipe [] recipes = coffeeMaker.getRecipes();\n    for(int i = 0; i < recipes.length; i++) {\n      if (recipes[i] != null) {\n        System.out.println((i+1) + "". "" + recipes[i].getName());\n      }\n    }\n    int recipeToDelete = recipeListSelection(""Please select the number of the recipe to delete."");\n    \n    if(recipeToDelete < 0) {\n      mainMenu();\n    }\n    \n    String recipeDeleted = coffeeMaker.deleteRecipe(recipeToDelete);\n    \n    if (recipeDeleted != null) {\n      System.out.println(recipeDeleted + "" successfully deleted.\\n"");\n    } else {\n      System.out.println(""Selected recipe doesn\'t exist and could not be deleted.\\n"");\n    }\n    mainMenu();\n"
3,mainMenu,Main,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Main.java,23,50,4,/**\n   * Prints the main menu and handles user input for \n   * main menu commands.\n   */,28,"  public static void mainMenu() {\n    System.out.println(""1. Add a recipe"");\n    System.out.println(""2. Delete a recipe"");\n    System.out.println(""3. Edit a recipe"");\n    System.out.println(""4. Add inventory"");\n    System.out.println(""5. Check inventory"");\n    System.out.println(""6. Make coffee"");\n    System.out.println(""0. Exit\\n"");\n    \n    //Get user input\n    try {\n      int userInput = Integer.parseInt(inputOutput(""Please press the number that corresponds to what you would like the coffee maker to do.""));\n      \n      if (userInput >= 0 && userInput <=6) {\n        if (userInput == 1) addRecipe();\n        if (userInput == 2) deleteRecipe();\n        if (userInput == 3) editRecipe();\n        if (userInput == 4) addInventory();\n        if (userInput == 5) checkInventory();\n        if (userInput == 6) makeCoffee();\n        if (userInput == 0) System.exit(0);\n      } else {\n        System.out.println(""Please enter a number from 0 - 6"");\n        mainMenu();\n      }\n    } catch (NumberFormatException e) {\n      System.out.println(""Please enter a number from 0 - 6"");\n      mainMenu();\n"
4,inputOutput,Main,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Main.java,253,264,6,/**\n   * Passes a prompt to the user and returns the user specified \n   * string.\n   * @param message\n   * @return String\n   */,12,"  private static String inputOutput(String message) {\n    System.out.println(message);\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n    String returnString = """";\n    try {\n      returnString = br.readLine();\n    }\n    catch (IOException e){\n      System.out.println(""Error reading in value"");\n      mainMenu();\n    }\n    return returnString;\n"
5,addInventory,Main,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Main.java,183,202,3,/**\n   * Add inventory user interface that processes input.\n   */,20,"  public static void addInventory() {\n    //Read in amt coffee\n    String coffeeString = inputOutput(""\\nPlease enter the units of coffee to add: "");\n        \n    //Read in amt milk\n    String milkString = inputOutput(""\\nPlease enter the units of milk to add: "");\n        \n    //Read in amt sugar\n    String sugarString = inputOutput(""\\nPlease enter the units of sugar to add: "");\n        \n    //Read in amt chocolate\n    String chocolateString = inputOutput(""\\nPlease enter the units of chocolate to add: "");\n        \n    try {\n      coffeeMaker.addInventory(coffeeString, milkString, sugarString, chocolateString);\n      System.out.println(""Inventory successfully added"");\n    } catch (InventoryException e) {\n      System.out.println(""Inventory was not added"");\n    } finally {\n      mainMenu();\n"
6,editRecipe,Main,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Main.java,129,176,3,/**\n   * Edit recipe user interface the processes user input.\n   */,48,"  public static void editRecipe() {\n    Recipe [] recipes = coffeeMaker.getRecipes();\n    for(int i = 0; i < recipes.length; i++) {\n      if (recipes[i] != null) {\n        System.out.println((i+1) + "". "" + recipes[i].getName());\n      }\n    }\n    int recipeToEdit = recipeListSelection(""Please select the number of the recipe to edit."");\n    \n    if(recipeToEdit < 0) {\n      mainMenu();\n    }\n    \n    //Read in recipe price\n    String priceString = inputOutput(""\\nPlease enter the recipe price: $"");\n    \n    //Read in amt coffee\n    String coffeeString = inputOutput(""\\nPlease enter the units of coffee in the recipe: "");\n    \n    //Read in amt milk\n    String milkString = inputOutput(""\\nPlease enter the units of milk in the recipe: "");\n    \n    //Read in amt sugar\n    String sugarString = inputOutput(""\\nPlease enter the units of sugar in the recipe: "");\n    \n    //Read in amt chocolate\n    String chocolateString = inputOutput(""\\nPlease enter the units of chocolate in the recipe: "");\n    \n    Recipe newRecipe = new Recipe();\n    try {\n      newRecipe.setPrice(priceString);\n      newRecipe.setAmtCoffee(coffeeString);\n      newRecipe.setAmtMilk(milkString);\n      newRecipe.setAmtSugar(sugarString);\n      newRecipe.setAmtChocolate(chocolateString);\n      \n      String recipeEdited = coffeeMaker.editRecipe(recipeToEdit, newRecipe);\n      \n      if (recipeEdited != null) {\n        System.out.println(recipeEdited + "" successfully edited.\\n"");\n      }\n      else {\n        System.out.println(recipeEdited + ""could not be edited.\\n"");\n      }\n    } catch (RecipeException e) {\n      System.out.println(e.getMessage());\n    } finally {\n      mainMenu();\n"
7,recipeListSelection,Main,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Main.java,273,287,6,/**\n   * Passes a prompt to the user that deals with the recipe list\n   * and returns the user selected number.\n   * @param message\n   * @return int\n   */,15,"  private static int recipeListSelection(String message) {\n    String userSelection = inputOutput(message);\n    int recipe = 0;\n    try {\n      recipe = Integer.parseInt(userSelection) - 1;\n      if (recipe >= 0 && recipe <=2) {\n        //do nothing here.\n      } else {\n        recipe = -1;\n      }\n    } catch (NumberFormatException e) {\n      System.out.println(""Please select a number from 1-3."");\n      recipe = -1;\n    }\n    return recipe;\n"
8,addRecipe,Main,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Main.java,57,96,3,/**\n   * The add recipe user interface that process user input.\n   */,40,"  public static void addRecipe() {\n    \n    //Read in recipe name\n    String name = inputOutput(""\\nPlease enter the recipe name: "");\n    \n    //Read in recipe price\n    String priceString = inputOutput(""\\nPlease enter the recipe price: $"");\n        \n    //Read in amt coffee\n    String coffeeString = inputOutput(""\\nPlease enter the units of coffee in the recipe: "");\n        \n    //Read in amt milk\n    String milkString = inputOutput(""\\nPlease enter the units of milk in the recipe: "");\n        \n    //Read in amt sugar\n    String sugarString = inputOutput(""\\nPlease enter the units of sugar in the recipe: "");\n        \n    //Read in amt chocolate\n    String chocolateString = inputOutput(""\\nPlease enter the units of chocolate in the recipe: "");\n        \n    Recipe r = new Recipe();\n    try {\n      r.setName(name);\n      r.setPrice(priceString);\n      r.setAmtCoffee(coffeeString);\n      r.setAmtMilk(milkString);\n      r.setAmtSugar(sugarString);\n      r.setAmtChocolate(chocolateString);\n      \n      boolean recipeAdded = coffeeMaker.addRecipe(r);\n      \n      if(recipeAdded) {\n        System.out.println(name + "" successfully added.\\n"");\n      } else {\n        System.out.println(name + "" could not be added.\\n"");\n      }\n    } catch (RecipeException e) {\n      System.out.println(e.getMessage());\n    } finally {\n      mainMenu();\n"
9,checkInventory,Main,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Main.java,209,211,3,/**\n   * Check inventory user interface that processes input.\n   */,3,  public static void checkInventory() {\n    System.out.println(coffeeMaker.checkInventory());\n    mainMenu();\n
10,getRecipes,RecipeBook,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/RecipeBook.java,22,23,5,/**\n   * Returns the recipe array.\n   * @param r\n   * @return Recipe[]\n   */,2,  public synchronized Recipe[] getRecipes() {\n    return recipeArray;\n
11,deleteRecipe,RecipeBook,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/RecipeBook.java,57,63,6,/**\n   * Returns the name of the recipe deleted at the position specified\n   * and null if the recipe does not exist.\n   * @param recipeToDelete\n   * @return String\n   */,7,  public synchronized String deleteRecipe(int recipeToDelete) {\n    if (recipeArray[recipeToDelete] != null) {\n      String recipeName = recipeArray[recipeToDelete].getName();\n      recipeArray[recipeToDelete] = null;\n      return recipeName;\n    } else {\n      return null;\n
12,RecipeBook,RecipeBook,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/RecipeBook.java,13,14,3,/**\n   * Default constructor for a RecipeBook.\n   */,2,  public RecipeBook() {\n    recipeArray = new Recipe[NUM_RECIPES];\n
13,makeCoffee,CoffeeMaker,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/CoffeeMaker.java,86,101,7,"/**\n   * Returns the change of a user's beverage purchase, or\n   * the user's money if the beverage cannot be made\n   * @param r\n   * @param amtPaid\n   * @return int\n   */",16,"  public synchronized int makeCoffee(int recipeToPurchase, int amtPaid) {\n    int change = 0;\n    \n    if (getRecipes()[recipeToPurchase] == null) {\n      change = amtPaid;\n    } else if (getRecipes()[recipeToPurchase].getPrice() <= amtPaid) {\n      if (inventory.useIngredients(getRecipes()[recipeToPurchase])) {\n        change = amtPaid - getRecipes()[recipeToPurchase].getPrice();\n      } else {\n        change = amtPaid;\n      }\n    } else {\n      change = amtPaid;\n    }\n    \n    return change;\n"
14,addInventory,CoffeeMaker,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/CoffeeMaker.java,64,68,8,/**\n   * Returns true if inventory was successfully added\n   * @param amtCoffee\n   * @param amtMilk\n   * @param amtSugar\n   * @param amtChocolate\n   * @return boolean\n   */,5,"  public synchronized void addInventory(String amtCoffee, String amtMilk, String amtSugar, String amtChocolate) throws InventoryException {\n    inventory.addCoffee(amtCoffee);\n    inventory.addMilk(amtMilk);\n    inventory.addSugar(amtSugar);\n    inventory.addChocolate(amtChocolate);\n"
15,checkInventory,CoffeeMaker,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/CoffeeMaker.java,75,76,4,/**\n   * Returns the inventory of the coffee maker\n   * @return Inventory\n   */,2,  public synchronized String checkInventory() {\n    return inventory.toString();\n
16,deleteRecipe,CoffeeMaker,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/CoffeeMaker.java,41,42,7,/**\n   * Returns the name of the successfully deleted recipe\n   * or null if the recipe cannot be deleted.\n   * \n   * @param recipeToDelete\n   * @return String\n   */,2,  public String deleteRecipe(int recipeToDelete) {\n    return recipeBook.deleteRecipe(recipeToDelete);\n
17,editRecipe,CoffeeMaker,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/CoffeeMaker.java,52,53,7,/**\n   * Returns the name of the successfully edited recipe\n   * or null if the recipe cannot be edited.\n   * @param recipeToEdit\n   * @param r\n   * @return String\n   */,2,"  public String editRecipe(int recipeToEdit, Recipe r) {\n    return recipeBook.editRecipe(recipeToEdit, r);\n"
18,CoffeeMaker,CoffeeMaker,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/CoffeeMaker.java,18,20,4,/**\n   * Constructor for the coffee maker\n   *\n   */,3,  public CoffeeMaker() {\n    recipeBook = new RecipeBook();\n    inventory = new Inventory();\n
19,addRecipe,CoffeeMaker,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/CoffeeMaker.java,30,31,7,/**\n   * Returns true if the recipe is added to the\n   * list of recipes in the CoffeeMaker and false\n   * otherwise.\n   * @param r\n   * @return boolean\n   */,2,  public boolean addRecipe(Recipe r) {\n    return recipeBook.addRecipe(r);\n
20,setAmtChocolate,Recipe,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Recipe.java,37,47,3,/**\n   * @param amtChocolate   The amtChocolate to set.\n   */,11,"  public void setAmtChocolate(String chocolate) throws RecipeException {\n    int amtChocolate = 0;\n    try {\n      amtChocolate = Integer.parseInt(chocolate);\n    } catch (NumberFormatException e) {\n      throw new RecipeException(""Units of chocolate must be a positive integer"");\n    }\n    if (amtChocolate >= 0) {\n      this.amtChocolate = amtChocolate;\n    } else {\n      throw new RecipeException(""Units of chocolate must be a positive integer"");\n"
21,getPrice,Recipe,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Recipe.java,133,134,3,/**\n   * @return   Returns the price.\n   */,2,  public int getPrice() {\n    return price;\n
22,setPrice,Recipe,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Recipe.java,139,149,3,/**\n   * @param price   The price to set.\n   */,11,"  public void setPrice(String price) throws RecipeException{\n    int amtPrice = 0;\n    try {\n      amtPrice = Integer.parseInt(price);\n    } catch (NumberFormatException e) {\n      throw new RecipeException(""Price must be a positive integer"");\n    }\n    if (amtPrice >= 0) {\n      this.price = amtPrice;\n    } else {\n      throw new RecipeException(""Price must be a positive integer"");\n"
23,getAmtCoffee,Recipe,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Recipe.java,53,54,3,/**\n   * @return   Returns the amtCoffee.\n   */,2,  public int getAmtCoffee() {\n    return amtCoffee;\n
24,setAmtMilk,Recipe,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Recipe.java,81,91,3,/**\n   * @param amtMilk   The amtMilk to set.\n   */,11,"  public void setAmtMilk(String milk) throws RecipeException{\n    int amtMilk = 0;\n    try {\n      amtMilk = Integer.parseInt(milk);\n    } catch (NumberFormatException e) {\n      throw new RecipeException(""Units of milk must be a positive integer"");\n    }\n    if (amtMilk >= 0) {\n      this.amtMilk = amtMilk;\n    } else {\n      throw new RecipeException(""Units of milk must be a positive integer"");\n"
25,getAmtMilk,Recipe,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Recipe.java,75,76,3,/**\n   * @return   Returns the amtMilk.\n   */,2,  public int getAmtMilk() {\n    return amtMilk;\n
26,setAmtCoffee,Recipe,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Recipe.java,59,69,3,/**\n   * @param amtCoffee   The amtCoffee to set.\n   */,11,"  public void setAmtCoffee(String coffee) throws RecipeException {\n    int amtCoffee = 0;\n    try {\n      amtCoffee = Integer.parseInt(coffee);\n    } catch (NumberFormatException e) {\n      throw new RecipeException(""Units of coffee must be a positive integer"");\n    }\n    if (amtCoffee >= 0) {\n      this.amtCoffee = amtCoffee;\n    } else {\n      throw new RecipeException(""Units of coffee must be a positive integer"");\n"
27,getAmtSugar,Recipe,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Recipe.java,97,98,3,/**\n   * @return   Returns the amtSugar.\n   */,2,  public int getAmtSugar() {\n    return amtSugar;\n
28,getName,Recipe,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Recipe.java,119,120,3,/**\n   * @return   Returns the name.\n   */,2,  public String getName() {\n    return name;\n
29,getAmtChocolate,Recipe,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Recipe.java,31,32,3,/**\n   * @return   Returns the amtChocolate.\n   */,2,  public int getAmtChocolate() {\n    return amtChocolate;\n
30,setName,Recipe,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Recipe.java,125,127,3,/**\n   * @param name   The name to set.\n   */,3,  public void setName(String name) {\n    if(name != null) {\n      this.name = name;\n
31,Recipe,Recipe,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Recipe.java,19,25,3,/**\n   * Creates a default recipe for the coffee maker.\n   */,7,"  public Recipe() {\n    this.name = """";\n    this.price = 0;\n    this.amtCoffee = 0;\n    this.amtMilk = 0;\n    this.amtSugar = 0;\n    this.amtChocolate = 0;\n"
32,setAmtSugar,Recipe,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Recipe.java,103,113,3,/**\n   * @param amtSugar   The amtSugar to set.\n   */,11,"  public void setAmtSugar(String sugar) throws RecipeException {\n    int amtSugar = 0;\n    try {\n      amtSugar = Integer.parseInt(sugar);\n    } catch (NumberFormatException e) {\n      throw new RecipeException(""Units of sugar must be a positive integer"");\n    }\n    if (amtSugar >= 0) {\n      this.amtSugar = amtSugar;\n    } else {\n      throw new RecipeException(""Units of sugar must be a positive integer"");\n"
33,setMilk,Inventory,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Inventory.java,123,125,5,/**\n   * Sets the number of milk units in the inventory\n   * to the specified amount.\n   * @param milk\n   */,3,  public synchronized void setMilk(int milk) {\n    if(milk >= 0) {\n      Inventory.milk = milk;\n
34,getChocolate,Inventory,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Inventory.java,33,34,5,/**\n   * Returns the current number of chocolate units in \n   * the inventory.\n   * @return int\n   */,2,  public int getChocolate() {\n    return chocolate;\n
35,addSugar,Inventory,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Inventory.java,175,185,6,/**\n   * Add the number of sugar units in the inventory \n   * to the current amount of sugar units.\n   * @param sugar\n   * @throws InventoryException\n   */,11,"  public synchronized void addSugar(String sugar) throws InventoryException {\n    int amtSugar = 0;\n    try {\n      amtSugar = Integer.parseInt(sugar);\n    } catch (NumberFormatException e) {\n      throw new InventoryException(""Units of sugar must be a positive integer"");\n    }\n    if (amtSugar >= 0) { \n      Inventory.sugar += amtSugar;\n    } else {\n      throw new InventoryException(""Units of sugar must be a positive integer"");\n"
36,setSugar,Inventory,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Inventory.java,163,165,5,/**\n   * Sets the number of sugar units in the inventory\n   * to the specified amount.\n   * @param sugar\n   */,3,  public synchronized void setSugar(int sugar) {\n    if(sugar >= 0) {\n      Inventory.sugar = sugar;\n
37,getSugar,Inventory,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Inventory.java,154,155,5,/**\n   * Returns the current number of sugar units in \n   * the inventory.\n   * @return int\n   */,2,  public int getSugar() {\n    return sugar;\n
38,useIngredients,Inventory,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Inventory.java,218,226,6,/**\n   * Removes the ingredients used to make the specified \n   * recipe.  Assumes that the user has checked that there\n   * are enough ingredients to make \n   * @param r\n   */,9,  public synchronized boolean useIngredients(Recipe r) {\n    if (enoughIngredients(r)) {\n      Inventory.coffee -= r.getAmtCoffee();\n      Inventory.milk -= r.getAmtMilk();\n      Inventory.sugar -= r.getAmtSugar();\n      Inventory.chocolate -= r.getAmtChocolate();\n      return true;\n    } else {\n      return false;\n
39,setCoffee,Inventory,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Inventory.java,83,85,5,/**\n   * Sets the number of coffee units in the inventory \n   * to the specified amount.\n   * @param coffee\n   */,3,  public synchronized void setCoffee(int coffee) {\n    if(coffee >= 0) {\n      Inventory.coffee = coffee;\n
40,addChocolate,Inventory,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Inventory.java,55,65,6,/**\n   * Add the number of chocolate units in the inventory \n   * to the current amount of chocolate units.\n   * @param chocolate\n   * @throws InventoryException\n   */,11,"  public synchronized void addChocolate(String chocolate) throws InventoryException {\n    int amtChocolate = 0;\n    try {\n      amtChocolate = Integer.parseInt(chocolate);\n    } catch (NumberFormatException e) {\n      throw new InventoryException(""Units of chocolate must be a positive integer"");\n    }\n    if (amtChocolate >= 0) {\n      Inventory.chocolate += amtChocolate;\n    } else {\n      throw new InventoryException(""Units of chocolate must be a positive integer"");\n"
41,setChocolate,Inventory,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Inventory.java,42,44,5,/**\n   * Sets the number of chocolate units in the inventory\n   * to the specified amount.\n   * @param chocolate\n   */,3,  public synchronized void setChocolate(int chocolate) {\n    if(chocolate >= 0) {\n      Inventory.chocolate = chocolate;\n
42,getCoffee,Inventory,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Inventory.java,74,75,5,/**\n   * Returns the current number of coffee units in\n   * the inventory.\n   * @return int\n   */,2,  public int getCoffee() {\n    return coffee;\n
43,getMilk,Inventory,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Inventory.java,114,115,5,/**\n   * Returns the current number of milk units in\n   * the inventory.\n   * @return int\n   */,2,  public int getMilk() {\n    return milk;\n
44,enoughIngredients,Inventory,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Inventory.java,195,209,6,/**\n   * Returns true if there are enough ingredients to make\n   * the beverage.\n   * @param r\n   * @return boolean\n   */,15,  protected synchronized boolean enoughIngredients(Recipe r) {\n    boolean isEnough = true;\n    if(Inventory.coffee < r.getAmtCoffee()) {\n      isEnough = false;\n    }\n    if(Inventory.milk < r.getAmtMilk()) {\n      isEnough = false;\n    }\n    if(Inventory.sugar < r.getAmtSugar()) {\n      isEnough = false;\n    }\n    if(Inventory.chocolate < r.getAmtChocolate()) {\n      isEnough = false;\n    }\n    return isEnough;\n
45,addMilk,Inventory,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Inventory.java,135,145,6,/**\n   * Add the number of milk units in the inventory \n   * to the current amount of milk units.\n   * @param milk\n   * @throws InventoryException\n   */,11,"  public synchronized void addMilk(String milk) throws InventoryException {\n    int amtMilk = 0;\n    try {\n      amtMilk = Integer.parseInt(milk);\n    } catch (NumberFormatException e) {\n      throw new InventoryException(""Units of milk must be a positive integer"");\n    }\n    if (amtMilk >= 0) {\n      Inventory.milk += amtMilk;\n    } else {\n      throw new InventoryException(""Units of milk must be a positive integer"");\n"
46,Inventory,Inventory,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Inventory.java,21,25,4,/**\n   * Creates a coffee maker inventory object and\n   * fills each item in the inventory with 15 units.\n   */,5,  public Inventory() {\n    setCoffee(15);\n    setMilk(15);\n    setSugar(15);\n    setChocolate(15);\n
47,addCoffee,Inventory,CoffeeMaker10,CoffeeMaker_Web/src/edu/ncsu/csc326/coffeemaker/Inventory.java,95,105,6,/**\n   * Add the number of coffee units in the inventory \n   * to the current amount of coffee units.\n   * @param coffee\n   * @throws InventoryException\n   */,11,"  public synchronized void addCoffee(String coffee) throws InventoryException {\n    int amtCoffee = 0;\n    try {\n      amtCoffee = Integer.parseInt(coffee);\n    } catch (NumberFormatException e) {\n      throw new InventoryException(""Units of coffee must be a positive integer"");\n    }\n    if (amtCoffee >= 0) {\n      Inventory.coffee += amtCoffee;\n    } else {\n      throw new InventoryException(""Units of coffee must be a positive integer"");\n"
