method_id,method_name,class_name,software_system,filepath,start_line,end_line,Length_of_Head_Comment,Head_Comment,Length_of_the_Implementation,Method_Implementation
3232,HighLow,HighLow,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/HighLow.java,79,80,11,"/**\n\n   * Constructs a high-low item, with default values for the open/close and colors.\n\n   * @param x\n\n   * @param high\n\n   * @param low\n\n   */",4,"  public HighLow(double x, double high, double low) {\n\n  this(x, high, low, high, low, new BasicStroke(), Color.blue);\n\n"
3233,setValue,HighLow,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/HighLow.java,154,158,9,/**\n\n   * Sets either OPEN or Close value depending on the valueType.\n\n   * @param valueType\n\n   * @param newValue\n\n   */,10,"  public void setValue(int valueType, double newValue) {\n\n  if (valueType == OPEN)\n\n    open = newValue;\n\n  else\n\n    close = newValue;\n\n"
3234,getCloseTickLine,HighLow,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/HighLow.java,171,172,5,/**\n\n   * Returns the line. for close tick\n\n   */,4,"  public Line2D getCloseTickLine() {\n\n  return getTickLine(getLine().getX1(), getValue(CLOSE), getTickSize());\n\n"
3235,getOpenTickLine,HighLow,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/HighLow.java,164,165,5,/**\n\n   * Returns the line for open tick.\n\n   */,4,"  public Line2D getOpenTickLine() {\n\n  return getTickLine(getLine().getX1(), getValue(OPEN), (-1) * getTickSize());\n\n"
3236,getValue,HighLow,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/HighLow.java,142,146,7,/**\n\n   * Returns either OPEN or Close value depending on the valueType.\n\n   * @param valueType\n\n   */,10,  public double getValue(int valueType) {\n\n  if (valueType == OPEN)\n\n    return open;\n\n  else\n\n    return close;\n\n
3237,setTickSize,HighLow,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/HighLow.java,120,121,7,/**\n\n   * Sets the width of the open/close tick.\n\n   * @param newSize\n\n   */,4,  public void setTickSize(double newSize) {\n\n  tickSize = newSize;\n\n
3238,HighLow,HighLow,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/HighLow.java,91,92,15,"/**\n\n   * Constructs a high-low item, with default values for the colors.\n\n   * @param x\n\n   * @param high\n\n   * @param low\n\n   * @param open\n\n   * @param close\n\n   */",4,"  public HighLow(double x, double high, double low, double open, double close) {\n\n  this(x, high, low, open, close, new BasicStroke(), Color.blue);\n\n"
3239,getLine,HighLow,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/HighLow.java,134,135,5,/**\n\n   * Returns the line.\n\n   */,4,  public Line2D getLine() {\n\n  return line;\n\n
3240,getStroke,HighLow,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/HighLow.java,185,186,5,/**\n\n   * Returns the Stroke object used to draw the line.\n\n   */,4,  public Stroke getStroke() {\n\n  return stroke;\n\n
3242,getTickSize,HighLow,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/HighLow.java,127,128,5,/**\n\n   * Returns the width of the open/close tick.\n\n   */,4,  public double getTickSize() {\n\n  return tickSize;\n\n
3243,HighLow,HighLow,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/HighLow.java,105,112,19,/**\n\n   * Constructs a high-low item.\n\n   * @param x\n\n   * @param high\n\n   * @param low\n\n   * @param open\n\n   * @param close\n\n   * @param stroke\n\n   * @param paint\n\n   */,14,"  public HighLow(double x, double high, double low, double open, double close,\n\n       Stroke stroke, Paint paint) {\n\n    this.line = new Line2D.Double(x, high, x, low);\n\n  this.open = open;\n\n  this.close = close;\n\n  this.stroke = stroke;\n\n  this.paint = paint;\n\n"
3244,isValidHorizontalAlignment,AbstractTitle,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/AbstractTitle.java,375,381,5,/**\n\n   * Utility method for checking a horizontal alignment code.\n\n   */,12,  protected static boolean isValidHorizontalAlignment(int code) {\n\n    switch(code) {\n\n      case AbstractTitle.LEFT:   return true;\n\n      case AbstractTitle.MIDDLE: return true;\n\n      case AbstractTitle.RIGHT:  return true;\n\n      default: return false;\n\n
3245,getVerticalAlignment,AbstractTitle,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/AbstractTitle.java,281,282,9,"/**\n\n   * Returns the vertical alignment of the title.  The constants TOP, MIDDLE and BOTTOM (defined\n\n   * in this class) are used.\n\n   * @return The vertical alignment of the title (TOP, MIDDLE or BOTTOM);\n\n   */",4,  public int getVerticalAlignment() {\n\n    return this.verticalAlignment;\n\n
3247,setHorizontalAlignment,AbstractTitle,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/AbstractTitle.java,269,272,11,"/**\n\n   * Sets the horizontal alignment for the title, and notifies any registered listeners of the\n\n   * change.  The constants LEFT, CENTER and RIGHT (defined in this class) can be used to specify\n\n   * the alignment.\n\n   * @param alignment The new horizontal alignment (LEFT, CENTER or RIGHT).\n\n   */",8,  public void setHorizontalAlignment(int alignment) {\n\n    if (this.horizontalAlignment!=alignment) {\n\n      this.horizontalAlignment = alignment;\n\n      notifyListeners(new TitleChangeEvent(this));\n\n
3248,setVerticalAlignment,AbstractTitle,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/AbstractTitle.java,292,295,13,"/**\n\n   * Sets the vertical alignment for the title, and notifies any registered listeners of the\n\n   * change.\n\n   * The constants TOP, MIDDLE and BOTTOM (defined in this class) can be used to specify the\n\n   * alignment.\n\n   * @param alignment The new vertical alignment (TOP, MIDDLE or BOTTOM);\n\n   */",8,  public void setVerticalAlignment(int alignment) {\n\n    if (this.verticalAlignment!=alignment) {\n\n      this.verticalAlignment = alignment;\n\n      notifyListeners(new TitleChangeEvent(this));\n\n
3249,AbstractTitle,AbstractTitle,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/AbstractTitle.java,180,184,7,"/**\n\n   * Default constructor - builds an AbstractTitle positioned at the top of the page, centered\n\n   * horizontally and vertically within its space.\n\n   */",8,"  protected AbstractTitle() {\n\n    this(AbstractTitle.DEFAULT_POSITION,\n\n       AbstractTitle.DEFAULT_HORIZONTAL_ALIGNMENT,\n\n       AbstractTitle.DEFAULT_VERTICAL_ALIGNMENT);\n\n"
3250,AbstractTitle,AbstractTitle,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/AbstractTitle.java,134,156,21,"/**\n\n   * Constructs a title.\n\n   * <P>\n\n   * This class defines constants for the valid position and alignment values---an\n\n   * IllegalArgumentException will be thrown if invalid values are passed to this constructor.\n\n   * @param position The relative position of the title (TOP, BOTTOM, RIGHT and LEFT---or NORTH,\n\n   *         SOUTH, EAST and WEST if you prefer).\n\n   * @param horizontalAlignment The horizontal alignment of the title (LEFT, CENTER or RIGHT).\n\n   * @param verticalAlignment The vertical alignment of the title (TOP, MIDDLE or BOTTOM).\n\n   * @exception IllegalArgumentException If an invalid location or alignment value is passed.\n\n   */",38,"  protected AbstractTitle(int position,\n\n              int horizontalAlignment, int verticalAlignment, Insets insets) {\n\n    // check arguments...\n\n    if (!this.isValidPosition(position)) {\n\n      throw new IllegalArgumentException(""AbstractTitle(): Invalid position."");\n\n    }\n\n    if (!AbstractTitle.isValidHorizontalAlignment(horizontalAlignment)) {\n\n      throw new IllegalArgumentException(""AbstractTitle(): Invalid horizontal alignment."");\n\n    }\n\n    if (!AbstractTitle.isValidVerticalAlignment(verticalAlignment)) {\n\n      throw new IllegalArgumentException(""AbstractTitle(): Invalid vertical alignment."");\n\n    }\n\n    // initialise...\n\n    this.position = position;\n\n    this.horizontalAlignment = horizontalAlignment;\n\n    this.verticalAlignment = verticalAlignment;\n\n    this.insets = insets;\n\n    this.listeners = new java.util.ArrayList();\n\n    this.notify = true;\n\n"
3251,HorizontalBarPlot,HorizontalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/HorizontalBarPlot.java,75,86,9,/**\n\n   * Constructs a horizontal bar plot.\n\n   * @param horizontalAxis The horizontal axis.\n\n   * @param verticalAxis The vertical axis.\n\n   */,20,"  public HorizontalBarPlot(Axis horizontalAxis, Axis verticalAxis) {\n\n    this(horizontalAxis,\n\n       verticalAxis,\n\n       Plot.DEFAULT_INSETS,\n\n       BarPlot.DEFAULT_INTRO_GAP_PERCENT,\n\n       BarPlot.DEFAULT_TRAIL_GAP_PERCENT,\n\n       BarPlot.DEFAULT_CATEGORY_GAPS_PERCENT,\n\n       BarPlot.DEFAULT_ITEM_GAPS_PERCENT,\n\n       null);\n\n    this.renderer = new HorizontalBarRenderer();\n\n"
3252,getMaximumHorizontalDataValue,HorizontalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/HorizontalBarPlot.java,408,414,7,"/**\n\n   * Returns the maximum value in the range, since this is plotted against the horizontal axis for\n\n   * a HorizontalBarPlot.\n\n   */",12,  public Number getMaximumHorizontalDataValue() {\n\n  Dataset data = this.getChart().getDataset();\n\n  if (data!=null) {\n\n    return Datasets.getMaximumRangeValue(data);\n\n  }\n\n  else return null;\n\n
3253,setInsets,AbstractTitle,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/AbstractTitle.java,310,313,7,"/**\n\n   * Sets the insets for the title, and notifies registered listeners of the change.\n\n   * @param insets The new insets value;\n\n   */",8,  public void setInsets(Insets insets) {\n\n    if (!this.insets.equals(insets)) {\n\n      this.insets = insets;\n\n      notifyListeners(new TitleChangeEvent(this));\n\n
3254,getCategories,HorizontalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/HorizontalBarPlot.java,169,170,5,/**\n\n   * A convenience method that returns a list of the categories in the data source.\n\n   */,4,  public java.util.List getCategories() {\n\n  return getDataset().getCategories();\n\n
3255,getInsets,AbstractTitle,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/AbstractTitle.java,302,303,5,/**\n\n   * Returns the insets (the blank space around the edges) for this title.\n\n   */,4,  public Insets getInsets() {\n\n    return this.insets;\n\n
3256,setNotify,AbstractTitle,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/AbstractTitle.java,227,228,9,/**\n\n   * Sets the flag that indicates whether or not the notification mechanism is enabled.  There are\n\n   * certain situations (such as cloning) where you want to turn notification off temporarily.\n\n   * @param flag A boolean that indicates whether or not the notification mechanism is enabled;\n\n   */,4,  public void setNotify(boolean flag) {\n\n    this.notify = flag;\n\n
3257,calculateBarWidth,HorizontalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/HorizontalBarPlot.java,362,380,7,/**\n\n   * Returns the width of each bar in the chart.\n\n   * @param plotArea The area within which the plot will be drawn.\n\n   */,28,"  double calculateBarWidth(Rectangle2D plotArea) {\n\n  CategoryDataset data = getDataset();\n\n  // series, category and bar counts\n\n  int categoryCount = data.getCategoryCount();\n\n  int seriesCount = data.getSeriesCount();\n\n  int barCount = renderer.barWidthsPerCategory(data)*categoryCount;\n\n  // calculate the plot height (bars are horizontal) less whitespace\n\n  double usable = plotArea.getHeight() *\n\n                  (1.0 - introGapPercent - trailGapPercent - categoryGapsPercent);\n\n    if (renderer.barWidthsPerCategory(data)>1) {\n\n//    usable = usable - ((seriesCount-1) * categoryCount * seriesGap);\n\n    }\n\n  // and thus the width of the bars\n\n  return usable/barCount;\n\n"
3258,removeChangeListener,AbstractTitle,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/AbstractTitle.java,354,355,7,/**\n\n   * Unregisters an object for notification of changes to the chart title.\n\n   * @param listener The object that is being unregistered;\n\n   */,4,  public void removeChangeListener(TitleChangeListener listener) {\n\n    listeners.remove(listener);\n\n
3259,getDataset,HorizontalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/HorizontalBarPlot.java,127,128,5,"/**\n\n   * A convenience method that returns the dataset for the plot, cast as a CategoryDataset.\n\n   */",4,  public CategoryDataset getDataset() {\n\n  return (CategoryDataset)chart.getDataset();\n\n
3260,AbstractTitle,AbstractTitle,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/AbstractTitle.java,168,172,15,"/**\n\n   * Constructs a title.\n\n   * @param position The relative position of the title (TOP, BOTTOM, RIGHT and LEFT---or NORTH,\n\n   *         SOUTH, EAST and WEST if you prefer);\n\n   * @param horizontalAlignment The horizontal alignment of the title (LEFT, CENTER or RIGHT);\n\n   * @param verticalAlignment The vertical alignment of the title (TOP, MIDDLE or BOTTOM);\n\n   * @exception IllegalArgumentException If an invalid location or alignment value is passed;\n\n   */",8,"  protected AbstractTitle(int position, int horizontalAlignment, int verticalAlignment) {\n\n    this(position,\n\n       horizontalAlignment, verticalAlignment,\n\n       AbstractTitle.DEFAULT_INSETS);\n\n"
3261,HorizontalBarPlot,HorizontalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/HorizontalBarPlot.java,100,111,19,/**\n\n   * Constructs a horizontal bar plot.\n\n   * @param horizontalAxis The horizontal axis.\n\n   * @param verticalAxis The vertical axis.\n\n   * @param introGapPercent The gap before the first bar in the plot.\n\n   * @param trailGapPercent The gap after the last bar in the plot.\n\n   * @param categoryGapPercent The gap between the last bar in one category and the first bar in\n\n   *               the next category.\n\n   * @param itemGapPercent The gap between bars within the same category.\n\n   */,20,"  public HorizontalBarPlot(Axis horizontalAxis, Axis verticalAxis,\n\n               Insets insets,\n\n         double introGapPercent, double trailGapPercent,\n\n               double categoryGapPercent, double itemGapPercent,\n\n               CategoryToolTipGenerator toolTipGenerator) {\n\n  super(horizontalAxis, verticalAxis,\n\n        insets,\n\n        introGapPercent, trailGapPercent, categoryGapPercent, itemGapPercent,\n\n        toolTipGenerator);\n\n    this.renderer = new HorizontalBarRenderer();\n\n"
3263,getPlotType,HorizontalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/HorizontalBarPlot.java,386,387,5,/**\n\n   * Returns a short string describing the type of plot.\n\n   */,4,"  public String getPlotType() {\n\n  return ""Horizontal Bar Plot"";\n\n"
3264,addChangeListener,AbstractTitle,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/AbstractTitle.java,346,347,7,/**\n\n   * Registers an object for notification of changes to the title.\n\n   * @param listener The object that is being registered;\n\n   */,4,  public void addChangeListener(TitleChangeListener listener) {\n\n    listeners.add(listener);\n\n
3265,getCategoryAxis,HorizontalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/HorizontalBarPlot.java,152,153,7,/**\n\n   * A convenience method that returns a reference to the horizontal axis cast as a\n\n   * CategoryAxis.\n\n   */,4,  public CategoryAxis getCategoryAxis() {\n\n  return (CategoryAxis)verticalAxis;\n\n
3266,getNotify,AbstractTitle,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/AbstractTitle.java,218,219,7,/**\n\n   * Returns the flag that indicates whether or not the notification mechanism is enabled.\n\n   * @return A boolean that indicates whether or not the notification mechanism is enabled;\n\n   */,4,  public boolean getNotify() {\n\n    return this.notify;\n\n
3267,isCompatibleHorizontalAxis,HorizontalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/HorizontalBarPlot.java,210,214,9,"/**\n\n   * Checks the compatibility of a horizontal axis, returning true if the axis is compatible with\n\n   * the plot, and false otherwise.\n\n   * @param axis The horizontal axis;\n\n   */",10,  public boolean isCompatibleHorizontalAxis(Axis axis) {\n\n  if (axis instanceof HorizontalNumberAxis) {\n\n    return true;\n\n  }\n\n  else return false;\n\n
3268,setPosition,AbstractTitle,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/AbstractTitle.java,246,250,9,"/**\n\n   * Sets the position for the title.\n\n   * @param position The relative position of the title (use one of the constants TOP, BOTTOM,\n\n   *         RIGHT and LEFT, or the equivalent NORTH, SOUTH, EAST and WEST);\n\n   */",10,  public void setPosition(int position) {\n\n    if (this.position!=position) {\n\n      // check that the position is valid\n\n      this.position = position;\n\n      notifyListeners(new TitleChangeEvent(this));\n\n
3269,setHorizontalAxis,HorizontalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/HorizontalBarPlot.java,161,163,9,/**\n\n   * Sets the horizontal axis for the plot.  This method should throw an exception if the axis\n\n   * doesn't implement the required interfaces.\n\n   * @param axis The new horizontal axis;\n\n   */,6,  public void setHorizontalAxis(Axis axis) throws AxisNotCompatibleException {\n\n  // check that the axis implements the required interface (if not raise an exception);\n\n  super.setHorizontalAxis(axis);\n\n
3271,getPosition,AbstractTitle,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/AbstractTitle.java,237,238,11,"/**\n\n   * Returns the relative position of the title---represented by one of four integer constants\n\n   * defined in this class: TOP, BOTTOM, RIGHT or LEFT (or the equivalent NORTH, SOUTH, EAST and\n\n   * WEST).\n\n   * @return The title position;\n\n   */",4,  public int getPosition() {\n\n    return this.position;\n\n
3272,setVerticalAxis,HorizontalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/HorizontalBarPlot.java,143,145,9,/**\n\n   * Sets the vertical axis for the plot.  This method should throw an exception if the axis\n\n   * doesn't implement the required interfaces.\n\n   * @param vAxis The new vertical axis;\n\n   */,6,  public void setVerticalAxis(Axis vAxis) throws AxisNotCompatibleException {\n\n  // check that the axis implements the required interface (if not raise an exception);\n\n  super.setVerticalAxis(vAxis);\n\n
3273,notifyListeners,AbstractTitle,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/AbstractTitle.java,362,367,7,/**\n\n   * Notifies all registered listeners that the chart title has changed in some way.\n\n   * @param event An object that contains information about the change to the title;\n\n   */,12,  protected void notifyListeners(TitleChangeEvent event) {\n\n    if (this.notify) {\n\n      java.util.Iterator iterator = listeners.iterator();\n\n      while (iterator.hasNext()) {\n\n        TitleChangeListener listener = (TitleChangeListener)iterator.next();\n\n        listener.titleChanged(event);\n\n
3274,clone,AbstractTitle,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/AbstractTitle.java,196,210,15,"/**\n\n   * Returns a clone of the title.\n\n   * <P>\n\n   * One situation when this is useful is when editing the title properties - you can edit a\n\n   * clone, and then it is easier to cancel the changes if necessary.\n\n   * @return A clone of the title.\n\n   *\n\n   */",26,"  public Object clone() {\n\n    AbstractTitle duplicate = null;\n\n    try {\n\n      duplicate = (AbstractTitle)(super.clone());\n\n    }\n\n    catch (CloneNotSupportedException e) {\n\n      // this should never happen because Cloneable is implemented\n\n      throw new RuntimeException(""AbstractTitle.clone()"");\n\n    }\n\n    duplicate.setNotify(false);\n\n    duplicate.setInsets((Insets)this.getInsets().clone());\n\n    duplicate.setNotify(true);\n\n    return duplicate;\n\n"
3276,getHorizontalAlignment,AbstractTitle,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/AbstractTitle.java,259,260,9,"/**\n\n   * Returns the horizontal alignment of the title.  The constants LEFT, CENTER and RIGHT (defined\n\n   * in this class) are used.\n\n   * @return The horizontal alignment of the title (LEFT, CENTER or RIGHT);\n\n   */",4,  public int getHorizontalAlignment() {\n\n    return this.horizontalAlignment;\n\n
3277,draw,HorizontalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/HorizontalBarPlot.java,239,353,19,"/**\n\n   * Draws the plot on a Java 2D graphics device (such as the screen or a printer).\n\n   * <P>\n\n   * At your option, you may supply an instance of DrawInfo.  If you do, it will be populated\n\n   * with information about the drawing, including various plot dimensions and tooltip info.\n\n   * @param g2 The graphics device.\n\n   * @param plotArea The area within which the plot should be drawn.\n\n   * @param info A structure for passing back information about the chart drawing (ignored if\n\n   *       null).\n\n   */",196,"  public void draw(Graphics2D g2, Rectangle2D plotArea, DrawInfo info) {\n\n    // set up collection of drawing info...\n\n    ToolTipsCollection tooltips = null;\n\n    if (info!=null) {\n\n      info.setPlotArea(plotArea);\n\n      tooltips = info.getToolTipsCollection();\n\n    }\n\n    // adjust the drawing area for the plot insets (if any)...\n\n  if (insets!=null) {\n\n    plotArea.setRect(plotArea.getX()+insets.left,\n\n         plotArea.getY()+insets.top,\n\n               plotArea.getWidth()-insets.left-insets.right,\n\n         plotArea.getHeight()-insets.top-insets.bottom);\n\n  }\n\n  // estimate the area required for drawing the axes...\n\n  VerticalAxis vAxis = getVerticalAxis();\n\n  HorizontalAxis hAxis = getHorizontalAxis();\n\n  double vAxisAreaWidth = vAxis.reserveWidth(g2, this, plotArea);\n\n  Rectangle2D hAxisArea = hAxis.reserveAxisArea(g2, this, plotArea, vAxisAreaWidth);\n\n  // and this the area available for plotting data...\n\n  Rectangle2D dataArea = new Rectangle2D.Double(plotArea.getX()+vAxisAreaWidth,\n\n                plotArea.getY(),\n\n                plotArea.getWidth()-vAxisAreaWidth,\n\n                plotArea.getHeight()-hAxisArea.getHeight());\n\n    if (info!=null) {\n\n      info.setDataArea(dataArea);\n\n    }\n\n    // draw the background and axes...\n\n  drawOutlineAndBackground(g2, dataArea);\n\n  getCategoryAxis().draw(g2, plotArea, dataArea);\n\n  getRangeAxis().draw(g2, plotArea, dataArea);\n\n    // now get the data and plot the bars...\n\n    CategoryDataset data = this.getDataset();\n\n    if (data!=null) {\n\n      Shape savedClip = g2.getClip();\n\n      g2.clip(dataArea);\n\n      // draw a line at zero...\n\n      double translatedZero = getRangeAxis().translateValueToJava2D(0.0, dataArea);\n\n      Line2D baseline = new Line2D.Double(translatedZero, dataArea.getY(),\n\n                        translatedZero, dataArea.getMaxY());\n\n      g2.setStroke(new BasicStroke());\n\n      g2.draw(baseline);\n\n      int seriesCount = data.getSeriesCount();\n\n      int categoryCount = data.getCategoryCount();\n\n      int barCount = renderer.barWidthsPerCategory(data);\n\n      // work out the span dimensions for the categories...\n\n      double categorySpan = 0.0;\n\n      double categoryGapSpan = 0.0;\n\n      if (categoryCount>1) {\n\n        categorySpan = dataArea.getHeight()*\n\n                 (1-introGapPercent-trailGapPercent-categoryGapsPercent);\n\n        categoryGapSpan = dataArea.getHeight()*categoryGapsPercent;\n\n      }\n\n      else {\n\n        categorySpan = dataArea.getHeight()*(1-introGapPercent-trailGapPercent);\n\n      }\n\n      // work out the item span...\n\n      double itemSpan = categorySpan;\n\n      double itemGapSpan = 0.0;\n\n      if (seriesCount>1) {\n\n        if (renderer.hasItemGaps()) {\n\n          itemGapSpan = plotArea.getHeight()*itemGapsPercent;\n\n          itemSpan = itemSpan - itemGapSpan;\n\n        }\n\n      }\n\n      double itemWidth = itemSpan/(categoryCount*renderer.barWidthsPerCategory(data));\n\n      int categoryIndex = 0;\n\n      Iterator iterator = data.getCategories().iterator();\n\n      while (iterator.hasNext()) {\n\n        Object category = iterator.next();\n\n        for (int series=0; series<seriesCount; series++) {\n\n          Shape tooltipArea = renderer.drawBar(g2, dataArea, this,\n\n                             this.getRangeAxis(), data, series,\n\n                             category, categoryIndex,\n\n                             translatedZero, itemWidth,\n\n                             categorySpan, categoryGapSpan,\n\n                             itemSpan, itemGapSpan);\n\n          // collect optional tooltip information...\n\n          if (tooltips!=null) {\n\n            if (this.toolTipGenerator==null) {\n\n              toolTipGenerator = new StandardCategoryToolTipGenerator();\n\n            }\n\n            String tip = this.toolTipGenerator.generateToolTip(data, series, category);\n\n            if (tooltipArea!=null) {\n\n              tooltips.addToolTip(tip, tooltipArea);\n\n            }\n\n          }\n\n        }\n\n        categoryIndex++;\n\n      }\n\n      // draw vertical crosshair if required...\n\n      ValueAxis hva = this.getRangeAxis();\n\n      if (hva.isCrosshairVisible()) {\n\n        this.drawVerticalLine(g2, dataArea, hva.getCrosshairValue(),\n\n                    hva.getCrosshairStroke(),\n\n                    hva.getCrosshairPaint());\n\n      }\n\n      g2.setClip(savedClip);\n\n"
3278,drawItem,CandlestickRenderer,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/CandlestickRenderer.java,78,128,27,"/**\n\n   * Draws the visual representation of a single data item.\n\n   * @param g2 The graphics device.\n\n   * @param dataArea The area within which the plot is being drawn.\n\n   * @param info Collects info about the drawing.\n\n   * @param plot The plot (can be used to obtain standard color information etc).\n\n   * @param horizontalAxis The horizontal axis.\n\n   * @param verticalAxis The vertical axis.\n\n   * @param data The dataset.\n\n   * @param series The series index.\n\n   * @param item The item index.\n\n   * @param translatedRangeZero Zero on the range axis (supplied so that, if it is required, it\n\n   *    doesn't have to be calculated repeatedly).\n\n   */",84,"  public Shape drawItem(Graphics2D g2, Rectangle2D dataArea, DrawInfo info,\n\n              XYPlot plot, ValueAxis horizontalAxis, ValueAxis verticalAxis,\n\n              XYDataset data, int series, int item,\n\n              double translatedRangeZero, CrosshairInfo crosshairInfo) {\n\n    Shape result = null;\n\n    HighLowDataset highLowData = (HighLowDataset)data;\n\n  Number x = highLowData.getXValue(series, item);\n\n    Number yHigh  = highLowData.getHighValue(series, item);\n\n    Number yLow   = highLowData.getLowValue(series, item);\n\n    Number yOpen  = highLowData.getOpenValue(series, item);\n\n    Number yClose = highLowData.getCloseValue(series, item);\n\n    double xx = horizontalAxis.translateValueToJava2D(x.doubleValue(), dataArea);\n\n    double yyHigh = verticalAxis.translateValueToJava2D(yHigh.doubleValue(), dataArea);\n\n    double yyLow = verticalAxis.translateValueToJava2D(yLow.doubleValue(), dataArea);\n\n    double yyOpen = verticalAxis.translateValueToJava2D(yOpen.doubleValue(), dataArea);\n\n    double yyClose = verticalAxis.translateValueToJava2D(yClose.doubleValue(), dataArea);\n\n    Paint p = plot.getSeriesPaint(series);\n\n    Stroke s = plot.getSeriesStroke(series);\n\n    g2.setPaint(p);\n\n    g2.setStroke(s);\n\n    // draw the upper shadow\n\n    if ((yyHigh<yyOpen) && (yyHigh<yyClose)) {\n\n      g2.draw(new Line2D.Double(xx, yyHigh, xx, Math.min(yyOpen, yyClose)));\n\n    }\n\n    // draw the lower shadow\n\n    if ((yyLow>yyOpen) && (yyLow>yyClose)) {\n\n      g2.draw(new Line2D.Double(xx, yyLow, xx, Math.max(yyOpen, yyClose)));\n\n    }\n\n    // draw the body\n\n    Shape body = null;\n\n    if (yyOpen<yyClose) {\n\n      body = new Rectangle2D.Double(xx-candleWidth/2, yyOpen,\n\n                      candleWidth, yyClose-yyOpen);\n\n      g2.fill(body);\n\n    }\n\n    else {\n\n      body = new Rectangle2D.Double(xx-candleWidth/2, yyClose,\n\n                      candleWidth, yyOpen-yyClose);\n\n      g2.draw(body);\n\n    }\n\n    result = body;\n\n    return result;\n\n"
3279,CandlestickRenderer,CandlestickRenderer,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/CandlestickRenderer.java,58,60,5,/**\n\n   * Creates a new renderer.\n\n   */,4,  public CandlestickRenderer(double candleWidth) {\n\n    this.candleWidth = candleWidth;\n\n
3280,handleClick,HorizontalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/HorizontalBarPlot.java,420,426,5,/**\n\n   * Handles a 'click' on the plot by updating the anchor values...\n\n   */,12,"  public void handleClick(int x, int y, DrawInfo info) {\n\n    // set the anchor value for the horizontal axis...\n\n    ValueAxis hva = this.getRangeAxis();\n\n    double hvalue = hva.translateJava2DtoValue((float)x, info.getDataArea());\n\n    hva.setAnchorValue(hvalue);\n\n    hva.setCrosshairValue(hvalue);\n\n"
3281,isCompatibleVerticalAxis,HorizontalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/HorizontalBarPlot.java,222,226,9,"/**\n\n   * Checks the compatibility of a vertical axis, returning true if the axis is compatible with\n\n   * the plot, and false otherwise.\n\n   * @param axis The vertical axis;\n\n   */",10,  public boolean isCompatibleVerticalAxis(Axis axis) {\n\n  if (axis instanceof VerticalCategoryAxis) {\n\n    return true;\n\n  }\n\n  else return false;\n\n
3282,setRenderer,HorizontalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/HorizontalBarPlot.java,119,121,7,/**\n\n   * Sets the renderer for the bar plot.\n\n   * @param renderer The renderer.\n\n   */,6,  public void setRenderer(HorizontalBarRenderer renderer) {\n\n    this.renderer = renderer;\n\n    this.notifyListeners(new PlotChangeEvent(this));\n\n
3283,getCategoryCoordinate,HorizontalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/HorizontalBarPlot.java,178,201,9,/**\n\n   * Returns the x-coordinate (in Java 2D User Space) of the center of the specified category.\n\n   * @param category The index of the category of interest (first category index = 0).\n\n   * @param area The region within which the plot will be drawn.\n\n   */,36,"  public double getCategoryCoordinate(int category, Rectangle2D area) {\n\n    // calculate first part of result...\n\n    double result = area.getY()+(area.getHeight()*introGapPercent);\n\n    // then add some depending on how many categories...\n\n    int categoryCount = getDataset().getCategoryCount();\n\n    if (categoryCount>1) {\n\n    double categorySpan = area.getHeight()\n\n                  *(1-introGapPercent-trailGapPercent-categoryGapsPercent);\n\n      double categoryGapSpan = area.getHeight()*categoryGapsPercent;\n\n      result = result\n\n           + (category+0.5)*(categorySpan/categoryCount)\n\n           + (category)*(categoryGapSpan/(categoryCount-1));\n\n    }\n\n    else {\n\n      result = result\n\n           + (category+0.5)*area.getHeight()*(1-introGapPercent-trailGapPercent);\n\n    }\n\n    return result;\n\n"
3284,getRangeAxis,HorizontalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/HorizontalBarPlot.java,134,135,5,/**\n\n   * Returns the range axis for the plot.\n\n   */,4,  public ValueAxis getRangeAxis() {\n\n  return (ValueAxis)horizontalAxis;\n\n
3285,getMinimumHorizontalDataValue,HorizontalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/HorizontalBarPlot.java,394,400,7,"/**\n\n   * Returns the minimum value in the range, since this is plotted against the horizontal axis for\n\n   * a HorizontalBarPlot.\n\n   */",12,  public Number getMinimumHorizontalDataValue() {\n\n  Dataset data = this.getChart().getDataset();\n\n  if (data!=null) {\n\n    return Datasets.getMinimumRangeValue(data);\n\n  }\n\n  else return null;\n\n
3286,saveChartAsPNG,ChartUtilities,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ChartUtilities.java,76,82,13,/**\n\n   * Saves the chart as a PNG format image file.\n\n   * @param chart The chart.\n\n   * @param width The image width.\n\n   * @param height The image height.\n\n   * @param file The file.\n\n   */,12,"  public static void saveChartAsPNG(File file, JFreeChart chart, int width, int height)\n\n    throws IOException {\n\n    DataOutputStream out = new DataOutputStream(\n\n                   new BufferedOutputStream(new FileOutputStream(file)));\n\n    writeChartAsPNG(out, chart, width, height);\n\n    out.close();\n\n"
3287,writeChartAsJPEG,ChartUtilities,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ChartUtilities.java,93,100,13,/**\n\n   * Writes the chart to the output stream in JPEG format.\n\n   * @param out The output stream.\n\n   * @param chart The chart.\n\n   * @param width The image width.\n\n   * @param height The image height.\n\n   */,14,"  public static void writeChartAsJPEG(OutputStream out, JFreeChart chart, int width, int height)\n\n    throws IOException {\n\n    BufferedImage image = chart.createBufferedImage(width, height);\n\n    JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder(out);\n\n    JPEGEncodeParam param = encoder.getDefaultJPEGEncodeParam(image);\n\n    param.setQuality(1.0f, true);\n\n    encoder.encode(image, param);\n\n"
3288,writeChartAsPNG,ChartUtilities,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ChartUtilities.java,59,65,13,/**\n\n   * Writes the chart to the output stream in PNG format.\n\n   * @param out The output stream.\n\n   * @param chart The chart.\n\n   * @param width The image width.\n\n   * @param height The image height.\n\n   */,12,"  public static void writeChartAsPNG(OutputStream out, JFreeChart chart, int width, int height)\n\n    throws IOException {\n\n    BufferedImage chartImage = chart.createBufferedImage(width, height);\n\n    PngEncoder encoder = new PngEncoder(chartImage, false, 0, 9);\n\n    byte[] pngData = encoder.pngEncode();\n\n    out.write(pngData);\n\n"
3289,getCount,DateUnit,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/DateUnit.java,74,75,5,/**\n\n   * Returns the number of units.\n\n   */,4,  public int getCount() {\n\n  return this.count;\n\n
3290,createVerticalBarChart3D,ChartFactory,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ChartFactory.java,94,107,19,/**\n\n   * Creates a vertical 3D-effect bar chart with default settings.\n\n   * <P>\n\n   * Added by Serge V. Grachov.\n\n   * @param title The chart title.\n\n   * @param categoryAxisLabel The label for the category axis.\n\n   * @param valueAxisLabel The label for the value axis.\n\n   * @param data The dataset for the chart.\n\n   * @param legend A flag specifying whether or not a legend is required.\n\n   */,24,"  public static JFreeChart createVerticalBarChart3D(String title, String categoryAxisLabel,\n\n                          String valueAxisLabel, CategoryDataset data,\n\n                          boolean legend) {\n\n    CategoryAxis categoryAxis = new HorizontalCategoryAxis(categoryAxisLabel);\n\n    ValueAxis valueAxis = new VerticalNumberAxis3D(valueAxisLabel);\n\n    VerticalBarPlot plot = new VerticalBarPlot3D(categoryAxis, valueAxis);\n\n    // the insets here are a workaround for the fact that the plot area is no longer a\n\n    // rectangle, so it is overlapping the title.  To be fixed...\n\n    plot.setInsets(new Insets(20, 2, 2, 2));\n\n    plot.setRenderer(new VerticalBarRenderer3D());\n\n    JFreeChart chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);\n\n    return chart;\n\n"
3291,getField,DateUnit,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/DateUnit.java,67,68,5,/**\n\n   * Returns the field used for this DateUnit.\n\n   */,4,  public int getField() {\n\n  return this.field;\n\n
3292,DateUnit,DateUnit,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/DateUnit.java,59,61,5,/**\n\n   * Builds a DateUnit.\n\n   */,6,"  public DateUnit(int field, int count) {\n\n  this.field = field;\n\n  this.count = count;\n\n"
3293,createStackedVerticalBarChart3D,ChartFactory,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ChartFactory.java,144,156,21,/**\n\n   * Creates a stacked vertical bar chart with default settings.  This is still experimental at\n\n   * this point!\n\n   * <P>\n\n   * Added by Serge V. Grachov.\n\n   * @param title The chart title.\n\n   * @param categoryAxisLabel The label for the category axis.\n\n   * @param valueAxisLabel The label for the value axis.\n\n   * @param data The dataset for the chart.\n\n   * @param legend A flag specifying whether or not a legend is required.\n\n   */,24,"  public static JFreeChart createStackedVerticalBarChart3D(String title, String categoryAxisLabel,\n\n                            String valueAxisLabel, CategoryDataset data,\n\n                            boolean legend) {\n\n    CategoryAxis categoryAxis = new HorizontalCategoryAxis(categoryAxisLabel);\n\n    ValueAxis valueAxis = new VerticalNumberAxis3D(valueAxisLabel);\n\n    VerticalBarPlot plot = new VerticalBarPlot3D(categoryAxis, valueAxis);\n\n    // the insets here are a workaround for the fact that the plot area is no longer a\n\n    // rectangle, so it is overlapping the title.  To be fixed...\n\n    plot.setInsets(new Insets(20, 2, 2, 2));\n\n    plot.setRenderer(new StackedVerticalBarRenderer3D());\n\n    JFreeChart chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);\n\n    return chart;\n\n"
3294,createLineChart,ChartFactory,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ChartFactory.java,210,218,15,/**\n\n   * Creates a line chart with default settings.\n\n   * @param title The chart title.\n\n   * @param categoryAxisLabel The label for the category axis.\n\n   * @param valueAxisLabel The label for the value axis.\n\n   * @param data The dataset for the chart.\n\n   * @param legend A flag specifying whether or not a legend is required.\n\n   */,16,"  public static JFreeChart createLineChart(String title, String categoryAxisLabel,\n\n                         String valueAxisLabel, CategoryDataset data,\n\n                         boolean legend) {\n\n    Axis categoryAxis = new HorizontalCategoryAxis(categoryAxisLabel);\n\n    Axis valueAxis = new VerticalNumberAxis(valueAxisLabel);\n\n    Plot plot = new LinePlot(categoryAxis, valueAxis);\n\n    JFreeChart chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);\n\n    return chart;\n\n"
3295,createTimeSeriesChart,ChartFactory,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ChartFactory.java,289,301,23,"/**\n\n   * Creates and returns a time series chart.  A time series chart is an XYPlot with a date\n\n   * axis (horizontal) and a number axis (vertical), and each data item is connected with a line.\n\n   * <P>\n\n   * Note that you can supply a TimeSeriesDataset to this method as it is a subclass of\n\n   * XYDataset.\n\n   * @param title The chart title.\n\n   * @param timeAxisLabel A label for the time axis.\n\n   * @param valueAxisLabel A label for the value axis.\n\n   * @param data The dataset for the chart.\n\n   * @param legend A flag specifying whether or not a legend is required.\n\n   */",24,"  public static JFreeChart createTimeSeriesChart(String title, String timeAxisLabel,\n\n                           String valueAxisLabel, XYDataset data,\n\n                           boolean legend) {\n\n    ValueAxis timeAxis = new HorizontalDateAxis(timeAxisLabel);\n\n    //timeAxis.setCrosshairLockedOnData(false);\n\n    NumberAxis valueAxis = new VerticalNumberAxis(valueAxisLabel);\n\n    valueAxis.setAutoRangeIncludesZero(false);  // override default\n\n    //valueAxis.setCrosshairLockedOnData(false);\n\n    XYPlot plot = new XYPlot(timeAxis, valueAxis);\n\n    plot.setXYItemRenderer(new StandardXYItemRenderer(StandardXYItemRenderer.LINES));\n\n    JFreeChart chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);\n\n    return chart;\n\n"
3296,createSignalChart,ChartFactory,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ChartFactory.java,389,398,19,/**\n\n   * Creates and returns a default instance of a signal chart based on the specified dataset.\n\n   * <P>\n\n   * Added by David Gilbert.\n\n   * @param title The chart title.\n\n   * @param timeAxisLabel A label for the time axis.\n\n   * @param valueAxisLabel A label for the value axis.\n\n   * @param data The dataset for the chart.\n\n   * @param legend A flag specifying whether or not a legend is required.\n\n   */,18,"  public static JFreeChart createSignalChart(String title, String timeAxisLabel,\n\n                         String valueAxisLabel, SignalsDataset data,\n\n                         boolean legend) {\n\n    ValueAxis timeAxis = new HorizontalDateAxis(timeAxisLabel);\n\n    NumberAxis valueAxis = new VerticalNumberAxis(valueAxisLabel);\n\n    XYPlot plot = new XYPlot(timeAxis, valueAxis);\n\n    plot.setXYItemRenderer(new SignalRenderer());\n\n    JFreeChart chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);\n\n    return chart;\n\n"
3297,createHighLowChart,ChartFactory,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ChartFactory.java,341,351,21,/**\n\n   * Creates and returns a default instance of a high-low-open-close chart based on the specified\n\n   * dataset.\n\n   * <P>\n\n   * Added by Andrzej Porebski.  Amended by David Gilbert.\n\n   * @param title The chart title.\n\n   * @param timeAxisLabel A label for the time axis.\n\n   * @param valueAxisLabel A label for the value axis.\n\n   * @param data The dataset for the chart.\n\n   * @param legend A flag specifying whether or not a legend is required.\n\n   */,20,"  public static JFreeChart createHighLowChart(String title, String timeAxisLabel,\n\n                        String valueAxisLabel, HighLowDataset data,\n\n                        boolean legend) {\n\n    ValueAxis timeAxis = new HorizontalDateAxis(timeAxisLabel);\n\n    NumberAxis valueAxis = new VerticalNumberAxis(valueAxisLabel);\n\n    //HighLowPlot plot = new HighLowPlot(timeAxis, valueAxis);\n\n    XYPlot plot = new XYPlot(timeAxis, valueAxis);\n\n    plot.setXYItemRenderer(new HighLowRenderer());\n\n    JFreeChart chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);\n\n    return chart;\n\n"
3298,createVerticalBarChart,ChartFactory,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ChartFactory.java,71,80,15,/**\n\n   * Creates a vertical bar chart with default settings.\n\n   * @param title The chart title.\n\n   * @param categoryAxisLabel The label for the category axis.\n\n   * @param valueAxisLabel The label for the value axis.\n\n   * @param data The dataset for the chart.\n\n   * @param legend A flag specifying whether or not a legend is required.\n\n   */,16,"  public static JFreeChart createVerticalBarChart(String title,\n\n                          String categoryAxisLabel, String valueAxisLabel,\n\n                          CategoryDataset data, boolean legend) {\n\n    CategoryAxis categoryAxis = new HorizontalCategoryAxis(categoryAxisLabel);\n\n    ValueAxis valueAxis = new VerticalNumberAxis(valueAxisLabel);\n\n    Plot plot = new VerticalBarPlot(categoryAxis, valueAxis);\n\n    JFreeChart chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);\n\n    return chart;\n\n"
3299,createHorizontalBarChart,ChartFactory,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ChartFactory.java,168,176,15,/**\n\n   * Creates a horizontal bar chart with default settings.\n\n   * @param title The chart title.\n\n   * @param categoryAxisLabel The label for the category axis.\n\n   * @param valueAxisLabel The label for the value axis.\n\n   * @param data The dataset for the chart.\n\n   * @param legend A flag specifying whether or not a legend is required.\n\n   */,16,"  public static JFreeChart createHorizontalBarChart(String title, String categoryAxisLabel,\n\n                            String valueAxisLabel, CategoryDataset data,\n\n                            boolean legend) {\n\n    Axis categoryAxis = new VerticalCategoryAxis(categoryAxisLabel);\n\n    Axis valueAxis = new HorizontalNumberAxis(valueAxisLabel);\n\n    Plot plot = new HorizontalBarPlot(valueAxis, categoryAxis);\n\n    JFreeChart chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);\n\n    return chart;\n\n"
3300,createStackedVerticalBarChart,ChartFactory,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ChartFactory.java,120,129,17,/**\n\n   * Creates a stacked vertical bar chart with default settings.  This is still experimental at\n\n   * this point!\n\n   * @param title The chart title.\n\n   * @param categoryAxisLabel The label for the category axis.\n\n   * @param valueAxisLabel The label for the value axis.\n\n   * @param data The dataset for the chart.\n\n   * @param legend A flag specifying whether or not a legend is required.\n\n   */,18,"  public static JFreeChart createStackedVerticalBarChart(String title, String categoryAxisLabel,\n\n                             String valueAxisLabel, CategoryDataset data,\n\n                             boolean legend) {\n\n    CategoryAxis categoryAxis = new HorizontalCategoryAxis(categoryAxisLabel);\n\n    ValueAxis valueAxis = new VerticalNumberAxis(valueAxisLabel);\n\n    VerticalBarPlot plot = new VerticalBarPlot(categoryAxis, valueAxis);\n\n    plot.setRenderer(new StackedVerticalBarRenderer());\n\n    JFreeChart chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);\n\n    return chart;\n\n"
3301,createStackedHorizontalBarChart,ChartFactory,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ChartFactory.java,189,198,17,/**\n\n   * Creates a stacked horizontal bar chart with default settings.  This is still experimental at\n\n   * this point!\n\n   * @param title The chart title.\n\n   * @param categoryAxisLabel The label for the category axis.\n\n   * @param valueAxisLabel The label for the value axis.\n\n   * @param data The dataset for the chart.\n\n   * @param legend A flag specifying whether or not a legend is required.\n\n   */,18,"  public static JFreeChart createStackedHorizontalBarChart(String title, String categoryAxisLabel,\n\n                            String valueAxisLabel, CategoryDataset data,\n\n                            boolean legend) {\n\n    Axis categoryAxis = new VerticalCategoryAxis(categoryAxisLabel);\n\n    Axis valueAxis = new HorizontalNumberAxis(valueAxisLabel);\n\n    HorizontalBarPlot plot = new HorizontalBarPlot(valueAxis, categoryAxis);\n\n    plot.setRenderer(new StackedHorizontalBarRenderer());\n\n    JFreeChart chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);\n\n    return chart;\n\n"
3302,createScatterPlot,ChartFactory,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ChartFactory.java,265,273,15,/**\n\n   * Creates a scatter plot with default settings.\n\n   * @param title The chart title.\n\n   * @param xAxisLabel A label for the X-axis.\n\n   * @param yAxisLabel A label for the Y-axis.\n\n   * @param data The dataset for the chart.\n\n   * @param legend A flag specifying whether or not a legend is required.\n\n   */,16,"  public static JFreeChart createScatterPlot(String title, String xAxisLabel, String yAxisLabel,\n\n                         XYDataset data, boolean legend) {\n\n    ValueAxis xAxis = new HorizontalNumberAxis(xAxisLabel);\n\n    ValueAxis yAxis = new VerticalNumberAxis(yAxisLabel);\n\n    XYPlot plot = new XYPlot(xAxis, yAxis);\n\n    plot.setXYItemRenderer(new StandardXYItemRenderer(StandardXYItemRenderer.SHAPES));\n\n    JFreeChart chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);\n\n    return chart;\n\n"
3303,createVerticalXYBarChart,ChartFactory,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ChartFactory.java,314,326,17,/**\n\n   * Creates and returns a default instance of a VerticalXYBarChart based on the specified\n\n   * dataset.\n\n   * @param title The chart title.\n\n   * @param xAxisLabel A label for the X-axis.\n\n   * @param yAxisLabel A label for the Y-axis.\n\n   * @param data The dataset for the chart.\n\n   * @param legend A flag specifying whether or not a legend is required.\n\n   */,24,"  public static JFreeChart createVerticalXYBarChart(String title, String xAxisLabel,\n\n                            String yAxisLabel, IntervalXYDataset data,\n\n                            boolean legend) {\n\n    HorizontalDateAxis timeAxis = new HorizontalDateAxis(xAxisLabel);\n\n    ValueAxis valueAxis = new VerticalNumberAxis(yAxisLabel);\n\n    //Plot plot = new VerticalXYBarPlot(timeAxis, valueAxis, new Insets(0,0,0,0), Color.white,\n\n    //                  new BasicStroke(), Color.gray);\n\n    XYPlot plot = new XYPlot(timeAxis, valueAxis, new Insets(0,0,0,0), Color.white,\n\n                 new BasicStroke(), Color.gray);\n\n    plot.setXYItemRenderer(new VerticalXYBarRenderer());\n\n    JFreeChart chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);\n\n    return chart;\n\n"
3304,setMinimumDate,DateAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/DateAxis.java,173,177,7,/**\n\n   * Sets the minimum date visible on the axis.\n\n   * @param minimumDate The new minimum date.\n\n   */,8,  public void setMinimumDate(Date minimumDate) {\n\n  this.minimumDate = minimumDate;\n\n    double millis = (double)minimumDate.getTime();\n\n    this.setMinimumAxisValue(millis);\n\n
3305,createCombinableTimeSeriesChart,ChartFactory,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ChartFactory.java,431,435,20,"/**\n\n   * Creates and returns a combinable time series chart.  A time series chart is an XYPlot with a\n\n   * date axis (horizontal) and a number axis (vertical), and each data item is connected with a\n\n   * line.\n\n   * <P>\n\n   * @author Bill Kelemen.\n\n   * @param horizontal The horizontal axis\n\n   * @param vertical The vertical axis\n\n   * @param data The dataset for the chart.\n\n   */\n",10,"  public static CombinedChart createCombinableTimeSeriesChart(ValueAxis horizontal,\n\n                                ValueAxis vertical, Dataset data) {\n\n    XYPlot plot = new XYPlot(horizontal, vertical);\n\n      plot.setXYItemRenderer(new StandardXYItemRenderer(StandardXYItemRenderer.LINES));\n\n      return createCombinableChart(data, plot);\n\n"
3306,calculateHighestVisibleTickValue,DateAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/DateAxis.java,307,308,7,/**\n\n   * Calculates the value of the highest visible tick on the axis.\n\n   * @return The value of the highest visible tick on the axis.\n\n   */,4,"  public Date calculateHighestVisibleTickValue(DateUnit unit) {\n\n  return this.previousStandardDate(maximumDate, unit.getField(), unit.getCount());\n\n"
3307,createXYChart,ChartFactory,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ChartFactory.java,244,253,15,/**\n\n   * Creates an XY (line) plot with default settings.\n\n   * @param title The chart title.\n\n   * @param xAxisLabel A label for the X-axis.\n\n   * @param yAxisLabel A label for the Y-axis.\n\n   * @param data The dataset for the chart.\n\n   * @param legend A flag specifying whether or not a legend is required.\n\n   */,18,"  public static JFreeChart createXYChart(String title, String xAxisLabel, String yAxisLabel,\n\n                         XYDataset data, boolean legend) {\n\n    NumberAxis xAxis = new HorizontalNumberAxis(xAxisLabel);\n\n    xAxis.setAutoRangeIncludesZero(false);\n\n    NumberAxis yAxis = new VerticalNumberAxis(yAxisLabel);\n\n    XYPlot plot = new XYPlot(xAxis, yAxis);\n\n    plot.setXYItemRenderer(new StandardXYItemRenderer(StandardXYItemRenderer.LINES));\n\n    JFreeChart chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);\n\n    return chart;\n\n"
3308,DateAxis,DateAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/DateAxis.java,127,157,45,/**\n\n   * Constructs a date axis.\n\n   * @param label The axis label.\n\n   * @param labelFont The font for displaying the axis label.\n\n   * @param labelPaint The paint used to draw the axis label.\n\n   * @param labelInsets Determines the amount of blank space around the label.\n\n   * @param tickLabelsVisible Flag indicating whether or not tick labels are visible.\n\n   * @param tickLabelFont The font used to display tick labels.\n\n   * @param tickLabelPaint The paint used to draw tick labels.\n\n   * @param tickLabelInsets Determines the amount of blank space around tick labels.\n\n   * @param tickMarksVisible Flag indicating whether or not tick marks are visible.\n\n   * @param tickMarkStroke The stroke used to draw tick marks (if visible).\n\n   * @param autoRange Flag indicating whether or not the axis range is automatically adjusted to\n\n   *          fit the data.\n\n   * @param minimumDate The earliest date showing on the axis.\n\n   * @param maximumDate The latest date showing on the axis.\n\n   * @param autoTickUnitSelection A flag indicating whether or not the tick unit is automatically\n\n   *                selected.\n\n   * @param tickUnit The tick unit.\n\n   * @param gridLinesVisible Flag indicating whether or not grid lines are visible.\n\n   * @param gridStroke The Stroke used to display grid lines (if visible).\n\n   * @param gridPaint The Paint used to display grid lines (if visible).\n\n   */,56,"  protected DateAxis(String label,\n\n             Font labelFont, Paint labelPaint, Insets labelInsets,\n\n         boolean tickLabelsVisible,\n\n             Font tickLabelFont, Paint tickLabelPaint, Insets tickLabelInsets,\n\n         boolean tickMarksVisible, Stroke tickMarkStroke,\n\n         boolean autoRange, Date minimumDate, Date maximumDate,\n\n         boolean autoTickUnitSelection, DateUnit tickUnit,\n\n             SimpleDateFormat tickLabelFormatter,\n\n         boolean gridLinesVisible, Stroke gridStroke, Paint gridPaint,\n\n             Date crosshairDate, Stroke crosshairStroke, Paint crosshairPaint) {\n\n  super(label, labelFont, labelPaint, labelInsets,\n\n      tickLabelsVisible, tickLabelFont, tickLabelPaint, tickLabelInsets,\n\n      tickMarksVisible, tickMarkStroke, autoRange,\n\n      autoTickUnitSelection, gridLinesVisible, gridStroke, gridPaint,\n\n        0.0,\n\n        crosshairStroke, crosshairPaint);\n\n  this.minimumDate = minimumDate;\n\n    if (minimumDate!=null) {\n\n      this.minimumAxisValue = (double)minimumDate.getTime();\n\n    }\n\n  this.maximumDate = maximumDate;\n\n    if (maximumDate!=null) {\n\n      this.maximumAxisValue = (double)maximumDate.getTime();\n\n    }\n\n    this.crosshairDate = crosshairDate;\n\n  this.tickUnit = tickUnit;\n\n  this.tickLabelFormatter = tickLabelFormatter;\n\n    this.anchorValue = (double)this.anchorDate.getTime();\n\n"
3309,createCombinableXYChart,ChartFactory,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ChartFactory.java,413,417,13,/**\n\n   * Creates a combinable XY (line) plot with default settings.\n\n   * @author Bill Kelemen.\n\n   * @param horizontal The horizontal axis\n\n   * @param vertical The vertical axis\n\n   * @param data The dataset for the chart.\n\n   */,10,"  public static CombinedChart createCombinableXYChart(ValueAxis horizontal, ValueAxis vertical,\n\n                            Dataset data) {\n\n    XYPlot plot = new XYPlot(horizontal, vertical);\n\n    plot.setXYItemRenderer(new StandardXYItemRenderer(StandardXYItemRenderer.LINES));\n\n    return createCombinableChart(data, plot);\n\n"
3310,createCandlestickChart,ChartFactory,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ChartFactory.java,366,375,21,/**\n\n   * Creates and returns a default instance of a candlesticks chart based on the specified\n\n   * dataset.\n\n   * <P>\n\n   * Added by David Gilbert.\n\n   * @param title The chart title.\n\n   * @param timeAxisLabel A label for the time axis.\n\n   * @param valueAxisLabel A label for the value axis.\n\n   * @param data The dataset for the chart.\n\n   * @param legend A flag specifying whether or not a legend is required.\n\n   */,18,"  public static JFreeChart createCandlestickChart(String title, String timeAxisLabel,\n\n                          String valueAxisLabel, HighLowDataset data,\n\n                          boolean legend) {\n\n    ValueAxis timeAxis = new HorizontalDateAxis(timeAxisLabel);\n\n    NumberAxis valueAxis = new VerticalNumberAxis(valueAxisLabel);\n\n    XYPlot plot = new XYPlot(timeAxis, valueAxis);\n\n    plot.setXYItemRenderer(new CandlestickRenderer(4.0));\n\n    JFreeChart chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);\n\n    return chart;\n\n"
3311,createCombinableVerticalXYBarChart,ChartFactory,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ChartFactory.java,468,472,17,/**\n\n   * Creates and returns a default instance of a VerticalXYBar combinable chart based on the\n\n   * specified dataset.\n\n   * <P>\n\n   * @author Bill Kelemen.\n\n   * @param horizontal The horizontal axis\n\n   * @param vertical The vertical axis\n\n   * @param data The dataset for the chart.\n\n   */,8,"  public static CombinedChart createCombinableVerticalXYBarChart(Axis horizontal, Axis vertical,\n\n                                   Dataset data) {\n\n    VerticalXYBarPlot plot = new VerticalXYBarPlot(horizontal, vertical);\n\n    return createCombinableChart(data, plot);\n\n"
3312,createCombinableHighLowChart,ChartFactory,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ChartFactory.java,448,454,18,/**\n\n   * Creates and returns a default instance of a high-low-open-close combinable chart based on\n\n   * the specified dataset.\n\n   * <P>\n\n   * @author Bill Kelemen.\n\n   * @param horizontal The horizontal axis\n\n   * @param vertical The vertical axis\n\n   * @param data The dataset for the chart.\n\n   */\n,12,"  public static CombinedChart createCombinableHighLowChart(ValueAxis horizontal,\n\n                               ValueAxis vertical,\n\n                               Dataset data) {\n\n    XYPlot plot = new XYPlot(horizontal, vertical);\n\n      plot.setXYItemRenderer(new HighLowRenderer());\n\n      return createCombinableChart(data, plot);\n\n"
3313,previousStandardDate,DateAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/DateAxis.java,314,390,5,"/**\n\n   * Returns the previous ""standard"" date (based on the specified field and units).\n\n   */",138,"  protected Date previousStandardDate(Date date, int field, int units) {\n\n  int milliseconds;\n\n  int seconds;\n\n  int minutes;\n\n  int hours;\n\n  int days;\n\n  int months;\n\n  int years;\n\n  Calendar calendar = Calendar.getInstance();\n\n  calendar.setTime(date);\n\n  int current = calendar.get(field);\n\n  int value = units*(current/units);\n\n  switch (field) {\n\n  case(Calendar.MILLISECOND) : {\n\n      years = calendar.get(Calendar.YEAR);\n\n      months = calendar.get(Calendar.MONTH);\n\n      days = calendar.get(Calendar.DATE);\n\n      hours = calendar.get(Calendar.HOUR_OF_DAY);\n\n      minutes = calendar.get(Calendar.MINUTE);\n\n      seconds = calendar.get(Calendar.SECOND);\n\n      calendar.set(years, months, days, hours, minutes, seconds);\n\n      calendar.set(Calendar.MILLISECOND, value);\n\n      return calendar.getTime();   }\n\n  case(Calendar.SECOND)    : {\n\n    years = calendar.get(Calendar.YEAR);\n\n    months = calendar.get(Calendar.MONTH);\n\n    days = calendar.get(Calendar.DATE);\n\n    hours = calendar.get(Calendar.HOUR_OF_DAY);\n\n    minutes = calendar.get(Calendar.MINUTE);\n\n    calendar.clear(Calendar.MILLISECOND);\n\n    calendar.set(years, months, days, hours, minutes, value);\n\n    return calendar.getTime();\n\n  }\n\n  case(Calendar.MINUTE)    : {\n\n    years = calendar.get(Calendar.YEAR);\n\n    months = calendar.get(Calendar.MONTH);\n\n    days = calendar.get(Calendar.DATE);\n\n    hours = calendar.get(Calendar.HOUR_OF_DAY);\n\n    calendar.clear(Calendar.MILLISECOND);\n\n    calendar.set(years, months, days, hours, value, 0);\n\n    return calendar.getTime();\n\n  }\n\n  case(Calendar.HOUR_OF_DAY)    : {\n\n    years = calendar.get(Calendar.YEAR);\n\n    months = calendar.get(Calendar.MONTH);\n\n    days = calendar.get(Calendar.DATE);\n\n    calendar.clear(Calendar.MILLISECOND);\n\n    calendar.set(years, months, days, value, 0, 0);\n\n    return calendar.getTime();\n\n  }\n\n  case(Calendar.DATE)    : {\n\n    years = calendar.get(Calendar.YEAR);\n\n    months = calendar.get(Calendar.MONTH);\n\n    calendar.clear(Calendar.MILLISECOND);\n\n    calendar.set(years, months, value, 0, 0, 0);\n\n    return calendar.getTime();\n\n  }\n\n  case(Calendar.MONTH)     : {\n\n    years = calendar.get(Calendar.YEAR);\n\n    calendar.clear(Calendar.MILLISECOND);\n\n    calendar.set(years, value, 1, 0, 0, 0);\n\n    return calendar.getTime();\n\n  }\n\n  case(Calendar.YEAR)    : {\n\n    calendar.clear(Calendar.MILLISECOND);\n\n    calendar.set(value, 0, 1, 0, 0, 0);\n\n    return calendar.getTime();\n\n  }\n\n  default: return null;\n\n"
3314,createPieChart,ChartFactory,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ChartFactory.java,228,232,11,/**\n\n   * Creates a pie chart with default settings.\n\n   * @param title The chart title.\n\n   * @param data The dataset for the chart.\n\n   * @param legend A flag specifying whether or not a legend is required.\n\n   */,8,"  public static JFreeChart createPieChart(String title, PieDataset data, boolean legend) {\n\n    Plot plot = new PiePlot();\n\n    JFreeChart chart = new JFreeChart(data, plot, title, JFreeChart.DEFAULT_TITLE_FONT, legend);\n\n    return chart;\n\n"
3315,setMaximumDate,DateAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/DateAxis.java,193,197,7,/**\n\n   * Sets the maximum date visible on the axis.\n\n   * @param maximumDate The new maximum date.\n\n   */,8,  public void setMaximumDate(Date maximumDate) {\n\n  this.maximumDate = maximumDate;\n\n    double millis = (double)maximumDate.getTime();\n\n    this.setMaximumAxisValue(millis);\n\n
3316,getMinimumDate,DateAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/DateAxis.java,165,166,7,/**\n\n   * Returns the earliest date visible on the axis.\n\n   * @return The earliest date visible on the axis.\n\n   */,4,  public Date getMinimumDate() {\n\n  return this.minimumDate;\n\n
3317,setCrosshairDate,DateAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/DateAxis.java,240,244,7,/**\n\n   * Sets the crosshair date for the axis.\n\n   * @param maximumDate The new crosshair date (null permitted).\n\n   */,8,  public void setCrosshairDate(Date crosshairDate) {\n\n  this.crosshairDate = crosshairDate;\n\n    double millis = (double)crosshairDate.getTime();\n\n    this.setCrosshairValue(millis);\n\n
3318,calculateLowestVisibleTickValue,DateAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/DateAxis.java,299,300,7,/**\n\n   * Calculates the value of the lowest visible tick on the axis.\n\n   * @return The value of the lowest visible tick on the axis.\n\n   */,4,"  public Date calculateLowestVisibleTickValue(DateUnit unit) {\n\n  return this.nextStandardDate(minimumDate, unit.getField(), unit.getCount());\n\n"
3319,DateAxis,DateAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/DateAxis.java,77,100,7,"/**\n\n   * Constructs a date axis, using default values where necessary.\n\n   * @param label The axis label.\n\n   */",46,"  public DateAxis(String label) {\n\n  this(label,\n\n       Axis.DEFAULT_AXIS_LABEL_FONT,\n\n       Axis.DEFAULT_AXIS_LABEL_PAINT,\n\n       Axis.DEFAULT_AXIS_LABEL_INSETS,\n\n       true, // tick labels visible\n\n       Axis.DEFAULT_TICK_LABEL_FONT,\n\n       Axis.DEFAULT_TICK_LABEL_PAINT,\n\n       Axis.DEFAULT_TICK_LABEL_INSETS,\n\n       true, // tick marks visible\n\n       Axis.DEFAULT_TICK_STROKE,\n\n       true, // auto range\n\n       null, // minimum date\n\n       null, // maximum date\n\n       true, // auto tick unit selection\n\n       new DateUnit(Calendar.DATE, 1),\n\n       new SimpleDateFormat(),\n\n       true, // grid lines visible\n\n       ValueAxis.DEFAULT_GRID_LINE_STROKE,\n\n       ValueAxis.DEFAULT_GRID_LINE_PAINT,\n\n       DEFAULT_CROSSHAIR_DATE,\n\n       ValueAxis.DEFAULT_CROSSHAIR_STROKE,\n\n       ValueAxis.DEFAULT_CROSSHAIR_PAINT);\n\n"
3320,getFillPaint,Bar,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Bar.java,120,121,7,/**\n\n   * Returns the Paint object used to fill the bar.\n\n   * @return The Paint used to fill the bar.\n\n   */,4,  public Paint getFillPaint() {\n\n  return fillPaint;\n\n
3321,setTickUnit,DateAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/DateAxis.java,280,283,7,/**\n\n   * Sets the tick unit for the axis.\n\n   * @param unit The new date unit.\n\n   */,6,  public void setTickUnit(DateUnit unit) {\n\n  this.tickUnit = unit;\n\n  this.notifyListeners(new AxisChangeEvent(this));\n\n
3322,Bar,Bar,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Bar.java,72,78,19,/**\n\n   * Full constructor: returns a new Bar object with attributes as defined by the caller.\n\n   * @param x The x-coordinate of the bar;\n\n   * @param y The y-coordinate of the bar;\n\n   * @param width The width of the bar;\n\n   * @param height The height of the bar;\n\n   * @param outlineStroke The Stroke used to draw the outline of the bar;\n\n   * @param outlinePaint The Paint used to draw the outline of the bar;\n\n   * @param fillPaint The Paint used to draw the interior of the bar.\n\n   */,14,"  public Bar(double x, double y, double width, double height,\n\n       Stroke outlineStroke, Paint outlinePaint, Paint fillPaint)\n\n  {\n\n  this.area = new Rectangle2D.Double(x, y, width, height);\n\n  this.outlineStroke = outlineStroke;\n\n  this.outlinePaint = outlinePaint;\n\n  this.fillPaint = fillPaint;\n\n"
3323,getAnchorDate,DateAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/DateAxis.java,252,253,7,/**\n\n   * Returns the anchor date for the axis.\n\n   * @return The anchor date for the axis (possibly null).\n\n   */,4,  public Date getAnchorDate() {\n\n  return this.anchorDate;\n\n
3324,Bar,Bar,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Bar.java,88,89,13,"/**\n\n   * Standard constructor: returns a new Bar object, with some default attributes.\n\n   * @param x The x-coordinate of the bar;\n\n   * @param y The y-coordinate of the bar;\n\n   * @param width The width of the bar;\n\n   * @param height The height of the bar;\n\n   */",4,"  public Bar(double x, double y, double width, double height) {\n\n  this(x, y, width, height, new BasicStroke(), Color.gray, Color.green);\n\n"
3325,nextStandardDate,DateAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/DateAxis.java,398,403,5,"/**\n\n   * Returns the first ""standard"" date (based on the specified field and units).\n\n   */",12,"  protected Date nextStandardDate(Date date, int field, int units) {\n\n  Date previous = previousStandardDate(date, field, units);\n\n  Calendar calendar = Calendar.getInstance();\n\n  calendar.setTime(previous);\n\n  calendar.add(field, units);\n\n  return calendar.getTime();\n\n"
3326,getOutlinePaint,Bar,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Bar.java,112,113,7,/**\n\n   * Returns the Paint object used to draw the outline of the bar.\n\n   * @return The Paint used to draw the outline of the bar.\n\n   */,4,  public Paint getOutlinePaint() {\n\n  return outlinePaint;\n\n
3327,getOutlineStroke,Bar,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Bar.java,104,105,7,/**\n\n   * Returns the Stroke object used to draw the outline of the bar.\n\n   * @return The Stroke used to draw the outline of the bar.\n\n   */,4,  public Stroke getOutlineStroke() {\n\n  return outlineStroke;\n\n
3328,findAxisMagnitudeIndex,DateAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/DateAxis.java,409,417,5,/**\n\n   * Returns the index of the largest tick unit that will fit within the axis range.\n\n   */,16,"  protected int findAxisMagnitudeIndex() {\n\n  long axisMagnitude = this.maximumDate.getTime()-this.minimumDate.getTime();\n\n  int index = 0;\n\n  while(index<standardTickUnitMagnitudes.length-1) {\n\n    if (axisMagnitude<standardTickUnitMagnitudes[index]) break;\n\n    index++;\n\n  }\n\n  return Math.max(0, index-1);\n\n"
3329,getArea,Bar,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Bar.java,96,97,7,/**\n\n   * Returns the rectangle that is the outline of the bar.\n\n   * @return The outline of the bar;\n\n   */,4,  public Rectangle2D getArea() {\n\n  return area;\n\n
3330,getTickLabelFormatter,DateAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/DateAxis.java,291,292,7,/**\n\n   * Returns the formatter for the tick labels.\n\n   * @return The formatter for the tick labels.\n\n   */,4,  public SimpleDateFormat getTickLabelFormatter() {\n\n  return tickLabelFormatter;\n\n
3331,getCrosshairDate,DateAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/DateAxis.java,232,233,7,/**\n\n   * Returns the crosshair date for the axis.\n\n   * @return The crosshair date for the axis (possibly null).\n\n   */,4,  public Date getCrosshairDate() {\n\n  return this.crosshairDate;\n\n
3332,getTickUnit,DateAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/DateAxis.java,272,273,7,/**\n\n   * Returns the tick unit for the axis.\n\n   * @return The tick unit for the axis.\n\n   */,4,  public DateUnit getTickUnit() {\n\n  return tickUnit;\n\n
3333,getMaximumDate,DateAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/DateAxis.java,185,186,7,/**\n\n   * Returns the latest date visible on the axis.\n\n   * @return The latest date visible on the axis.\n\n   */,4,  public Date getMaximumDate() {\n\n  return this.maximumDate;\n\n
3334,CategoryAxis,CategoryAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/CategoryAxis.java,91,102,7,"/**\n\n   * Constructs a category axis, using default values where necessary.\n\n   * @param label The axis label.\n\n   */",22,"  protected CategoryAxis(String label) {\n\n  this(label,\n\n       Axis.DEFAULT_AXIS_LABEL_FONT,\n\n       Axis.DEFAULT_AXIS_LABEL_PAINT,\n\n       Axis.DEFAULT_AXIS_LABEL_INSETS,\n\n       true, // category labels visible\n\n       Axis.DEFAULT_TICK_LABEL_FONT,\n\n       Axis.DEFAULT_TICK_LABEL_PAINT,\n\n       Axis.DEFAULT_TICK_LABEL_INSETS,\n\n       false, // tick marks visible (not supported anyway)\n\n       Axis.DEFAULT_TICK_STROKE);\n\n"
3335,setAnchorDate,DateAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/DateAxis.java,260,264,7,/**\n\n   * Sets the anchor date for the axis.\n\n   * @param anchorDate The new anchor date (null permitted).\n\n   */,8,  public void setAnchorDate(Date anchorDate) {\n\n  this.anchorDate = anchorDate;\n\n    double millis = (double)anchorDate.getTime();\n\n    super.setAnchorValue(millis);\n\n
3336,CategoryAxis,CategoryAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/CategoryAxis.java,70,83,25,/**\n\n   * Constructs a category axis.\n\n   * @param label The axis label.\n\n   * @param labelFont The font for displaying the axis label.\n\n   * @param labelPaint The paint used to draw the axis label.\n\n   * @param labelInsets Determines the amount of blank space around the label.\n\n   * @param categoryLabelsVisible Flag indicating whether or not category labels are visible.\n\n   * @param categoryLabelFont The font used to display category (tick) labels.\n\n   * @param categoryLabelPaint The paint used to draw category (tick) labels.\n\n   * @param categoryLabelInsets The insets for the category labels.\n\n   * @param tickMarksVisible Flag indicating whether or not tick marks are visible.\n\n   * @param tickMarkStroke The stroke used to draw tick marks (if visible).\n\n   */,26,"  protected CategoryAxis(String label,\n\n               Font labelFont, Paint labelPaint, Insets labelInsets,\n\n         boolean categoryLabelsVisible,\n\n               Font categoryLabelFont, Paint categoryLabelPaint,\n\n               Insets categoryLabelInsets,\n\n               boolean tickMarksVisible,\n\n               Stroke tickMarkStroke) {\n\n  super(label,\n\n        labelFont, labelPaint, labelInsets,\n\n      categoryLabelsVisible,\n\n        categoryLabelFont, categoryLabelPaint, categoryLabelInsets,\n\n      tickMarksVisible,\n\n        tickMarkStroke);\n\n"
3338,DateTitle,DateTitle,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/DateTitle.java,98,99,5,/**\n\n   * Constructs a new DateTitle with the specified style.\n\n   */,4,"  public DateTitle(int dateStyle) {\n\n    this(dateStyle, Locale.getDefault(), new Font(""Dialog"", Font.PLAIN, 12), Color.black);\n\n"
3339,DateTitle,DateTitle,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/DateTitle.java,109,111,13,"/**\n\n   * Constructs a new DateTitle that displays the current date in the default\n\n   * (LONG) format for the locale, positioned to the bottom right of the chart.\n\n   * <P>\n\n   * The color will be black in 12 point, plain Helvetica font (maps to Arial on Win32 systems\n\n   * without Helvetica).\n\n   */",4,  public DateTitle() {\n\n    this(DateFormat.LONG);\n\n
3340,DateTitle,DateTitle,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/DateTitle.java,70,74,23,"/**\n\n   * Constructs a new DateTitle with the specified attributes.\n\n   * @param location the relative location of this title (use constants in AbstractTitle).\n\n   * @param alignment the text alignment of this title (use constants in AbstractTitle).\n\n   * @param dateStyle the Date style to use (SHORT, MEDIUM, LONG, or FULL constants from\n\n   *          java.text.DateFormat).\n\n   * @param locale the locale to use to format this date (if you are unsure what to use here, use\n\n   *         Locale.getDefault() for your default locale).\n\n   * @param font the font used to display the date.\n\n   * @param paint the paint used to display the date.\n\n   * @param insets the blank space around the outside of the title.\n\n   */",8,"  public DateTitle(int dateStyle, Locale locale, Font font, Paint paint, int position,\n\n           int horizontalAlignment, int verticalAlignment, Insets insets) {\n\n    super(DateFormat.getDateInstance(dateStyle, locale).format(new Date()),\n\n        font, paint, position, horizontalAlignment, verticalAlignment, insets);\n\n"
3341,DateTitle,DateTitle,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/DateTitle.java,88,92,19,"/**\n\n   * Constructs a new DateTitle object with the specified attributes and the following defaults:\n\n   * location = BOTTOM, alignment = RIGHT, insets = new Insets(2, 2, 2, 2).\n\n   * @param dateStyle the Date style to use (SHORT, MEDIUM, LONG, or FULL constants from\n\n   *          java.util.DateFormat);\n\n   * @param locale the locale to use to format this date (if you are unsure what to use here, use\n\n   *         Locale.getDefault() for your default locale);\n\n   * @param font the font used to display the date;\n\n   * @param paint the paint used to display the date;\n\n   */",8,"  public DateTitle(int dateStyle, Locale locale, Font font, Paint paint) {\n\n    this(dateStyle, locale, font, paint,\n\n       AbstractTitle.BOTTOM, AbstractTitle.RIGHT, AbstractTitle.MIDDLE,\n\n       new Insets(2, 2, 2, 2));\n\n"
3342,setTickLabelFont,Axis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Axis.java,352,362,11,/**\n\n   * Sets the font for the tick labels.\n\n   * <P>\n\n   * Registered listeners are notified of a general change to the axis.\n\n   * @param font The new tick label font.\n\n   */,18,"  public void setTickLabelFont(Font font) {\n\n    // check arguments...\n\n    if (font==null) {\n\n      throw new IllegalArgumentException(""Axis.setTickLabelFont(...): null not permitted."");\n\n    }\n\n    // apply change if necessary...\n\n  if (!this.tickLabelFont.equals(font)) {\n\n    this.tickLabelFont = font;\n\n    notifyListeners(new AxisChangeEvent(this));\n\n"
3343,Axis,Axis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Axis.java,128,139,7,"/**\n\n   * Constructs an axis, using default values where necessary.\n\n   * @param label The axis label (null permitted).\n\n   */",22,"  protected Axis(String label) {\n\n  this(label,\n\n       DEFAULT_AXIS_LABEL_FONT,\n\n       DEFAULT_AXIS_LABEL_PAINT,\n\n       DEFAULT_AXIS_LABEL_INSETS,\n\n       true,  // tick labels visible\n\n       DEFAULT_TICK_LABEL_FONT,\n\n       DEFAULT_TICK_LABEL_PAINT,\n\n       DEFAULT_TICK_LABEL_INSETS,\n\n       true,  // tick marks visible\n\n       DEFAULT_TICK_STROKE);\n\n"
3344,getLabelInsets,Axis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Axis.java,299,300,7,"/**\n\n   * Returns the insets for the label (that is, the amount of blank space that should be left\n\n   * around the label).\n\n   */",4,  public Insets getLabelInsets() {\n\n  return this.labelInsets;\n\n
3345,notifyListeners,Axis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Axis.java,533,537,9,/**\n\n   * Notifies all registered listeners that the axis has changed.  The AxisChangeEvent provides\n\n   * information about the change.\n\n   * @param event Information about the change to the axis.\n\n   */,10,  protected void notifyListeners(AxisChangeEvent event) {\n\n  java.util.Iterator iterator = listeners.iterator();\n\n  while (iterator.hasNext()) {\n\n    AxisChangeListener listener = (AxisChangeListener)iterator.next();\n\n    listener.axisChanged(event);\n\n
3346,getLabelPaint,Axis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Axis.java,270,271,7,/**\n\n   * Returns the color/shade used to draw the axis label.\n\n   * @return The color/shade used to draw the axis label.\n\n   */,4,  public Paint getLabelPaint() {\n\n  return this.labelPaint;\n\n
3347,setLabel,Axis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Axis.java,219,231,11,/**\n\n   * Sets the label for the axis.\n\n   * <P>\n\n   * Registered listeners are notified of a general change to the axis.\n\n   * @param label The new label for the axis (null permitted).\n\n   */,24,  public void setLabel(String label) {\n\n    String existing = this.label;\n\n    if (existing!=null) {\n\n    if (!existing.equals(label)) {\n\n      this.label = label;\n\n      notifyListeners(new AxisChangeEvent(this));\n\n    }\n\n    }\n\n    else {\n\n      if (label!=null) {\n\n      this.label = label;\n\n      notifyListeners(new AxisChangeEvent(this));\n\n
3348,getTickLabelFont,Axis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Axis.java,342,343,7,/**\n\n   * Returns the font used for the tick labels (if showing).\n\n   * @return The font used for the tick labels.\n\n   */,4,  public Font getTickLabelFont() {\n\n  return tickLabelFont;\n\n
3349,setTickMarksVisible,Axis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Axis.java,437,441,11,/**\n\n   * Sets the flag that indicates whether or not the tick marks are showing.\n\n   * <P>\n\n   * Registered listeners are notified of a general change to the axis.\n\n   * @param flag The flag.\n\n   */,8,  public void setTickMarksVisible(boolean flag) {\n\n  if (flag!=tickMarksVisible) {\n\n    tickMarksVisible = flag;\n\n    notifyListeners(new AxisChangeEvent(this));\n\n
3350,setTickLabelPaint,Axis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Axis.java,381,391,11,/**\n\n   * Sets the color/shade used to draw tick labels (if they are showing).\n\n   * <P>\n\n   * Registered listeners are notified of a general change to the axis.\n\n   * @param paint The new color/shade.\n\n   */,18,"  public void setTickLabelPaint(Paint paint) {\n\n    // check arguments...\n\n    if (paint==null) {\n\n      throw new IllegalArgumentException(""Axis.setTickLabelPaint(...): null not permitted."");\n\n    }\n\n    // make the change (if necessary)...\n\n  if (!this.tickLabelPaint.equals(paint)) {\n\n    this.tickLabelPaint = paint;\n\n    notifyListeners(new AxisChangeEvent(this));\n\n"
3351,setLabelFont,Axis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Axis.java,251,261,11,/**\n\n   * Sets the font for the axis label.\n\n   * <P>\n\n   * Registered listeners are notified of a general change to the axis.\n\n   * @param font The new label font.\n\n   */,18,"  public void setLabelFont(Font font) {\n\n    // check arguments...\n\n    if (font==null) {\n\n      throw new IllegalArgumentException(""Axis.setLabelFont(...): null not permitted."");\n\n    }\n\n    // make the change (if necessary)...\n\n  if (!this.labelFont.equals(font)) {\n\n    this.labelFont = font;\n\n    notifyListeners(new AxisChangeEvent(this));\n\n"
3352,isTickLabelsVisible,Axis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Axis.java,319,320,7,/**\n\n   * Returns a flag indicating whether or not the tick labels are visible.\n\n   * @return A flag indicating whether or not the tick labels are visible.\n\n   */,4,  public boolean isTickLabelsVisible() {\n\n  return tickLabelsVisible;\n\n
3353,isTickMarksVisible,Axis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Axis.java,427,428,7,/**\n\n   * Returns the flag that indicates whether or not the tick marks are showing.\n\n   * @return The flag that indicates whether or not the tick marks are showing.\n\n   */,4,  public boolean isTickMarksVisible() {\n\n  return tickMarksVisible;\n\n
3354,getTickLabelInsets,Axis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Axis.java,400,401,7,/**\n\n   * Returns the insets for the tick labels.\n\n   * @return The insets for the tick labels.\n\n   */,4,  public Insets getTickLabelInsets() {\n\n  return this.tickLabelInsets;\n\n
3355,Axis,Axis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Axis.java,156,174,25,/**\n\n   * Constructs an axis.\n\n   * @param label The axis label.\n\n   * @param labelFont The font for displaying the axis label.\n\n   * @param labelPaint The paint used to draw the axis label.\n\n   * @param labelInsets Determines the amount of blank space around the label.\n\n   * @param tickLabelsVisible Flag indicating whether or not the tick labels are visible.\n\n   * @param tickLabelFont The font used to display tick labels.\n\n   * @param tickLabelPaint The paint used to draw tick labels.\n\n   * @param tickLabelInsets Determines the amount of blank space around tick labels.\n\n   * @param tickMarksVisible Flag indicating whether or not tick marks are visible.\n\n   * @param tickMarkStroke The stroke used to draw tick marks (if visible).\n\n   */,34,"  protected Axis(String label,\n\n           Font labelFont, Paint labelPaint, Insets labelInsets,\n\n       boolean tickLabelsVisible,\n\n           Font tickLabelFont, Paint tickLabelPaint, Insets tickLabelInsets,\n\n       boolean tickMarkVisible, Stroke tickMarkStroke) {\n\n  this.label = label;\n\n  this.labelFont = labelFont;\n\n  this.labelPaint = labelPaint;\n\n  this.labelInsets = labelInsets;\n\n  this.tickLabelsVisible = tickLabelsVisible;\n\n  this.tickLabelFont = tickLabelFont;\n\n  this.tickLabelPaint = tickLabelPaint;\n\n  this.tickLabelInsets = tickLabelInsets;\n\n  this.tickMarksVisible = tickMarksVisible;\n\n  this.tickMarkStroke = tickMarkStroke;\n\n  this.ticks = new java.util.ArrayList();\n\n  this.listeners = new java.util.ArrayList();\n\n"
3356,addChangeListener,Axis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Axis.java,545,546,7,/**\n\n   * Registers an object for notification of changes to the axis.\n\n   * @param listener The object that is being registered.\n\n   */,4,  public void addChangeListener(AxisChangeListener listener) {\n\n  listeners.add(listener);\n\n
3357,drawVerticalString,Axis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Axis.java,564,573,13,/**\n\n   * A utility method for drawing text vertically.\n\n   * @param text The text.\n\n   * @param g2 The graphics device.\n\n   * @param x The x-coordinate.\n\n   * @param y The y-coordinate.\n\n   */,14,"  protected void drawVerticalString(String text, Graphics2D g2, float x, float y) {\n\n  AffineTransform saved = g2.getTransform();\n\n  // apply a 90 degree rotation\n\n  AffineTransform rotate = AffineTransform.getRotateInstance(-Math.PI/2, x, y);\n\n  g2.transform(rotate);\n\n  g2.drawString(text, x, y);\n\n  g2.setTransform(saved);\n\n"
3359,setTickMarkStroke,Axis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Axis.java,460,470,11,/**\n\n   * Sets the pen/brush used to draw tick marks (if they are showing).\n\n   * <P>\n\n   * Registered listeners are notified of a general change to the axis.\n\n   * @param stroke The new pen/brush (null not permitted).\n\n   */,18,"  public void setTickMarkStroke(Stroke stroke) {\n\n    // check arguments...\n\n    if (stroke==null) {\n\n      throw new IllegalArgumentException(""Axis.setTickMarkStroke(...): null not permitted."");\n\n    }\n\n    // make the change (if necessary)...\n\n  if (!this.tickMarkStroke.equals(stroke)) {\n\n    this.tickMarkStroke = stroke;\n\n    notifyListeners(new AxisChangeEvent(this));\n\n"
3360,setLabelInsets,Axis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Axis.java,308,311,9,"/**\n\n   * Sets the insets for the axis label, and notifies registered listeners that the axis has been\n\n   * modified.\n\n   * @param insets The new label insets;\n\n   */",8,  public void setLabelInsets(Insets insets) {\n\n  if (!insets.equals(this.labelInsets)) {\n\n    this.labelInsets = insets;\n\n    notifyListeners(new AxisChangeEvent(this));\n\n
3361,setLabelPaint,Axis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Axis.java,280,290,11,/**\n\n   * Sets the color/shade used to draw the axis label.\n\n   * <P>\n\n   * Registered listeners are notified of a general change to the axis.\n\n   * @param paint The new color/shade for the axis label.\n\n   */,18,"  public void setLabelPaint(Paint paint) {\n\n    // check arguments...\n\n    if (paint==null) {\n\n      throw new IllegalArgumentException(""Axis.setLabelPaint(...): null not permitted."");\n\n    }\n\n    // make the change (if necessary)...\n\n  if (!this.labelPaint.equals(paint)) {\n\n    this.labelPaint = paint;\n\n    notifyListeners(new AxisChangeEvent(this));\n\n"
3362,setTickLabelsVisible,Axis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Axis.java,329,333,11,/**\n\n   * Sets the flag that determines whether or not the tick labels are visible.\n\n   * <P>\n\n   * Registered listeners are notified of a general change to the axis.\n\n   * @param flag The flag.\n\n   */,8,  public void setTickLabelsVisible(boolean flag) {\n\n  if (flag!=tickLabelsVisible) {\n\n    tickLabelsVisible = flag;\n\n    notifyListeners(new AxisChangeEvent(this));\n\n
3364,setPlot,Axis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Axis.java,195,201,13,/**\n\n   * Sets a reference to the plot that the axis is assigned to.\n\n   * <P>\n\n   * This method is called by Plot in the setHorizontalAxis() and setVerticalAxis() methods.\n\n   * You shouldn\'t need to call the method yourself.\n\n   * @param plot The plot that the axis belongs to.\n\n   */,12,"  public void setPlot(Plot plot) throws PlotNotCompatibleException {\n\n    if (this.isCompatiblePlot(plot) || plot == null) {\n\n    this.plot = plot;\n\n    }\n\n    else throw new PlotNotCompatibleException(""Axis.setPlot(...): ""\n\n                         +""plot not compatible with axis."");\n\n"
3365,getLabel,Axis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Axis.java,209,210,7,/**\n\n   * Returns the label for the axis.\n\n   * @return The label for the axis (null possible).\n\n   */,4,  public String getLabel() {\n\n  return label;\n\n
3366,getMaxTickLabelWidth,Axis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Axis.java,503,517,11,/**\n\n   * Returns the maximum width of the ticks in the working list (that is set up by\n\n   * refreshTicks()).\n\n   * @param g2 The graphics device.\n\n   * @param plotArea The area within which the plot is to be drawn.\n\n   */,26,"  protected double getMaxTickLabelWidth(Graphics2D g2, Rectangle2D plotArea) {\n\n  double maxWidth = 0.0;\n\n  Font font = getTickLabelFont();\n\n  FontRenderContext frc = g2.getFontRenderContext();\n\n  Iterator iterator = this.ticks.iterator();\n\n  while (iterator.hasNext()) {\n\n    Tick tick = (Tick)iterator.next();\n\n    Rectangle2D labelBounds = font.getStringBounds(tick.getText(), frc);\n\n    if (labelBounds.getWidth()>maxWidth) {\n\n    maxWidth = labelBounds.getWidth();\n\n    }\n\n  }\n\n  return maxWidth;\n\n"
3367,removeChangeListener,Axis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Axis.java,553,554,7,/**\n\n   * Deregisters an object for notification of changes to the axis.\n\n   * @param listener The object to deregister.\n\n   */,4,  public void removeChangeListener(AxisChangeListener listener) {\n\n  listeners.remove(listener);\n\n
3369,getPlot,Axis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Axis.java,184,185,11,/**\n\n   * Returns the plot that the axis is assigned to.\n\n   * <P>\n\n   * This method will return null if the axis is not currently assigned to a plot.\n\n   * @return The plot that the axis is assigned to.\n\n   */,4,  public Plot getPlot() {\n\n  return plot;\n\n
3370,getTickMarkStroke,Axis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Axis.java,450,451,7,/**\n\n   * Returns the pen/brush used to draw tick marks (if they are showing).\n\n   * @return The pen/brush used to draw tick marks.\n\n   */,4,  public Stroke getTickMarkStroke() {\n\n  return tickMarkStroke;\n\n
3372,setTickLabelInsets,Axis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Axis.java,409,419,9,"/**\n\n   * Sets the insets for the tick labels, and notifies registered listeners that the axis has\n\n   * been modified.\n\n   * @param insets The new tick label insets.\n\n   */",18,"  public void setTickLabelInsets(Insets insets) {\n\n    // check arguments...\n\n    if (insets==null) {\n\n      throw new IllegalArgumentException(""Axis.setTickLabelInsets(...): null not permitted."");\n\n    }\n\n    // apply change if necessary...\n\n  if (!this.tickLabelInsets.equals(insets)) {\n\n    this.tickLabelInsets = insets;\n\n    notifyListeners(new AxisChangeEvent(this));\n\n"
3373,getLabelFont,Axis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Axis.java,241,242,7,/**\n\n   * Returns the font for the axis label.\n\n   * @return The font for the axis label.\n\n   */,4,  public Font getLabelFont() {\n\n  return labelFont;\n\n
3374,getTickLabelPaint,Axis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Axis.java,371,372,7,/**\n\n   * Returns the color/shade used for the tick labels.\n\n   * @return The color/shade used for the tick labels.\n\n   */,4,  public Paint getTickLabelPaint() {\n\n  return this.tickLabelPaint;\n\n
3375,getItemGapsPercent,BarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/BarPlot.java,270,271,7,/**\n\n   * Returns the percentage of the drawing space that is allocated to providing gaps between the\n\n   * items in a category.\n\n   */,4,  public double getItemGapsPercent() {\n\n  return itemGapsPercent;\n\n
3376,setHorizontalAxis,BarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/BarPlot.java,173,174,7,/**\n\n   * Sets the horizontal axis for the plot.\n\n   * @param axis The new axis.\n\n   */,4,  public void setHorizontalAxis(Axis axis) {\n\n  super.setHorizontalAxis(axis);\n\n
3377,BarPlot,BarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/BarPlot.java,136,149,25,"/**\n\n   * Constructs a bar plot.\n\n   * @param horizontalAxis The horizontal axis.\n\n   * @param verticalAxis The vertical axis.\n\n   * @param introGapPercent The gap before the first bar in the plot, as a percentage of the\n\n   *            available drawing space.\n\n   * @param trailGapPercent The gap after the last bar in the plot, as a percentage of the\n\n   *            available drawing space.\n\n   * @param categoryGapsPercent The percentage of drawing space allocated to the gap between the\n\n   *              last bar in one category and the first bar in the next category.\n\n   * @param itemGapsPercent The gap between bars within the same category.\n\n   * @param toolTipGenerator The tool tip generator.\n\n   */",24,"  protected BarPlot(Axis horizontalAxis, Axis verticalAxis,\n\n            Insets insets,\n\n        double introGapPercent, double trailGapPercent,\n\n            double categoryGapsPercent, double itemGapsPercent,\n\n            CategoryToolTipGenerator toolTipGenerator) {\n\n  super(horizontalAxis, verticalAxis);\n\n    this.insets = insets;\n\n  this.introGapPercent = introGapPercent;\n\n  this.trailGapPercent = trailGapPercent;\n\n  this.categoryGapsPercent = categoryGapsPercent;\n\n  this.itemGapsPercent = itemGapsPercent;\n\n    this.toolTipGenerator = toolTipGenerator;\n\n"
3378,setCategoryGapsPercent,BarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/BarPlot.java,250,261,11,"/**\n\n   * Sets the gap between the last bar in one category and the first bar in the\n\n   * next category, and notifies registered listeners that the plot has been modified.\n\n   * @param percent The new gap value, expressed as a percentage of the width of the plot area\n\n   *        (0.05 = 5 percent).\n\n   */",20,"  public void setCategoryGapsPercent(double percent) {\n\n    // check argument...\n\n    if ((percent<0.0) || (percent>MAX_CATEGORY_GAPS_PERCENT)) {\n\n      throw new IllegalArgumentException(""BarPlot.setCategoryGapsPercent(double): argument ""\n\n                        +""outside valid range."");\n\n    }\n\n    // make the change...\n\n  if (this.categoryGapsPercent!=percent) {\n\n      this.categoryGapsPercent=percent;\n\n    notifyListeners(new PlotChangeEvent(this));\n\n"
3379,setVerticalAxis,BarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/BarPlot.java,165,166,7,/**\n\n   * Sets the vertical axis for the plot.\n\n   * @param axis The new axis.\n\n   */,4,  public void setVerticalAxis(Axis axis) {\n\n  super.setVerticalAxis(axis);\n\n
3380,getDataset,BarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/BarPlot.java,157,158,7,"/**\n\n   * A convenience method that returns the dataset for the plot, cast as a\n\n   * CategoryDataset.\n\n   */",4,  public CategoryDataset getDataset() {\n\n  return (CategoryDataset)chart.getDataset();\n\n
3381,setTrailGapPercent,BarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/BarPlot.java,220,231,11,"/**\n\n   * Sets the gap after the last bar on the chart, and notifies registered listeners that the plot\n\n   * has been modified.\n\n   * @param percent The new gap value, expressed as a percentage of the width of the plot area\n\n   *        (0.05 = 5 percent).\n\n   */",20,"  public void setTrailGapPercent(double percent) {\n\n    // check argument...\n\n    if ((percent<0.0) || (percent>MAX_TRAIL_GAP_PERCENT)) {\n\n      throw new IllegalArgumentException(""BarPlot.setTrailGapPercent(double): argument ""\n\n                        +""outside valid range."");\n\n    }\n\n    // make the change...\n\n  if (this.trailGapPercent!=percent) {\n\n      trailGapPercent = percent;\n\n    notifyListeners(new PlotChangeEvent(this));\n\n"
3382,getTrailGapPercent,BarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/BarPlot.java,210,211,7,"/**\n\n   * Returns the gap following the last bar on the chart, as a percentage of the available\n\n   * drawing space.\n\n   */",4,  public double getTrailGapPercent() {\n\n  return trailGapPercent;\n\n
3383,getIntroGapPercent,BarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/BarPlot.java,181,182,7,"/**\n\n   * Returns the gap before the first bar on the chart, as a percentage of the available drawing\n\n   * space (0.05 = 5 percent).\n\n   */",4,  public double getIntroGapPercent() {\n\n  return introGapPercent;\n\n
3384,setIntroGapPercent,BarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/BarPlot.java,191,202,11,"/**\n\n   * Sets the gap before the first bar on the chart, and notifies registered listeners that the\n\n   * plot has been modified.\n\n   * @param percent The new gap value, expressed as a percentage of the width of the plot area\n\n   *        (0.05 = 5 percent).\n\n   */",20,"  public void setIntroGapPercent(double percent) {\n\n    // check argument...\n\n    if ((percent<0.0) || (percent>MAX_INTRO_GAP_PERCENT)) {\n\n      throw new IllegalArgumentException(""BarPlot.setIntroGapPercent(double): argument ""\n\n                        +""outside valid range."");\n\n    }\n\n    // make the change...\n\n  if (this.introGapPercent!=percent) {\n\n      this.introGapPercent = percent;\n\n    notifyListeners(new PlotChangeEvent(this));\n\n"
3385,setItemGapsPercent,BarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/BarPlot.java,280,291,11,"/**\n\n   * Sets the gap between one bar and the next within the same category, and notifies registered\n\n   * listeners that the plot has been modified.\n\n   * @param percent The new gap value, expressed as a percentage of the width of the plot area\n\n   *        (0.05 = 5 percent).\n\n   */",20,"  public void setItemGapsPercent(double percent) {\n\n    // check argument...\n\n    if ((percent<0.0) || (percent>MAX_ITEM_GAPS_PERCENT)) {\n\n      throw new IllegalArgumentException(""BarPlot.setItemGapsPercent(double): argument ""\n\n                        +""outside valid range."");\n\n    }\n\n    // make the change...\n\n  if (percent!=this.itemGapsPercent) {\n\n      this.itemGapsPercent = percent;\n\n    notifyListeners(new PlotChangeEvent(this));\n\n"
3386,BarPlot,BarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/BarPlot.java,111,119,9,"/**\n\n   * Constructs a bar plot, using default values where necessary.\n\n   * @param horizontalAxis The horizontal axis.\n\n   * @param verticalAxis The vertical axis.\n\n   */",16,"  protected BarPlot(Axis horizontalAxis, Axis verticalAxis) {\n\n  this(horizontalAxis, verticalAxis,\n\n       Plot.DEFAULT_INSETS,\n\n       DEFAULT_INTRO_GAP_PERCENT,\n\n       DEFAULT_TRAIL_GAP_PERCENT,\n\n       DEFAULT_CATEGORY_GAPS_PERCENT,\n\n       DEFAULT_ITEM_GAPS_PERCENT,\n\n       null);  // tool tip generator\n\n"
3387,getCategoryGapsPercent,BarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/BarPlot.java,240,241,7,/**\n\n   * Returns the percentage of the drawing space that is allocated to providing gaps between the\n\n   * categories.\n\n   */,4,  public double getCategoryGapsPercent() {\n\n  return categoryGapsPercent;\n\n
3390,PeriodMarkerPlot,PeriodMarkerPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PeriodMarkerPlot.java,55,58,1,/** Creates new SignalsPlot */,6,"  public PeriodMarkerPlot(Axis horizontal, Axis vertical) throws AxisNotCompatibleException,\n\n                                   PlotNotCompatibleException {\n\n      super(horizontal, vertical);\n\n"
3391,isCompatibleVerticalAxis,PeriodMarkerPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PeriodMarkerPlot.java,100,105,11,"/**\n\n   * Checks the compatibility of a vertical axis, returning true if the axis is compatible with\n\n   * the plot, and false otherwise.  The vertical axis for this plot must be an instance of\n\n   * VerticalNumberAxis.\n\n   * @param axis The vertical axis.\n\n   */",12,  public boolean isCompatibleVerticalAxis(Axis axis)\n\n  {\n\n  if (axis instanceof VerticalNumberAxis)\n\n    return true;\n\n  else\n\n    return false;\n\n
3392,draw,PeriodMarkerPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PeriodMarkerPlot.java,195,234,9,/**\n\n   * Draws the plot on a Java 2D graphics device (such as the screen or a printer).\n\n   * @param g2 The graphics device;\n\n   * @param drawArea The area within which the plot should be drawn;\n\n   */,62,"  public void draw(Graphics2D g2, Rectangle2D drawArea, DrawInfo info){\n\n    if (insets!=null) {\n\n      drawArea = new Rectangle2D.Double(drawArea.getX()+insets.left,\n\n                        drawArea.getY()+insets.top,\n\n                        drawArea.getWidth()-insets.left-insets.right,\n\n                        drawArea.getHeight()-insets.top-insets.bottom);\n\n    }\n\n    // we can cast the axes because HiLowPlot enforces support of these interfaces\n\n    HorizontalAxis ha = getHorizontalAxis();\n\n    VerticalAxis va = getVerticalAxis();\n\n    double h = ha.reserveHeight(g2, this, drawArea);\n\n    Rectangle2D vAxisArea = va.reserveAxisArea(g2, this, drawArea, h);\n\n    // compute the plot area\n\n    Rectangle2D plotArea = new Rectangle2D.Double(drawArea.getX()+vAxisArea.getWidth(),\n\n                            drawArea.getY(),\n\n                            drawArea.getWidth()-vAxisArea.getWidth(),\n\n                            drawArea.getHeight()-h);\n\n    drawOutlineAndBackground(g2, plotArea);\n\n    // draw the axes\n\n    this.horizontalAxis.draw(g2, drawArea, plotArea);\n\n    this.verticalAxis.draw(g2, drawArea, plotArea);\n\n    Shape originalClip = g2.getClip();\n\n    g2.clip(plotArea);\n\n    //SignalsDataset data = getDataset();\n\n    XYDataset data = getTempXYDataset();\n\n    if( data!= null ){\n\n      int seriesCount = data.getSeriesCount();\n\n      for(int serie=0; serie<seriesCount; serie++)\n\n        drawMarkedPeriods(data, serie, g2, plotArea);   // area should be remaining area only\n\n    }\n\n    g2.setClip(originalClip);\n\n"
3393,getMinimumHorizontalDataValue,PeriodMarkerPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PeriodMarkerPlot.java,130,147,7,"/**\n\n   * Returns the minimum value in the domain, since this is plotted against the horizontal axis\n\n   * for a HighLowPlot.\n\n   */",32,"  public Number getMinimumHorizontalDataValue() {\n\n  //SignalsDataset data = getDataset();\n\n    XYDataset data = getTempXYDataset();\n\n  if( data ==null )\n\n      return null;\n\n    long minimum = Long.MAX_VALUE;\n\n    int seriesCount = data.getSeriesCount();\n\n    for (int series=0; series<seriesCount; series++) {\n\n      int itemCount = data.getItemCount(series);\n\n      for(int itemIndex = 0; itemIndex < itemCount; itemIndex++){\n\n        Number value = data.getXValue(series, itemIndex); // Adjust with type to make room for the symbols\n\n        if (value!=null)\n\n          minimum = Math.min(minimum, value.longValue());\n\n      }\n\n    }\n\n    return new Long(minimum);\n\n"
3394,getTempXYDataset,PeriodMarkerPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PeriodMarkerPlot.java,75,76,5,"/**\n\n   * A convenience method that returns the dataset for the plot, cast as an HighLowDataset.\n\n   */",4,  public XYDataset getTempXYDataset() { // Usefull until SignalsDataset is included in jcommon.SubSeriesDataset\n\n  return (XYDataset)chart.getDataset();\n\n
3395,getHorizontalValueAxis,PeriodMarkerPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PeriodMarkerPlot.java,112,114,7,/**\n\n   * A convenience method that returns a reference to the horizontal axis cast as a\n\n   * HorizontalValueAxis.\n\n   */,6,  public ValueAxis getHorizontalValueAxis()\n\n  {\n\n    return (ValueAxis)horizontalAxis;\n\n
3396,getMaximumVerticalDataValue,PeriodMarkerPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PeriodMarkerPlot.java,186,187,7,"/**\n\n   * Returns the maximum value in the range, since this is plotted against the vertical axis for\n\n   * a HighLowPlot.\n\n   */",4,  public Number getMaximumVerticalDataValue() {\n\n    return null; //new Double(Double.NEGATIVE_INFINITY); doesn't work (??)\n\n
3397,getVerticalValueAxis,PeriodMarkerPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PeriodMarkerPlot.java,121,123,7,/**\n\n   * A convenience method that returns a reference to the vertical axis cast as a\n\n   * VerticalNumberAxis.\n\n   */,6,  public ValueAxis getVerticalValueAxis()\n\n  {\n\n    return (ValueAxis)verticalAxis;\n\n
3398,getPlotType,PeriodMarkerPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PeriodMarkerPlot.java,65,66,5,"/**\n\n   * Returns the plot type as a string. This implementation returns ""HiLow Plot"".\n\n   */",4,"  public String getPlotType() {\n\n      return ""Period Marker Plot"";\n\n"
3399,isCompatibleHorizontalAxis,PeriodMarkerPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PeriodMarkerPlot.java,84,91,10,"/**\n\n   * Checks the compatibility of a horizontal axis, returning true if the axis is compatible with\n\n   * the plot, and false otherwise.\n\n   * @param axis The horizontal axis.\n\n   */\n",16,  public boolean isCompatibleHorizontalAxis(Axis axis) {\n\n  if (axis instanceof HorizontalNumberAxis) {\n\n    return true;\n\n  }\n\n  else if (axis instanceof HorizontalDateAxis) {\n\n    return true;\n\n  }\n\n    else return false;\n\n
3400,getMaximumHorizontalDataValue,PeriodMarkerPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PeriodMarkerPlot.java,154,171,7,"/**\n\n   * Returns the maximum value in the domain, since this is plotted against the horizontal axis\n\n   * for a HighLowPlot.\n\n   */",32,"  public Number getMaximumHorizontalDataValue() {\n\n     //SignalsDataset data = getDataset();\n\n    XYDataset data = getTempXYDataset();\n\n  if( data ==null )\n\n      return null;\n\n    long maximum = Long.MIN_VALUE;\n\n    int seriesCount = data.getSeriesCount();\n\n    for (int series=0; series<seriesCount; series++) {\n\n      int itemCount = data.getItemCount(series);\n\n      for(int itemIndex = 0; itemIndex < itemCount; itemIndex++){\n\n        Number value = data.getXValue(series, itemIndex); // Adjust with type to make room for the symbols\n\n        if (value!=null)\n\n          maximum = Math.max(maximum, value.longValue());\n\n      }\n\n    }\n\n    return new Long(maximum);\n\n"
3401,getMinimumVerticalDataValue,PeriodMarkerPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PeriodMarkerPlot.java,178,179,7,"/**\n\n   * Returns the minimum value in the range, since this is plotted against the vertical axis for\n\n   * a HighLowPlot.\n\n   */",4,  public Number getMinimumVerticalDataValue() {\n\n    return new Double(Double.POSITIVE_INFINITY); // null doesn't work (??)\n\n
3402,LinePlot,LinePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/LinePlot.java,93,98,11,/**\n\n   * Constructs a line plot.\n\n   * @param chart The chart that the plot belongs to.\n\n   * @param horizontalAxis The horizontal axis.\n\n   * @param verticalAxis The vertical axis.\n\n   */,10,"  public LinePlot(Axis horizontalAxis, Axis verticalAxis) {\n\n  super(horizontalAxis, verticalAxis);\n\n    this.renderer = new LineAndShapeRenderer(LineAndShapeRenderer.SHAPES_AND_LINES);\n\n    this.introGapPercent = DEFAULT_INTRO_GAP;\n\n    this.trailGapPercent = DEFAULT_TRAIL_GAP;\n\n"
3403,getCategoryAxis,LinePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/LinePlot.java,169,170,7,/**\n\n   * A convenience method that returns a reference to the horizontal axis cast as a\n\n   * CategoryAxis.\n\n   */,4,  public CategoryAxis getCategoryAxis() {\n\n  return (CategoryAxis)horizontalAxis;\n\n
3404,getIntroGapPercent,LinePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/LinePlot.java,106,107,7,/**\n\n   * Returns the intro gap.\n\n   * @return The intro gap as a percentage of the available width.\n\n   */,4,  public double getIntroGapPercent() {\n\n    return this.introGapPercent;\n\n
3405,getCategoryCoordinate,LinePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/LinePlot.java,193,214,9,/**\n\n   * Returns the x-coordinate (in Java 2D User Space) of the center of the specified category.\n\n   * @param category The category (zero-based index).\n\n   * @param area The region within which the plot will be drawn.\n\n   */,38,"  public double getCategoryCoordinate(int category, Rectangle2D area) {\n\n    // check arguments...\n\n  int count = getDataset().getCategoryCount();\n\n    if ((category<0) || (category>=count)) {\n\n      throw new IllegalArgumentException(""LinePlot.getCategoryCoordinate(...): ""\n\n                         +""category outside valid range."");\n\n    }\n\n    if (area==null) {\n\n      throw new IllegalArgumentException(""LinePlot.getCategoryCoordinate(...): ""\n\n                         +""null area not permitted."");\n\n    }\n\n    // calculate result...\n\n    double result = area.getX() + area.getWidth()/2;\n\n    if (count>1) {\n\n      double available = area.getWidth() * (1-introGapPercent-trailGapPercent);\n\n    result = area.getX()+(introGapPercent*area.getWidth())\n\n                +(category*1.0/(count-1.0))*available;\n\n    }\n\n    return result;\n\n"
3406,getMinimumVerticalDataValue,LinePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/LinePlot.java,315,321,7,"/**\n\n   * Returns the minimum value in the range, since this is plotted against the vertical axis for\n\n   * LinePlot.\n\n   */",12,  public Number getMinimumVerticalDataValue() {\n\n  Dataset data = this.getChart().getDataset();\n\n  if (data!=null) {\n\n    return Datasets.getMinimumRangeValue(data);\n\n  }\n\n  else return null;\n\n
3407,setIntroGapPercent,LinePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/LinePlot.java,114,125,7,/**\n\n   * Sets the intro gap.\n\n   * @param The gap as a percentage of the total width.\n\n   */,20,"  public void setIntroGapPercent(double percent) {\n\n    // check arguments...\n\n    if ((percent<=0.0) || (percent>MAX_INTRO_GAP)) {\n\n      throw new IllegalArgumentException(""LinePlot.setIntroGapPercent(double): ""\n\n                         +""gap percent outside valid range."");\n\n    }\n\n    // make the change...\n\n    if (introGapPercent!=percent) {\n\n      introGapPercent = percent;\n\n      notifyListeners(new PlotChangeEvent(this));\n\n"
3408,getDataset,LinePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/LinePlot.java,161,162,5,"/**\n\n   * A convenience method that returns the dataset for the plot, cast as a CategoryDataset.\n\n   */",4,  public CategoryDataset getDataset() {\n\n  return (CategoryDataset)chart.getDataset();\n\n
3409,setTrailGapPercent,LinePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/LinePlot.java,142,153,7,/**\n\n   * Sets the trail gap.\n\n   * @param The gap as a percentage of the total width.\n\n   */,20,"  public void setTrailGapPercent(double percent) {\n\n    // check arguments...\n\n    if ((percent<=0.0) || (percent>MAX_TRAIL_GAP)) {\n\n      throw new IllegalArgumentException(""LinePlot.setTrailGapPercent(double): ""\n\n                         +""gap percent outside valid range."");\n\n    }\n\n    // make the change...\n\n    if (trailGapPercent!=percent) {\n\n      trailGapPercent = percent;\n\n      notifyListeners(new PlotChangeEvent(this));\n\n"
3410,getValueAxis,LinePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/LinePlot.java,177,178,7,/**\n\n   * A convenience method that returns a reference to the vertical axis cast as a\n\n   * VerticalNumberAxis.\n\n   */,4,  public VerticalNumberAxis getValueAxis() {\n\n  return (VerticalNumberAxis)verticalAxis;\n\n
3411,getTrailGapPercent,LinePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/LinePlot.java,134,135,7,/**\n\n   * Returns the trail gap.\n\n   * @return The trail gap as a percentage of the available width.\n\n   */,4,  public double getTrailGapPercent() {\n\n    return this.introGapPercent;\n\n
3412,isCompatibleHorizontalAxis,LinePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/LinePlot.java,223,227,9,"/**\n\n   * Checks the compatibility of a horizontal axis, returning true if the axis is compatible with\n\n   * the plot, and false otherwise.\n\n   * @param axis The horizontal axis.\n\n   */",10,  public boolean isCompatibleHorizontalAxis(Axis axis) {\n\n  if (axis instanceof CategoryAxis) {\n\n    return true;\n\n  }\n\n  else return false;\n\n
3413,isCompatibleVerticalAxis,LinePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/LinePlot.java,235,239,9,"/**\n\n   * Checks the compatibility of a vertical axis, returning true if the axis is compatible with\n\n   * the plot, and false otherwise.\n\n   * @param axis The vertical axis;\n\n   */",10,  public boolean isCompatibleVerticalAxis(Axis axis) {\n\n  if (axis instanceof VerticalNumberAxis) {\n\n    return true;\n\n  }\n\n  else return false;\n\n
3414,getCategories,LinePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/LinePlot.java,184,185,5,/**\n\n   * A convenience method that returns a list of the categories in the data source.\n\n   */,4,  public java.util.List getCategories() {\n\n  return getDataset().getCategories();\n\n
3415,getPlotType,LinePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/LinePlot.java,307,308,5,/**\n\n   * Returns a short string describing the plot type;\n\n   */,4,"  public String getPlotType() {\n\n  return ""Line Plot"";\n\n"
3416,draw,LinePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/LinePlot.java,248,299,11,/**\n\n   * Draws the plot on a Java 2D graphics device (such as the screen or a printer).\n\n   * @param g2 The graphics device.\n\n   * @param drawArea The area within which the plot should be drawn.\n\n   * @param info Collects info about the drawing.\n\n   */,84,"  public void draw(Graphics2D g2, Rectangle2D drawArea, DrawInfo info) {\n\n    // adjust the drawing area for the plot insets (if any)...\n\n  if (insets!=null) {\n\n    drawArea = new Rectangle2D.Double(drawArea.getX()+insets.left,\n\n              drawArea.getY()+insets.top,\n\n              drawArea.getWidth()-insets.left-insets.right,\n\n              drawArea.getHeight()-insets.top-insets.bottom);\n\n  }\n\n  // estimate the area required for drawing the axes...\n\n  HorizontalAxis hAxis = getHorizontalAxis();\n\n  VerticalAxis vAxis = getVerticalAxis();\n\n  double hAxisAreaHeight = hAxis.reserveHeight(g2, this, drawArea);\n\n  Rectangle2D vAxisArea = vAxis.reserveAxisArea(g2, this, drawArea, hAxisAreaHeight);\n\n  // and thus the area available for plotting...\n\n  Rectangle2D plotArea = new Rectangle2D.Double(drawArea.getX()+vAxisArea.getWidth(),\n\n                drawArea.getY(),\n\n                drawArea.getWidth()-vAxisArea.getWidth(),\n\n                drawArea.getHeight()-hAxisAreaHeight);\n\n    // draw the background and axes...\n\n  drawOutlineAndBackground(g2, plotArea);\n\n  getCategoryAxis().draw(g2, drawArea, plotArea);\n\n  getValueAxis().draw(g2, drawArea, plotArea);\n\n    // now get the data and plot the lines (or shapes, or lines and shapes)...\n\n    CategoryDataset data = this.getDataset();\n\n    if (data!=null) {\n\n      Shape originalClip=g2.getClip();\n\n    g2.clip(plotArea);\n\n    int seriesCount = data.getSeriesCount();\n\n      int categoryCount = data.getCategoryCount();\n\n      int categoryIndex = 0;\n\n      Object previousCategory = null;\n\n      Iterator iterator = data.getCategories().iterator();\n\n      while (iterator.hasNext()) {\n\n        Object category = iterator.next();\n\n        for (int series=0; series<seriesCount; series++) {\n\n          renderer.drawCategoryItem(g2, plotArea, this, getValueAxis(), data,\n\n                        series, category, categoryIndex, previousCategory);\n\n        }\n\n        previousCategory = category;\n\n        categoryIndex++;\n\n      }\n\n    g2.setClip(originalClip);\n\n"
3417,getTickUnit,NumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/NumberAxis.java,349,350,7,/**\n\n   * Returns the tick unit for the axis.\n\n   * @return The tick unit for the axis.\n\n   */,4,  public NumberTickUnit getTickUnit() {\n\n    return this.tickUnit;\n\n
3418,valueToString,NumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/NumberAxis.java,370,373,5,"/**\n\n   * Converts a value to a string, using the current format for the tick labels on the axis.\n\n   */",6,  public String valueToString(double value) {\n\n    // is there an override format?\n\n    return this.tickUnit.formatter.format(value);\n\n
3419,setAutoRangeIncludesZero,NumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/NumberAxis.java,257,260,9,/**\n\n   * Sets the flag that indicates whether or not the automatic axis range is forced to include\n\n   * zero.\n\n   * @param flag The new value of the flag;\n\n   */,8,  public void setAutoRangeIncludesZero(boolean flag) {\n\n  if (autoRangeIncludesZero!=flag) {\n\n    this.autoRangeIncludesZero = flag;\n\n    notifyListeners(new AxisChangeEvent(this));\n\n
3420,getStandardTickUnits,NumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/NumberAxis.java,332,333,11,"/**\n\n   * Returns the standard tick units for the axis.\n\n   * <P>\n\n   * If autoTickUnitSelection is on, the tick unit for the axis will be automatically selected\n\n   * from this collection.\n\n   */",4,  public TickUnits getStandardTickUnits() {\n\n    return this.standardTickUnits;\n\n
3421,setLowerMargin,NumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/NumberAxis.java,321,323,7,/**\n\n   * Sets the lower margin.\n\n   * @param margin The new margin;\n\n   */,6,  public void setLowerMargin(double margin) {\n\n    this.lowerMargin = margin;\n\n    notifyListeners(new AxisChangeEvent(this));\n\n
3422,calculateLowestVisibleTickValue,NumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/NumberAxis.java,381,386,7,/**\n\n   * Calculates the value of the lowest visible tick on the axis.\n\n   * @return The value of the lowest visible tick on the axis.\n\n   */,10,  public double calculateLowestVisibleTickValue() {\n\n  //double min = minimumAxisValue.doubleValue();\n\n  double unit = getTickUnit().getValue().doubleValue();\n\n  double index = Math.ceil(minimumAxisValue/unit);\n\n  return index*unit;\n\n
3423,getUpperMargin,NumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/NumberAxis.java,296,297,7,/**\n\n   * Returns the margin (as a percentage of the range) by which the maximum axis value exceeds\n\n   * the maximum data value.\n\n   */,4,  public double getUpperMargin() {\n\n    return this.upperMargin;\n\n
3424,setStandardTickUnits,NumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/NumberAxis.java,340,342,7,/**\n\n   * Sets the standard tick units for the axis.\n\n   * @param units The tick units.\n\n   */,6,  public void setStandardTickUnits(TickUnits units) {\n\n    this.standardTickUnits = units;\n\n    notifyListeners(new AxisChangeEvent(this));\n\n
3425,setUpperMargin,NumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/NumberAxis.java,304,306,7,/**\n\n   * Sets the upper margin.\n\n   * @param margin The new margin;\n\n   */,6,  public void setUpperMargin(double margin) {\n\n    this.upperMargin = margin;\n\n    notifyListeners(new AxisChangeEvent(this));\n\n
3426,autoRangeIncludesZero,NumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/NumberAxis.java,248,249,7,/**\n\n   * Returns the flag that indicates whether or not the automatic axis range (if indeed it is\n\n   * determined automatically) is forced to include zero.\n\n   */,4,  public boolean autoRangeIncludesZero() {\n\n  return this.autoRangeIncludesZero;\n\n
3427,setTickUnit,NumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/NumberAxis.java,360,363,13,/**\n\n   * Sets the tick unit for the axis.\n\n   * <P>\n\n   * Registered listeners are notified that the axis has been changed.  This method also sets the\n\n   * AutoTickUnit property to false.\n\n   * @param unit The new tick unit.\n\n   */,6,  public void setTickUnit(NumberTickUnit unit) {\n\n    this.autoTickUnitSelection = false;\n\n    this.tickUnit = unit;\n\n
3428,NumberAxis,NumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/NumberAxis.java,109,134,7,"/**\n\n   * Constructs a number axis, using default values where necessary.\n\n   * @param label The axis label.\n\n   */",50,"  protected NumberAxis(String label) {\n\n  this(label,\n\n       Axis.DEFAULT_AXIS_LABEL_FONT,\n\n       Axis.DEFAULT_AXIS_LABEL_PAINT,\n\n       Axis.DEFAULT_AXIS_LABEL_INSETS,\n\n       true, // tick labels visible\n\n       Axis.DEFAULT_TICK_LABEL_FONT,\n\n       Axis.DEFAULT_TICK_LABEL_PAINT,\n\n       Axis.DEFAULT_TICK_LABEL_INSETS,\n\n       true, // tick marks visible\n\n       Axis.DEFAULT_TICK_STROKE,\n\n       true, // auto range\n\n       true, // auto range includes zero\n\n       NumberAxis.DEFAULT_MINIMUM_AUTO_RANGE,\n\n       ValueAxis.DEFAULT_MINIMUM_AXIS_VALUE,\n\n       ValueAxis.DEFAULT_MAXIMUM_AXIS_VALUE,\n\n       false, // inverted\n\n       true, // auto tick unit\n\n       NumberAxis.DEFAULT_TICK_UNIT,\n\n       true, // grid lines visible\n\n       ValueAxis.DEFAULT_GRID_LINE_STROKE,\n\n       ValueAxis.DEFAULT_GRID_LINE_PAINT,\n\n       0.0,  // crosshair value\n\n       ValueAxis.DEFAULT_CROSSHAIR_STROKE,\n\n       ValueAxis.DEFAULT_CROSSHAIR_PAINT);\n\n"
3429,NumberAxis,NumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/NumberAxis.java,167,227,57,/**\n\n   * Constructs a number axis.\n\n   * @param label The axis label.\n\n   * @param labelFont The font for displaying the axis label.\n\n   * @param labelPaint The paint used to display the axis label.\n\n   * @param labelInsets The amount of blank space around the axis label.\n\n   * @param tickLabelsVisible Flag indicating whether or not the tick labels are visible.\n\n   * @param tickLabelFont The font used to display the tick labels.\n\n   * @param tickLabelPaint The paint used to draw the tick labels.\n\n   * @param tickLabelInsets The amount of blank space around the tick labels.\n\n   * @param tickMarksVisible Flag indicating whether or not tick marks are visible;\n\n   * @param tickMarkStroke The stroke used to draw the tick marks (if visible);\n\n   * @param autoRange Flag indicating whether or not the axis range is automatically determined.\n\n   * @param autoRangeIncludesZero A flag indicating whether the auto range must include zero.\n\n   * @param autoRangeMinimumSize The minimum size for the auto range.\n\n   * @param minimumAxisValue The lowest value shown on the axis.\n\n   * @param maximumAxisValue The highest value shown on the axis.\n\n   * @param inverted A flag indicating whether the axis is normal or inverted (inverted means\n\n   *         running from positive to negative).\n\n   * @param autoTickUnitSelection A flag indicating whether or not the tick value is automatically\n\n   *                selected.\n\n   * @param tickUnit The tick unit for the axis.\n\n   * @param gridLinesVisible Flag indicating whether or not grid lines are visible.\n\n   * @param gridStroke The pen/brush used to display grid lines (if visible).\n\n   * @param gridPaint The color used to display grid lines (if visible).\n\n   * @param crosshairValue The value at which to draw the crosshair line (null permitted).\n\n   * @param crosshairStroke The pen/brush used to draw the data line.\n\n   * @param crosshairPaint The color used to draw the data line.\n\n   */,100,"  protected NumberAxis(String label, Font labelFont, Paint labelPaint, Insets labelInsets,\n\n         boolean tickLabelsVisible, Font tickLabelFont, Paint tickLabelPaint,\n\n             Insets tickLabelInsets,\n\n         boolean tickMarksVisible, Stroke tickMarkStroke,\n\n         boolean autoRange, boolean autoRangeIncludesZero,\n\n             Number autoRangeMinimumSize,\n\n         double minimumAxisValue, double maximumAxisValue,\n\n             boolean inverted,\n\n         boolean autoTickUnitSelection, NumberTickUnit tickUnit,\n\n             boolean gridLinesVisible, Stroke gridStroke, Paint gridPaint,\n\n             double crosshairValue, Stroke crosshairStroke, Paint crosshairPaint) {\n\n  super(label,\n\n        labelFont, labelPaint, labelInsets,\n\n      tickLabelsVisible,\n\n        tickLabelFont, tickLabelPaint, tickLabelInsets,\n\n      tickMarksVisible, tickMarkStroke,\n\n        autoRange, autoTickUnitSelection,\n\n        gridLinesVisible, gridStroke, gridPaint,\n\n        crosshairValue,\n\n        crosshairStroke, crosshairPaint);\n\n    // check arguments...\n\n    if (minimumAxisValue>=maximumAxisValue) {\n\n      throw new IllegalArgumentException(""NumberAxis(...): minimum axis value must be less ""\n\n                         +""than maximum axis value."");\n\n    }\n\n    if (!autoRange) {\n\n    //  if (minimumAxisValue == null) {\n\n    //    throw new IllegalArgumentException(""NumberAxis(...): minimum axis value must be  ""\n\n    //                       +""specified if auto range calculation is off."");\n\n    //\n\n    //  }\n\n    //  if (maximumAxisValue == null) {\n\n    //    throw new IllegalArgumentException(""NumberAxis(...): maximum axis value must be  ""\n\n    //                       +""specified if auto range calculation is off."");\n\n//      }\n\n    }\n\n    if (autoRangeMinimumSize==null) {\n\n      throw new IllegalArgumentException(""NumberAxis(...): autoRangeMinimum cannot be null."");\n\n    }\n\n    // do the initialisation...\n\n  this.autoRangeIncludesZero = autoRangeIncludesZero;\n\n  this.autoRangeMinimumSize = autoRangeMinimumSize;\n\n  this.minimumAxisValue = minimumAxisValue;\n\n  this.maximumAxisValue = maximumAxisValue;\n\n    this.anchorValue = 0.0;\n\n    this.inverted = inverted;\n\n  this.tickUnit = tickUnit;\n\n    this.upperMargin = DEFAULT_UPPER_MARGIN;\n\n    this.lowerMargin = DEFAULT_LOWER_MARGIN;\n\n    this.standardTickUnits = createStandardTickUnits();\n\n"
3430,calculateVisibleTickCount,NumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/NumberAxis.java,407,412,7,/**\n\n   * Calculates the number of visible ticks.\n\n   * @return The number of visible ticks on the axis.\n\n   */,10,  public int calculateVisibleTickCount() {\n\n  //double low = minimumAxisValue.doubleValue();\n\n  //double high = maximumAxisValue.doubleValue();\n\n  double unit = getTickUnit().getValue().doubleValue();\n\n  return (int)(Math.floor(maximumAxisValue/unit)-Math.ceil(minimumAxisValue/unit)+1);\n\n
3431,getLowerMargin,NumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/NumberAxis.java,313,314,7,/**\n\n   * Returns the margin (as a percentage of the range) by which the minimum axis value is less\n\n   * than the minimum data value.\n\n   */,4,  public double getLowerMargin() {\n\n    return this.lowerMargin;\n\n
3432,setAutoRangeMinimumSize,NumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/NumberAxis.java,276,287,7,/**\n\n   * Sets the minimum size of the automatic axis range.\n\n   * @param minimum The new minimum.\n\n   */,20,"  public void setAutoRangeMinimumSize(Number size) {\n\n    // check argument...\n\n    if (size==null) {\n\n      throw new IllegalArgumentException(""NumberAxis.setAutoRangeMinimumSize(Number): ""\n\n                         +""null not permitted."");\n\n    }\n\n    // make the change...\n\n  if (autoRangeMinimumSize.doubleValue()!=size.doubleValue()) {\n\n    this.autoRangeMinimumSize = size;\n\n    notifyListeners(new AxisChangeEvent(this));\n\n"
3433,getAutoRangeMinimumSize,NumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/NumberAxis.java,268,269,7,/**\n\n   * Returns the minimum size of the automatic axis range (if indeed it is determined\n\n   * automatically).\n\n   */,4,  public Number getAutoRangeMinimumSize() {\n\n  return this.autoRangeMinimumSize;\n\n
3434,calculateHighestVisibleTickValue,NumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/NumberAxis.java,394,399,7,/**\n\n   * Calculates the value of the highest visible tick on the axis.\n\n   * @return The value of the highest visible tick on the axis.\n\n   */,10,  public double calculateHighestVisibleTickValue() {\n\n  //double max = maximumAxisValue.doubleValue();\n\n  double unit = getTickUnit().getValue().doubleValue();\n\n  double index = Math.floor(maximumAxisValue/unit);\n\n  return index*unit;\n\n
3435,NumberTickUnit,NumberTickUnit,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/NumberTickUnit.java,55,57,9,/**\n\n   * Creates a new number tick unit.\n\n   * @param value The size of the tick unit.\n\n   * @param formatter A number formatter for the tick unit.\n\n   */,6,"  public NumberTickUnit(Number value, NumberFormat formatter) {\n\n    super(value);\n\n    this.formatter = formatter;\n\n"
3436,Line,Line,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Line.java,55,56,5,"/**\n\n   * Standard constructor, with default values for the colors.\n\n   */",4,"  public Line(double x1, double y1, double x2, double y2) {\n\n  this(x1, y1, x2, y2, new BasicStroke(), Color.blue);\n\n"
3437,Line,Line,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Line.java,62,65,5,/**\n\n   * Standard constructor.\n\n   */,8,"  public Line(double x1, double y1, double x2, double y2, Stroke stroke, Paint paint) {\n\n  this.line = new Line2D.Double(x1, y1, x2, y2);\n\n  this.stroke = stroke;\n\n  this.paint = paint;\n\n"
3438,getStroke,Line,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Line.java,78,79,5,/**\n\n   * Returns the Stroke object used to draw the line.\n\n   */,4,  public Stroke getStroke() {\n\n  return stroke;\n\n
3439,getLine,Line,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Line.java,71,72,5,/**\n\n   * Returns the line.\n\n   */,4,  public Line2D getLine() {\n\n  return line;\n\n
3440,LineAndShapeRenderer,LineAndShapeRenderer,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/LineAndShapeRenderer.java,81,86,7,"/**\n\n   * Constructs a renderer of the specified type.\n\n   * @param The type of renderer.  Use one of the constants SHAPES, LINES or SHAPES_AND_LINES.\n\n   */",12,  public LineAndShapeRenderer(int type) {\n\n    if (type==SHAPES) this.plotShapes=true;\n\n    if (type==LINES) this.plotLines=true;\n\n    if (type==SHAPES_AND_LINES) {\n\n      this.plotShapes = true;\n\n      this.plotLines = true;\n\n
3441,LineAndShapeRenderer,LineAndShapeRenderer,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/LineAndShapeRenderer.java,73,74,5,/**\n\n   * Constructs a renderer that draws shapes only.\n\n   */,4,  public LineAndShapeRenderer() {\n\n    this(SHAPES_AND_LINES);\n\n
3442,drawCategoryItem,LineAndShapeRenderer,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/LineAndShapeRenderer.java,103,138,25,/**\n\n   * Draw a single data item.\n\n   * @param g2 The graphics device.\n\n   * @param plotArea The data plot area.\n\n   * @param plot The plot.\n\n   * @param axis The range axis.\n\n   * @param data The data.\n\n   * @param series The series number (zero-based index).\n\n   * @param category The category.\n\n   * @param categoryIndex The category number (zero-based index).\n\n   * @param previousCategory The previous category (will be null when the first category is\n\n   *             drawn).\n\n   */,58,"  public void drawCategoryItem(Graphics2D g2, Rectangle2D dataArea,\n\n                 CategoryPlot plot, ValueAxis axis,\n\n                 CategoryDataset data, int series, Object category,\n\n                 int categoryIndex, Object previousCategory) {\n\n    // first check the number we are plotting...\n\n    Number value = data.getValue(series, category);\n\n    if (value!=null) {\n\n      // Current X\n\n      double x1 = plot.getCategoryCoordinate(categoryIndex, dataArea);\n\n      // Current Y\n\n      double y1 = axis.translateValueToJava2D(value.doubleValue(), dataArea);\n\n      g2.setPaint(((Plot)plot).getSeriesPaint(series));\n\n      g2.setStroke(((Plot)plot).getSeriesStroke(series));\n\n      if (this.plotShapes) {\n\n        Shape shape = ((Plot)plot).getShape(series, category, x1, y1, shapeScale);\n\n        g2.fill(shape);\n\n        //g2.draw(shape);\n\n      }\n\n      if (this.plotLines) {\n\n        if (previousCategory!=null) {\n\n          Number previousValue = data.getValue(series, previousCategory);\n\n          if (previousValue!=null) {\n\n            // get the previous data point...\n\n            double x0 = plot.getCategoryCoordinate(categoryIndex-1, dataArea);\n\n            double y0 = axis.translateValueToJava2D(previousValue.doubleValue(), dataArea);\n\n            g2.setPaint(((Plot)plot).getSeriesPaint(series));\n\n            g2.setStroke(((Plot)plot).getSeriesStroke(series));\n\n            Line2D line = new Line2D.Double(x0, y0, x1, y1);\n\n            g2.draw(line);\n\n"
3443,PiePlot,PiePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PiePlot.java,146,157,5,/**\n\n   * Constructs a new pie plot.\n\n   */,22,"  public PiePlot() {\n\n    this(DEFAULT_INTERIOR_GAP,\n\n       true, // circular\n\n       DEFAULT_RADIUS,\n\n       NAME_LABELS,\n\n       DEFAULT_SECTION_LABEL_FONT,\n\n       DEFAULT_SECTION_LABEL_PAINT,\n\n       DEFAULT_SECTION_LABEL_GAP,\n\n       ""0.0"",\n\n       new Insets(2, 2, 2, 2),\n\n       null);\n\n"
3444,setRadiusPercent,PiePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PiePlot.java,257,268,7,/**\n\n   * Sets the radius percentage.\n\n   * @param percent The new value.\n\n   */,20,"  public void setRadiusPercent(double percent) {\n\n    // check arguments...\n\n    if ((percent<=0.0) || (percent>MAX_RADIUS)) {\n\n      throw new IllegalArgumentException(""PiePlot.setRadiusPercent(double): ""\n\n                         +""percentage outside valid range."");\n\n    }\n\n    // make the change (if necessary)...\n\n    if (this.radiusPercent!=percent) {\n\n      this.radiusPercent = percent;\n\n      this.notifyListeners(new PlotChangeEvent(this));\n\n"
3445,getSectionLabelFont,PiePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PiePlot.java,311,312,7,/**\n\n   * Returns the section label font.\n\n   * @return The section label font.\n\n   */,4,  public Font getSectionLabelFont() {\n\n  return this.sectionLabelFont;\n\n
3446,setInteriorGapPercent,PiePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PiePlot.java,205,216,5,/**\n\n   * Sets the interior gap percent.\n\n   */,20,"  public void setInteriorGapPercent(double percent) {\n\n    // check arguments...\n\n    if ((percent<0.0) || (percent>MAX_INTERIOR_GAP)) {\n\n      throw new IllegalArgumentException(""PiePlot.setInteriorGapPercent(double): ""\n\n                         +""percentage outside valid range."");\n\n    }\n\n    // make the change...\n\n    if (this.interiorGapPercent!=percent) {\n\n      this.interiorGapPercent = percent;\n\n      notifyListeners(new PlotChangeEvent(this));\n\n"
3447,drawLabel,PiePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PiePlot.java,629,655,19,/**\n\n   * Draws the label for one pie section.\n\n   * @param g2 The graphics device.\n\n   * @param pieArea The area for the unexploded pie sections.\n\n   * @param explodedPieArea The area for the exploded pie section.\n\n   * @param data The data for the plot.\n\n   * @param section The section (zero-based index).\n\n   * @param startAngle The starting angle.\n\n   * @param extent The extent of the arc.\n\n   */,50,"  protected void drawLabel(Graphics2D g2, Rectangle2D pieArea, Rectangle2D explodedPieArea,\n\n               PieDataset data, int section, double startAngle, double extent) {\n\n    // handle label drawing...\n\n    FontRenderContext frc = g2.getFontRenderContext();\n\n    String[] legendItemLabels = chart.getLegendItemLabels();\n\n    String label = """";\n\n    if (this.sectionLabelType==NAME_LABELS) {\n\n      label = legendItemLabels[section];\n\n    }\n\n    else if (this.sectionLabelType==PERCENT_LABELS) {\n\n      label = percentFormatter.format(extent/3.60)+""%"";\n\n    }\n\n    else if (this.sectionLabelType==NAME_AND_PERCENT_LABELS) {\n\n      label = legendItemLabels[section]+"" (""+percentFormatter.format(extent/3.60)+""%)"";\n\n    }\n\n    Rectangle2D labelBounds = this.sectionLabelFont.getStringBounds(label, frc);\n\n    LineMetrics lm = this.sectionLabelFont.getLineMetrics(label, frc);\n\n    double ascent = lm.getAscent();\n\n    Point2D labelLocation = this.calculateLabelLocation(labelBounds, ascent,\n\n                              pieArea, explodedPieArea,\n\n                              startAngle, extent,\n\n                              this.getExplodePercent(section));\n\n    g2.setPaint(this.sectionLabelPaint);\n\n    g2.setFont(this.sectionLabelFont);\n\n    g2.drawString(label, (float)labelLocation.getX(), (float)labelLocation.getY());\n\n"
3448,getRadiusPercent,PiePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PiePlot.java,249,250,7,/**\n\n   * Returns the radius percentage.\n\n   * @return The radius percentage.\n\n   */,4,  public double getRadiusPercent() {\n\n    return this.radiusPercent;\n\n
3449,setPercentFormatString,PiePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PiePlot.java,397,398,5,/**\n\n   * Sets the format string for the percent labels.\n\n   */,4,  public void setPercentFormatString(String format) {\n\n    this.percentFormatter = new DecimalFormat(format);\n\n
3450,setSectionLabelFont,PiePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PiePlot.java,321,332,11,/**\n\n   * Sets the section label font.\n\n   * <P>\n\n   * Notifies registered listeners that the plot has been changed.\n\n   * @param font The new section label font.\n\n   */,20,"  public void setSectionLabelFont(Font font) {\n\n    // check arguments...\n\n    if (font==null) {\n\n      throw new IllegalArgumentException(""PiePlot.setSectionLabelFont(...): ""\n\n                         +""null font not allowed."");\n\n    }\n\n    // make the change...\n\n    if (!this.sectionLabelFont.equals(font)) {\n\n    this.sectionLabelFont = font;\n\n    notifyListeners(new PlotChangeEvent(this));\n\n"
3451,getArcBounds,PiePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PiePlot.java,695,709,17,/**\n\n   * Returns a rectangle that can be used to create a pie section (taking into account the\n\n   * amount by which the pie section is 'exploded').\n\n   * @param unexploded The area inside which the unexploded pie sections are drawn.\n\n   * @param exploded The area inside which the exploded pie sections are drawn.\n\n   * @param startAngle The start angle.\n\n   * @param extent The extent of the arc.\n\n   * @param explodePercent The amount by which the pie section is exploded.\n\n   */,28,"  protected Rectangle2D getArcBounds(Rectangle2D unexploded, Rectangle2D exploded,\n\n                     double startAngle, double extent, double explodePercent) {\n\n    if (explodePercent==0.0) {\n\n      return unexploded;\n\n    }\n\n    else {\n\n      Arc2D arc1 = new Arc2D.Double(unexploded, startAngle, extent/2, Arc2D.OPEN);\n\n      Point2D point1 = arc1.getEndPoint();\n\n      Arc2D.Double arc2 = new Arc2D.Double(exploded, startAngle, extent/2, Arc2D.OPEN);\n\n      Point2D point2 = arc2.getEndPoint();\n\n      double deltaX = (point1.getX()-point2.getX())*explodePercent;\n\n      double deltaY = (point1.getY()-point2.getY())*explodePercent;\n\n      return new Rectangle2D.Double(unexploded.getX()-deltaX, unexploded.getY()-deltaY,\n\n                      unexploded.getWidth(), unexploded.getHeight());\n\n"
3452,getDataset,PiePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PiePlot.java,464,465,11,"/**\n\n   * Returns the dataset for the plot, cast as a PieDataset.\n\n   * <P>\n\n   * Provided for convenience.\n\n   * @return The dataset for the plot, cast as a PieDataset.\n\n   */",4,  public PieDataset getDataset() {\n\n  return (PieDataset)chart.getDataset();\n\n
3453,getExplodePercent,PiePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PiePlot.java,405,422,7,/**\n\n   * Returns the amount that a section should be \'exploded\'.\n\n   * <P>\n\n   */,28,"  public double getExplodePercent(int section) {\n\n    // check argument...\n\n    if (section<0) {\n\n      throw new IllegalArgumentException(""PiePlot.getExplodePercent(int): ""\n\n                         +""section outside valid range."");\n\n    }\n\n    // fetch the result...\n\n    double result = 0.0;\n\n    if (this.explodePercentages!=null) {\n\n      if (section<this.explodePercentages.length) {\n\n        result = explodePercentages[section];\n\n      }\n\n    }\n\n    return result;\n\n"
3454,setToolTipGenerator,PiePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PiePlot.java,486,488,5,/**\n\n   * Sets the tooltip generator.\n\n   */,4,  public void setToolTipGenerator(PieToolTipGenerator generator) {\n\n    this.toolTipGenerator = generator;\n\n
3455,getToolTipGenerator,PiePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PiePlot.java,479,480,5,/**\n\n   * Returns the tooltip generator (possibly null).\n\n   */,4,  public PieToolTipGenerator getToolTipGenerator() {\n\n    return this.toolTipGenerator;\n\n
3456,isCircular,PiePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PiePlot.java,226,227,9,"/**\n\n   * Returns a flag indicating whether the pie chart is circular, or stretched into an elliptical\n\n   * shape.\n\n   * @return A flag indicating whether the pie chart is circular.\n\n   */",4,  public boolean isCircular() {\n\n  return circular;\n\n
3457,setCircular,PiePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PiePlot.java,234,240,7,"/**\n\n   * A flag indicating whether the pie chart is circular, or stretched into an elliptical shape.\n\n   * @param flag The new value.\n\n   */",12,  public void setCircular(boolean flag) {\n\n    // no argument checking required...\n\n    // make the change...\n\n    if (circular!=flag) {\n\n    circular = flag;\n\n      this.notifyListeners(new PlotChangeEvent(this));\n\n
3458,isCompatibleVerticalAxis,PiePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PiePlot.java,681,683,9,"/**\n\n   * Returns true if the axis is compatible with the pie plot, and false otherwise.  Since a pie\n\n   * plot requires no axes, only a null axis is compatible.\n\n   * @param axis The axis.\n\n   */",6,  public boolean isCompatibleVerticalAxis(Axis axis) {\n\n  if (axis==null) return true;\n\n  else return false;\n\n
3459,setExplodePercent,PiePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PiePlot.java,429,453,5,/**\n\n   * Sets the amount that a pie section should be exploded.\n\n   */,46,"  public void setExplodePercent(int section, double percent) {\n\n    // check argument...\n\n    if ((section<0) || (section>=this.getDataset().getCategories().size())) {\n\n      throw new IllegalArgumentException(""PiePlot.setExplodePercent(int, double): ""\n\n                         +""section outside valid range."");\n\n    }\n\n    // store the value in an appropriate data structure...\n\n    if (this.explodePercentages!=null) {\n\n      if (section<this.explodePercentages.length) {\n\n        explodePercentages[section] = percent;\n\n      }\n\n      else {\n\n        double[] newExplodePercentages = new double[section];\n\n        for (int i=0; i<this.explodePercentages.length; i++) {\n\n          newExplodePercentages[i] = this.explodePercentages[i];\n\n        }\n\n        this.explodePercentages = newExplodePercentages;\n\n        this.explodePercentages[section] = percent;\n\n      }\n\n    }\n\n    else {\n\n      explodePercentages = new double[this.getDataset().getCategories().size()];\n\n      explodePercentages[section] = percent;\n\n"
3460,getCategories,PiePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PiePlot.java,472,473,7,/**\n\n   * Returns a collection of the categories in the dataset.\n\n   * @return A collection of the categories in the dataset.\n\n   */,4,  public Collection getCategories() {\n\n  return getDataset().getCategories();\n\n
3461,getSectionLabelPaint,PiePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PiePlot.java,341,342,7,/**\n\n   * Returns the section label paint.\n\n   * @return The section label paint.\n\n   */,4,  public Paint getSectionLabelPaint() {\n\n  return this.sectionLabelPaint;\n\n
3462,draw,PiePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PiePlot.java,498,614,11,/**\n\n   * Draws the plot on a Java 2D graphics device (such as the screen or a printer).\n\n   * @param g2 The graphics device.\n\n   * @param plotArea The area within which the plot should be drawn.\n\n   * @param info Collects info about the drawing.\n\n   */,200,"  public void draw(Graphics2D g2, Rectangle2D plotArea, DrawInfo info) {\n\n    ToolTipsCollection tooltips = null;\n\n    if (info!=null) {\n\n      info.setPlotArea(plotArea);\n\n      tooltips = info.getToolTipsCollection();\n\n    }\n\n  // adjust for insets...\n\n  if (insets!=null) {\n\n    plotArea.setRect(plotArea.getX()+insets.left,\n\n               plotArea.getY()+insets.top,\n\n         plotArea.getWidth()-insets.left-insets.right,\n\n         plotArea.getHeight()-insets.top-insets.bottom);\n\n  }\n\n  // draw the outline and background\n\n  drawOutlineAndBackground(g2, plotArea);\n\n  // adjust the plot area by the interior spacing value\n\n    double gapHorizontal = plotArea.getWidth()*this.interiorGapPercent;\n\n    double gapVertical = plotArea.getHeight()*this.interiorGapPercent;\n\n  double pieX = plotArea.getX()+gapHorizontal/2;\n\n  double pieY = plotArea.getY()+gapVertical/2;\n\n    double pieW = plotArea.getWidth()-gapHorizontal;\n\n    double pieH = plotArea.getHeight()-gapVertical;\n\n  // make the pie area a square if the pie chart is to be circular...\n\n  if (circular) {\n\n    double min = Math.min(pieW, pieH)/2;\n\n      pieX = (pieX+pieX+pieW)/2 - min;\n\n      pieY = (pieY+pieY+pieH)/2 - min;\n\n      pieW = 2*min;\n\n      pieH = 2*min;\n\n  }\n\n    Rectangle2D explodedPieArea = new Rectangle2D.Double(pieX, pieY, pieW, pieH);\n\n    double explodeHorizontal = (1-radiusPercent)*pieW;\n\n    double explodeVertical = (1-radiusPercent)*pieH;\n\n  Rectangle2D pieArea = new Rectangle2D.Double(pieX+explodeHorizontal/2,\n\n                           pieY+explodeVertical/2,\n\n                           pieW-explodeHorizontal,\n\n                           pieH-explodeVertical);\n\n  // plot the data (unless the dataset is null)...\n\n  PieDataset data = (PieDataset)chart.getDataset();\n\n  if (data != null) {\n\n      // get a sorted collection of categories...\n\n      Set categories = data.getCategories();\n\n      SortedSet ss = new TreeSet(categories);\n\n      // compute the total value of the data series skipping over the negative values\n\n      double totalValue = 0;\n\n      Iterator iterator = ss.iterator();\n\n      while (iterator.hasNext()) {\n\n        Object current = iterator.next();\n\n        if (current!=null) {\n\n          Number value = data.getValue(current);\n\n          double v = value.doubleValue();\n\n          if (v>0) {\n\n            totalValue = totalValue + v;\n\n          }\n\n        }\n\n      }\n\n      // For each positive value in the dataseries, compute and draw the corresponding arc.\n\n      double sumTotal = 0;\n\n      int section = 0;\n\n      iterator = ss.iterator();\n\n      while (iterator.hasNext()) {\n\n        Object current = iterator.next();\n\n        Number dataValue = data.getValue(current);\n\n        if (dataValue!=null) {\n\n          double value = dataValue.doubleValue();\n\n          if (value>0) {\n\n            // draw the pie section...\n\n            double startAngle = sumTotal * 360 / totalValue;\n\n            double extent = (sumTotal+value) * 360 / totalValue - startAngle;\n\n            Rectangle2D arcBounds = getArcBounds(pieArea, explodedPieArea,\n\n                               startAngle, extent,\n\n                               this.getExplodePercent(section));\n\n            Arc2D.Double arc = new Arc2D.Double(arcBounds, startAngle, extent,\n\n                              Arc2D.PIE);\n\n            sumTotal += value;\n\n            Paint paint = this.getSeriesPaint(section);\n\n            Paint outlinePaint = this.getSeriesOutlinePaint(section);\n\n            g2.setPaint(paint);\n\n            g2.fill(arc);\n\n            g2.setStroke(new BasicStroke());\n\n            g2.setPaint(outlinePaint);\n\n            g2.draw(arc);\n\n            // add a tooltip for the bar...\n\n            if (tooltips!=null) {\n\n              if (this.toolTipGenerator==null) {\n\n                toolTipGenerator = new StandardPieToolTipGenerator();\n\n              }\n\n              String tip = this.toolTipGenerator.generateToolTip(data, current);\n\n              if (arc!=null) {\n\n                tooltips.addToolTip(tip, arc);\n\n              }\n\n            }\n\n            // then draw the label...\n\n            if (this.sectionLabelType!=NO_LABELS) {\n\n              this.drawLabel(g2, pieArea, explodedPieArea, data, section, startAngle,\n\n                       extent);\n\n            }\n\n          }\n\n        }\n\n        section = section + 1;\n\n"
3463,PiePlot,PiePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PiePlot.java,173,190,23,"/**\n\n   * Constructs a pie plot.\n\n   * @param interiorGapPercent The interior gap (space for labels) as a percentage of the\n\n   *    available space.\n\n   * @param circular Flag indicating whether the pie chart is circular or elliptical.\n\n   * @param radiusPercent The radius of the pie chart, as a percentage of the available space\n\n   *    (after accounting for interior gap).\n\n   * @param sectionLabelFont The font for the section labels.\n\n   * @param sectionLabelPaint The color for the section labels.\n\n   * @param sectionLabelGapPercent The space between the pie sections and the labels.\n\n   * @param insets The gaps between the plot area and the border of the chart.\n\n   */",34,"  public PiePlot(double interiorGapPercent, boolean circular, double radiusPercent,\n\n           int sectionLabelType,\n\n           Font sectionLabelFont, Paint sectionLabelPaint, double sectionLabelGapPercent,\n\n           String percentFormatString, Insets insets,\n\n           PieToolTipGenerator tooltipGenerator) {\n\n  super(null, null);\n\n    this.interiorGapPercent = interiorGapPercent;\n\n    this.circular = circular;\n\n    this.radiusPercent = radiusPercent;\n\n    this.sectionLabelType = sectionLabelType;\n\n    this.sectionLabelFont = sectionLabelFont;\n\n    this.sectionLabelPaint = sectionLabelPaint;\n\n    this.sectionLabelGapPercent = sectionLabelGapPercent;\n\n    this.percentFormatter = new DecimalFormat(percentFormatString);\n\n    this.explodePercentages = null;\n\n    this.toolTipGenerator = tooltipGenerator;\n\n    setInsets(insets);\n\n"
3464,isCompatibleHorizontalAxis,PiePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PiePlot.java,671,673,9,"/**\n\n   * Returns true if the axis is compatible with the pie plot, and false otherwise.  Since a pie\n\n   * plot requires no axes, only a null axis is compatible.\n\n   * @param axis The axis.\n\n   */",6,  public boolean isCompatibleHorizontalAxis(Axis axis) {\n\n  if (axis==null) return true;\n\n  else return false;\n\n
3465,setSectionLabelPaint,PiePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PiePlot.java,351,362,11,/**\n\n   * Sets the section label paint.\n\n   * <P>\n\n   * Notifies registered listeners that the plot has been changed.\n\n   * @param paint The new section label paint.\n\n   */,20,"  public void setSectionLabelPaint(Paint paint) {\n\n    // check arguments...\n\n    if (paint==null) {\n\n      throw new IllegalArgumentException(""PiePlot.setSectionLabelPaint(...): ""\n\n                         +""null paint not allowed."");\n\n    }\n\n    // make the change...\n\n    if (!this.sectionLabelPaint.equals(paint)) {\n\n    this.sectionLabelPaint = paint;\n\n    notifyListeners(new PlotChangeEvent(this));\n\n"
3466,setSectionLabelType,PiePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PiePlot.java,288,302,11,"/**\n\n   * Sets the section label type.\n\n   * <P>\n\n   * Valid types are defined by the following constants: NO_LABELS, NAME_LABELS, PERCENT_LABELS,\n\n   *                           NAME_AND_PERCENT_LABELS.\n\n   */",22,"  public void setSectionLabelType(int type) {\n\n    // check the argument...\n\n    if ((type!=NO_LABELS) && (type!=NAME_LABELS) && (type!=PERCENT_LABELS)\n\n      && (type!=NAME_AND_PERCENT_LABELS)) {\n\n      throw new IllegalArgumentException(""PiePlot.setSectionLabelType(int): ""\n\n                         +""unrecognised type."");\n\n    }\n\n    // make the change...\n\n    if (sectionLabelType!=type) {\n\n      this.sectionLabelType = type;\n\n      notifyListeners(new PlotChangeEvent(this));\n\n"
3467,setSectionLabelGapPercent,PiePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PiePlot.java,378,389,5,/**\n\n   * Sets the section label gap percent.\n\n   */,20,"  public void setSectionLabelGapPercent(double percent) {\n\n    // check arguments...\n\n    if ((percent<0.0) || (percent>MAX_SECTION_LABEL_GAP)) {\n\n      throw new IllegalArgumentException(""PiePlot.setSectionLabelGapPercent(double): ""\n\n                         +""percentage outside valid range."");\n\n    }\n\n    // make the change...\n\n    if (this.sectionLabelGapPercent!=percent) {\n\n      this.sectionLabelGapPercent = percent;\n\n      notifyListeners(new PlotChangeEvent(this));\n\n"
3468,getPlotType,PiePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PiePlot.java,662,663,5,/**\n\n   * Returns a short string describing the type of plot.\n\n   */,4,"  public String getPlotType() {\n\n  return ""Pie Plot"";\n\n"
3469,getInteriorGapPercent,PiePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PiePlot.java,198,199,7,"/**\n\n   * Returns the interior gap, measures as a percentage of the available drawing space.\n\n   * @return The interior gap, measured as a percentage of the available drawing space.\n\n   */",4,  public double getInteriorGapPercent() {\n\n    return this.interiorGapPercent;\n\n
3470,getSectionLabelGapPercent,PiePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PiePlot.java,371,372,7,"/**\n\n   * Returns the section label gap, measures as a percentage of the radius.\n\n   * @return The section label gap, measures as a percentage of the radius.\n\n   */",4,  public double getSectionLabelGapPercent() {\n\n    return this.sectionLabelGapPercent;\n\n
3471,getSectionLabelType,PiePlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/PiePlot.java,278,279,9,"/**\n\n   * Returns the section label type.  Defined by the constants: NO_LABELS, NAME_LABELS,\n\n   * PERCENT_LABELS and NAME_AND_PERCENT_LABELS.\n\n   * @return The section label type.\n\n   */",4,  public int getSectionLabelType() {\n\n    return this.sectionLabelType;\n\n
3472,getVerticalAxis,Plot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Plot.java,230,231,9,/**\n\n   * Returns a reference to the vertical axis.\n\n   * @return A reference to the vertical axis.\n\n   * @see Plot#getAxis\n\n   */,4,  public VerticalAxis getVerticalAxis() {\n\n  return (VerticalAxis)verticalAxis;\n\n
3473,setChart,Plot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Plot.java,327,338,9,/**\n\n   * Sets a reference back to the chart that this plot belongs to.  Reconfigures the axes\n\n   * according to the chart's data source.\n\n   * @param chart The chart that the plot belongs to.\n\n   */,18,"  public void setChart(JFreeChart chart) {\n\n  // if replacing an existing chart, the plot may be a registered listener...\n\n    if (this.chart!=null) {\n\n      chart.removeChangeListener(this);\n\n    }\n\n  this.chart = chart;\n\n  // new chart means new data source, so reconfigure axes...\n\n  if (verticalAxis!=null) verticalAxis.configure();\n\n  if (horizontalAxis!=null) horizontalAxis.configure();\n\n"
3474,getMaximumHorizontalDataValue,VerticalXYBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalXYBarPlot.java,234,240,7,"/**\n\n   * Returns the maximum value in either the domain or the range, whichever is displayed against\n\n   * the horizontal axis for the particular type of plot implementing this interface.\n\n   */",12,  public Number getMaximumHorizontalDataValue() {\n\n  Dataset data = this.getChart().getDataset();\n\n  if (data!=null) {\n\n    return Datasets.getMaximumDomainValue(data);\n\n  }\n\n  else return null;\n\n
3475,handleClick,Plot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Plot.java,585,598,13,"/**\n\n   * Handles a 'click' on the plot.  Since the plot does not maintain any information about where\n\n   * it has been drawn, the plot area is supplied as an argument.\n\n   * @param x The x coordinate.\n\n   * @param y The y coordinate.\n\n   * @param plotArea The area in which the plot is assumed to be drawn.\n\n   */",24,"  public void handleClick(int x, int y, DrawInfo info) {\n\n    // translate x into a data value\n\n    // if the axis is a value axis, set the crosshair value\n\n    if (horizontalAxis instanceof ValueAxis) {\n\n      ValueAxis hva = (ValueAxis)horizontalAxis;\n\n      double xx = hva.translateJava2DtoValue(x, info.getDataArea());\n\n    }\n\n    // translate the y into a data value\n\n    // if the axis is a value axis, set the crosshair value\n\n    if (verticalAxis instanceof ValueAxis) {\n\n      ValueAxis vva = (ValueAxis)verticalAxis;\n\n      double yy = vva.translateJava2DtoValue(y, info.getDataArea());\n\n"
3476,VerticalXYBarPlot,VerticalXYBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalXYBarPlot.java,84,88,17,/**\n\n   * Constructs a new vertical XY bar plot.\n\n   * @param horizontalAxis The horizontal axis.\n\n   * @param verticalAxis The vertical axis.\n\n   * @param insets Amount of blank space around the plot area.\n\n   * @param background The Paint used to fill the plot background.\n\n   * @param outlineStroke The Stroke used to draw an outline around the plot.\n\n   * @param outlinePaint The color used to draw the plot outline.\n\n   */,8,"  public VerticalXYBarPlot(Axis horizontalAxis, Axis verticalAxis,\n\n               Insets insets, Paint background,\n\n               Stroke outlineStroke, Paint outlinePaint) {\n\n    super(horizontalAxis, verticalAxis, insets, background, outlineStroke, outlinePaint);\n\n"
3477,drawOutlineAndBackground,Plot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Plot.java,563,573,9,/**\n\n   * Draw the plot outline and background.\n\n   * @param g2 The graphics device.\n\n   * @param area The area within which the plot should be drawn.\n\n   */,18,"  public void drawOutlineAndBackground(Graphics2D g2, Rectangle2D area) {\n\n  if (backgroundPaint!=null) {\n\n    g2.setPaint(backgroundPaint);\n\n    g2.fill(area);\n\n  }\n\n  if ((outlineStroke!=null) && (outlinePaint!=null)) {\n\n    g2.setStroke(outlineStroke);\n\n    g2.setPaint(outlinePaint);\n\n    g2.draw(area);\n\n"
3478,isCompatibleVerticalAxis,VerticalXYBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalXYBarPlot.java,127,129,13,/**\n\n   * Returns true if the specified axis is compatible with the plot with regard to operating as\n\n   * the vertical axis.\n\n   * <P>\n\n   * This plot requires the vertical axis to be a subclass of VerticalNumberAxis.\n\n   * @param axis The axis.\n\n   */,6,  public boolean isCompatibleVerticalAxis(Axis axis) {\n\n    if (axis instanceof VerticalNumberAxis) return true;\n\n    else return false;\n\n
3480,getMinimumVerticalDataValue,VerticalXYBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalXYBarPlot.java,248,254,9,/**\n\n   * Returns the minimum Y value from the datasource.\n\n   * <P>\n\n   * This method can return null if the data source is null.\n\n   */,12,  public Number getMinimumVerticalDataValue()  {\n\n    Dataset data = this.getChart().getDataset();\n\n  if (data!=null) {\n\n    return Datasets.getMinimumRangeValue(data);\n\n  }\n\n  else return null;\n\n
3481,axisChanged,Plot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Plot.java,610,611,7,/**\n\n   * Receives notification of a change to one of the plot's axes.\n\n   * @param event Information about the event (not used here).\n\n   */,4,  public void axisChanged(AxisChangeEvent event) {\n\n  notifyListeners(new PlotChangeEvent(this));\n\n
3482,getChart,Plot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Plot.java,195,196,7,/**\n\n   * Returns a reference to the chart that this plot belongs to.\n\n   * @return A reference to the chart that this plot belongs to (null possible).\n\n   */,4,  public JFreeChart getChart() {\n\n  return chart;\n\n
3483,VerticalXYBarPlot,VerticalXYBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalXYBarPlot.java,64,71,9,/**\n\n   * Constructs a new vertical XY bar plot.\n\n   * @param horizontalAxis The horizontal axis.\n\n   * @param verticalAxis The vertical axis.\n\n   */,14,"  public VerticalXYBarPlot(Axis horizontalAxis, Axis verticalAxis) {\n\n     this(horizontalAxis,\n\n      verticalAxis,\n\n      Plot.DEFAULT_INSETS,\n\n      Plot.DEFAULT_BACKGROUND_COLOR,\n\n      Plot.DEFAULT_OUTLINE_STROKE,\n\n      Plot.DEFAULT_OUTLINE_COLOR);\n\n"
3484,getSeriesPaint,Plot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Plot.java,414,415,7,/**\n\n   * Returns the Paint used to color any shapes for the specified series.\n\n   * @param index The index of the series of interest (zero-based);\n\n   */,4,  public Paint getSeriesPaint(int index) {\n\n  return seriesPaint[index % seriesPaint.length];\n\n
3485,getDomainAxis,VerticalXYBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalXYBarPlot.java,95,96,5,/**\n\n   * A convenience method that returns the horizontal axis cast as a ValueAxis.\n\n   */,4,  public ValueAxis getDomainAxis() {\n\n    return (ValueAxis)horizontalAxis;\n\n
3486,setSeriesOutlinePaint,Plot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Plot.java,459,461,9,"/**\n\n   * Sets the paint used to outline any shapes representing series, and notifies registered\n\n   * listeners that the chart has been modified.\n\n   * @param paint An array of Paint objects for drawing the outline of series shapes;\n\n   */",6,  public void setSeriesOutlinePaint(Paint[] paint) {\n\n  this.seriesOutlinePaint = paint;\n\n  notifyListeners(new PlotChangeEvent(this));\n\n
3487,setOutlinePaint,Plot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Plot.java,313,317,9,"/**\n\n   * Sets the color of the outline of the plot area, and notifies registered listeners that the\n\n   * Plot has been modified.\n\n   * @param paint The new outline paint.\n\n   */",8,  public void setOutlinePaint(Paint paint) {\n\n    if (!this.outlinePaint.equals(paint)) {\n\n      this.outlinePaint = paint;\n\n    notifyListeners(new PlotChangeEvent(this));\n\n
3488,setSeriesOutlineStroke,Plot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Plot.java,477,479,9,"/**\n\n   * Sets the stroke used to draw any shapes representing series, and notifies registered\n\n   * listeners that the chart has been modified.\n\n   * @param stroke An array of Stroke objects;\n\n   */",6,  public void setSeriesOutlineStroke(Stroke[] stroke) {\n\n  this.seriesOutlineStroke = stroke;\n\n  notifyListeners(new PlotChangeEvent(this));\n\n
3489,drawBar,VerticalXYBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalXYBarPlot.java,185,211,5,/**\n\n   * Draws one bar.\n\n   */,44,"  protected void drawBar(Graphics2D g2, Rectangle2D plotArea, IntervalXYDataset data,\n\n               int series, int item, ValueAxis horizontalAxis, ValueAxis verticalAxis,\n\n               double translatedRangeZero) {\n\n    Paint seriesPaint = this.getSeriesPaint(series);\n\n    Paint seriesOutlinePaint = this.getSeriesOutlinePaint(series);\n\n    Number valueNumber = data.getYValue(series, item);\n\n    double translatedValue = verticalAxis.translateValueToJava2D(valueNumber.doubleValue(), plotArea);\n\n    Number startXNumber = data.getStartXValue(series, item);\n\n    double translatedStartX = horizontalAxis.translateValueToJava2D(startXNumber.doubleValue(), plotArea);\n\n    Number endXNumber = data.getEndXValue(series, item);\n\n    double translatedEndX = horizontalAxis.translateValueToJava2D(endXNumber.doubleValue(), plotArea);\n\n    double translatedWidth = Math.max(1, translatedEndX-translatedStartX);\n\n    double translatedHeight = Math.abs(translatedValue-translatedRangeZero);\n\n    Rectangle2D bar = new Rectangle2D.Double(translatedStartX,\n\n                         Math.min(translatedRangeZero, translatedValue),\n\n                         translatedWidth, translatedHeight);\n\n    g2.setPaint(seriesPaint);\n\n    g2.fill(bar);\n\n    if ((translatedEndX-translatedStartX)>3) {\n\n      g2.setStroke(this.getSeriesOutlineStroke(series));\n\n      g2.setPaint(seriesOutlinePaint);\n\n      g2.draw(bar);\n\n"
3490,addChangeListener,Plot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Plot.java,518,519,7,/**\n\n   * Registers an object for notification of changes to the plot.\n\n   * @param listener The object to be registered.\n\n   */,4,  public void addChangeListener(PlotChangeListener listener) {\n\n  listeners.add(listener);\n\n
3491,setVerticalAxis,Plot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Plot.java,348,372,11,/**\n\n   * Sets the vertical axis for the plot.\n\n   * <P>\n\n   * An exception is thrown if the new axis and the plot are not mutually compatible.\n\n   * @param axis The new axis (null permitted).\n\n   */,40,"  public void setVerticalAxis(Axis axis) throws AxisNotCompatibleException {\n\n    if (isCompatibleVerticalAxis(axis)) {\n\n      if (axis!=null) {\n\n        try {\n\n          axis.setPlot(this);\n\n        }\n\n        catch (PlotNotCompatibleException e) {\n\n          throw new AxisNotCompatibleException(""Plot.setVerticalAxis(...): ""\n\n                            +""plot not compatible with axis."");\n\n        }\n\n        axis.addChangeListener(this);\n\n      }\n\n      // plot is likely registered as a listener with the existing axis...\n\n      if (this.verticalAxis!=null) {\n\n      this.verticalAxis.removeChangeListener(this);\n\n      }\n\n      this.verticalAxis = axis;\n\n    }\n\n    else throw new AxisNotCompatibleException(""Plot.setVerticalAxis(...): ""\n\n                         +""axis not compatible with plot."");\n\n"
3492,draw,VerticalXYBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalXYBarPlot.java,138,177,11,/**\n\n   * Draws the plot on a Java 2D graphics device (such as the screen or a printer).\n\n   * @param g2 The graphics device.\n\n   * @param drawArea The area within which the plot should be drawn.\n\n   * @param info Collects drawing info.\n\n   */,72,"  public void draw(Graphics2D g2, Rectangle2D drawArea, DrawInfo info) {\n\n    // adjust the drawing area for plot insets (if any)...\n\n    if (insets!=null) {\n\n      drawArea = new Rectangle2D.Double(drawArea.getX()+insets.left,\n\n                        drawArea.getY()+insets.top,\n\n                        drawArea.getWidth()-insets.left-insets.right,\n\n                        drawArea.getHeight()-insets.top-insets.bottom);\n\n    }\n\n    // estimate the area required for drawing the axes...\n\n    HorizontalAxis ha = getHorizontalAxis();\n\n    VerticalAxis va = getVerticalAxis();\n\n    double hAxisAreaHeight = ha.reserveHeight(g2, this, drawArea);\n\n    Rectangle2D vAxisArea = va.reserveAxisArea(g2, this, drawArea, hAxisAreaHeight);\n\n    Rectangle2D plotArea = new Rectangle2D.Double(drawArea.getX()+vAxisArea.getWidth(),\n\n                            drawArea.getY(),\n\n                            drawArea.getWidth()-vAxisArea.getWidth(),\n\n                            drawArea.getHeight()-hAxisAreaHeight);\n\n    // draw the background and axes...\n\n    drawOutlineAndBackground(g2, plotArea);\n\n    getDomainAxis().draw(g2, drawArea, plotArea);\n\n    getRangeAxis().draw(g2, drawArea, plotArea);\n\n    // now get the data and plot the bars...\n\n    IntervalXYDataset data = (IntervalXYDataset)chart.getDataset();\n\n    if (data!=null) {\n\n      Shape savedClip = g2.getClip();\n\n      g2.clip(plotArea);\n\n      double translatedVerticalZero = getRangeAxis().translateValueToJava2D(0.0, plotArea);\n\n      int seriesCount = data.getSeriesCount();\n\n      for (int series = 0; series<seriesCount; series++) {\n\n        int itemCount = data.getItemCount(series);\n\n        for (int item = 0; item<itemCount; item++) {\n\n          drawBar(g2, plotArea, data, series, item, getDomainAxis(), getRangeAxis(),\n\n              translatedVerticalZero);\n\n        }\n\n      }\n\n      g2.setClip(savedClip);\n\n"
3493,getSeriesStroke,Plot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Plot.java,432,433,7,/**\n\n   * Returns the Stroke used to draw any shapes for the specified series.\n\n   * @param index The index of the series of interest (zero-based);\n\n   */,4,  public Stroke getSeriesStroke(int index) {\n\n  return seriesStroke[index % seriesStroke.length];\n\n
3494,getRangeAxis,VerticalXYBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalXYBarPlot.java,102,103,5,/**\n\n   * A convenience method that returns the vertical axis cast as a VerticalNumberAxis.\n\n   */,4,  public VerticalNumberAxis getRangeAxis() {\n\n    return (VerticalNumberAxis)verticalAxis;\n\n
3495,getMaximumVerticalDataValue,VerticalXYBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalXYBarPlot.java,263,269,9,/**\n\n   * Returns the maximum Y value from the datasource.\n\n   * <P>\n\n   * This method can return null if the data source is null.\n\n   */,12,  public Number getMaximumVerticalDataValue() {\n\n  Dataset data = this.getChart().getDataset();\n\n  if (data!=null) {\n\n    return Datasets.getMaximumRangeValue(data);\n\n  }\n\n  else return null;\n\n
3496,Plot,Plot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Plot.java,156,187,17,/**\n\n   * Constructs a new plot.\n\n   * @param horizontalAxis The horizontal axis.\n\n   * @param verticalAxis The vertical axis.\n\n   * @param insets Amount of blank space around the plot area.\n\n   * @param background The Paint used to fill the plot background.\n\n   * @param outlineStroke The Stroke used to draw an outline around the plot.\n\n   * @param outlinePaint The color used to draw an outline around the plot.\n\n   */,50,"  protected Plot(Axis horizontalAxis, Axis verticalAxis,\n\n           Insets insets,\n\n           Paint background, Stroke outlineStroke, Paint outlinePaint) {\n\n  this.chart = null;\n\n  this.horizontalAxis=horizontalAxis;\n\n    if (horizontalAxis!=null) {\n\n    horizontalAxis.setPlot(this);\n\n    horizontalAxis.addChangeListener(this);\n\n    }\n\n  this.verticalAxis=verticalAxis;\n\n    if (verticalAxis!=null) {\n\n    verticalAxis.setPlot(this);\n\n    verticalAxis.addChangeListener(this);\n\n    }\n\n  this.insets = insets;\n\n  this.backgroundPaint = background;\n\n    this.outlineStroke = outlineStroke;\n\n  this.outlinePaint = outlinePaint;\n\n      this.seriesPaint = new Paint[] {Color.red, Color.blue, Color.green, Color.yellow,\n\n                    Color.cyan, Color.magenta, Color.orange, Color.pink,\n\n                    Color.lightGray};\n\n  this.seriesStroke = new Stroke[] { new BasicStroke(1) };\n\n  this.seriesOutlinePaint = new Paint[] { Color.gray };\n\n  this.seriesOutlineStroke = new Stroke[] { new BasicStroke(0.5f) };\n\n  this.listeners = new java.util.ArrayList();\n\n"
3497,isCompatibleHorizontalAxis,VerticalXYBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalXYBarPlot.java,114,117,15,/**\n\n   * Returns true if the specified axis is compatible with the plot with regard to operating as\n\n   * the horizontal axis.\n\n   * <P>\n\n   * This plot requires the horizontal axis to be a subclass of HorizontalNumberAxis or\n\n   * HorizontalDateAxis.\n\n   * @param axis The axis.\n\n   */,8,  public boolean isCompatibleHorizontalAxis(Axis axis) {\n\n    if (axis instanceof HorizontalNumberAxis) return true;\n\n    else if (axis instanceof HorizontalDateAxis) return true;\n\n    else return false;\n\n
3498,setOutlineStroke,Plot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Plot.java,291,295,9,"/**\n\n   * Sets the pen/brush used to outline the plot area, and notifies registered listeners that the\n\n   * plot has been modified.\n\n   * @param stroke The new outline pen/brush.\n\n   */",8,  public void setOutlineStroke(Stroke stroke) {\n\n    if (!this.outlineStroke.equals(stroke)) {\n\n    this.outlineStroke = stroke;\n\n    notifyListeners(new PlotChangeEvent(this));\n\n
3499,getMinimumHorizontalDataValue,VerticalXYBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalXYBarPlot.java,220,226,7,"/**\n\n   * Returns the minimum value in either the domain or the range, whichever is displayed against\n\n   * the horizontal axis for the particular type of plot implementing this interface.\n\n   */",12,  public Number getMinimumHorizontalDataValue() {\n\n    Dataset data = this.getChart().getDataset();\n\n  if (data!=null) {\n\n    return Datasets.getMinimumDomainValue(data);\n\n  }\n\n  else return null;\n\n
3500,Plot,Plot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Plot.java,137,143,9,/**\n\n   * Constructs a new plot with the specified axes.\n\n   * @param horizontalAxis The horizontal axis.\n\n   * @param verticalAxis The vertical axis.\n\n   */,12,"  protected Plot(Axis horizontalAxis, Axis verticalAxis) {\n\n    this(horizontalAxis, verticalAxis,\n\n       DEFAULT_INSETS,\n\n       DEFAULT_BACKGROUND_COLOR,\n\n       DEFAULT_OUTLINE_STROKE,\n\n       DEFAULT_OUTLINE_COLOR);\n\n"
3501,getBackgroundPaint,Plot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Plot.java,260,261,7,/**\n\n   * Returns the background color of the plot area.\n\n   * @return The background color of the plot area.\n\n   */,4,  public Paint getBackgroundPaint() {\n\n  return this.backgroundPaint;\n\n
3502,getSeriesOutlinePaint,Plot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Plot.java,450,451,7,/**\n\n   * Returns the Paint used to outline any shapes for the specified series.\n\n   * @param index The index of the series of interest (zero-based);\n\n   */,4,  public Paint getSeriesOutlinePaint(int index) {\n\n  return seriesOutlinePaint[index % seriesOutlinePaint.length];\n\n
3503,getSeriesOutlineStroke,Plot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Plot.java,468,469,7,/**\n\n   * Returns the Stroke used to outline any shapes for the specified series.\n\n   * @param index The index of the series of interest (zero-based);\n\n   */,4,  public Stroke getSeriesOutlineStroke(int index) {\n\n  return seriesOutlineStroke[index % seriesOutlinePaint.length];\n\n
3504,getOutlineStroke,Plot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Plot.java,282,283,7,/**\n\n   * Returns the pen/brush used to outline the plot area.\n\n   * @return The pen/brush used to outline the plot area.\n\n   */,4,  public Stroke getOutlineStroke() {\n\n  return this.outlineStroke;\n\n
3505,setInsets,Plot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Plot.java,247,251,9,/**\n\n   * Sets the insets for the plot and notifies registered listeners that the plot has been\n\n   * modified.\n\n   * @param insets The new insets.\n\n   */,8,  public void setInsets(Insets insets) {\n\n    if (!this.insets.equals(insets)) {\n\n    this.insets = insets;\n\n    notifyListeners(new PlotChangeEvent(this));\n\n
3506,getAxis,Plot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Plot.java,206,211,13,/**\n\n   * Returns the specified axis.\n\n   * @param select Determines the axis returned (use the constants HORIZONTAL_AXIS and\n\n   *         VERTICAL_AXIS).\n\n   * @see Plot#getHorizontalAxis\n\n   * @see Plot#getVerticalAxis\n\n   */,10,  public Axis getAxis(int select) {\n\n  switch (select) {\n\n      case HORIZONTAL_AXIS : return horizontalAxis;\n\n    case VERTICAL_AXIS : return verticalAxis;\n\n    default: return null;\n\n
3507,setSeriesPaint,Plot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Plot.java,423,425,9,"/**\n\n   * Sets the paint used to color any shapes representing series, and notifies registered\n\n   * listeners that the plot has been modified.\n\n   * @param paint An array of Paint objects used to color series;\n\n   */",6,  public void setSeriesPaint(Paint[] paint) {\n\n  this.seriesPaint = paint;\n\n  notifyListeners(new PlotChangeEvent(this));\n\n
3508,getShape,Plot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Plot.java,486,489,7,/**\n\n   * Returns a Shape that can be used in plotting data. Should allow a plugin object to\n\n   * determine the shape (optionally)...\n\n   */,6,"  public Shape getShape(int series, int item, double x, double y, double scale) {\n\n     // return new Rectangle2D.Double(x-0.5*scale, y-0.5*scale, scale, scale);\n\n    return new Ellipse2D.Double(x-0.5*scale, y-0.5*scale, scale, scale);\n\n"
3509,removeChangeListener,Plot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Plot.java,526,527,7,/**\n\n   * Unregisters an object for notification of changes to the plot.\n\n   * @param listener The object to be unregistered.\n\n   */,4,  public void removeChangeListener(PlotChangeListener listener) {\n\n  listeners.remove(listener);\n\n
3511,chartChanged,Plot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Plot.java,620,636,11,/**\n\n   * Receives notification of a change to a (the) chart.\n\n   * <P>\n\n   * Reacts to dataset changes by reconfiguring the axes.\n\n   * @param event Information about the chart change event.\n\n   */,30,  public void chartChanged(ChartChangeEvent event) {\n\n  if (event.getType()==ChartChangeEvent.NEW_DATASET) {\n\n    if (verticalAxis!=null) {\n\n        verticalAxis.configure();\n\n      }\n\n      if (horizontalAxis!=null) {\n\n      horizontalAxis.configure();\n\n      }\n\n  }\n\n  if (event.getType()==ChartChangeEvent.UPDATED_DATASET) {\n\n    if (verticalAxis!=null) {\n\n        verticalAxis.configure();\n\n      }\n\n      if (horizontalAxis!=null) {\n\n      horizontalAxis.configure();\n\n
3512,setSeriesStroke,Plot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Plot.java,441,443,9,"/**\n\n   * Sets the stroke used to draw any shapes representing series, and notifies registered\n\n   * listeners that the chart has been modified.\n\n   * @param stroke An array of Stroke objects used to draw series;\n\n   */",6,  public void setSeriesStroke(Stroke[] stroke) {\n\n  this.seriesStroke = stroke;\n\n  notifyListeners(new PlotChangeEvent(this));\n\n
3513,setBackgroundPaint,Plot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Plot.java,269,273,9,"/**\n\n   * Sets the background color of the plot area, and notifies registered listeners that the\n\n   * plot has been modified.\n\n   * @param paint The new background Paint.\n\n   */",8,  public void setBackgroundPaint(Paint paint) {\n\n    if (!this.backgroundPaint.equals(paint)) {\n\n    this.backgroundPaint = paint;\n\n    notifyListeners(new PlotChangeEvent(this));\n\n
3514,getInsets,Plot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Plot.java,238,239,7,/**\n\n   * Returns the insets for the plot area.\n\n   * @return The insets for the plot area.\n\n   */,4,  public Insets getInsets() {\n\n  return this.insets;\n\n
3515,getShape,Plot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Plot.java,496,499,7,/**\n\n   * Returns a Shape that can be used in plotting data.  Should allow a plug-in object to\n\n   * determine the shape...\n\n   */,6,"  public Shape getShape(int series, Object category, double x, double y, double scale) {\n\n     // return new Rectangle2D.Double(x-0.5*scale, y-0.5*scale, scale, scale);\n\n    return new Ellipse2D.Double(x-0.5*scale, y-0.5*scale, scale, scale);\n\n"
3516,getHorizontalAxis,Plot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Plot.java,221,222,9,/**\n\n   * Returns a reference to the horizontal axis.\n\n   * @return A reference to the horizontal axis.\n\n   * @see Plot#getAxis\n\n   */,4,  public HorizontalAxis getHorizontalAxis() {\n\n  return (HorizontalAxis)horizontalAxis;\n\n
3517,getOutlinePaint,Plot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Plot.java,304,305,7,/**\n\n   * Returns the color used to draw the outline of the plot area.\n\n   * @return The color used to draw the outline of the plot area.\n\n   */,4,  public Paint getOutlinePaint() {\n\n  return this.outlinePaint;\n\n
3518,notifyListeners,Plot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Plot.java,506,510,7,/**\n\n   * Notifies all registered listeners that the plot has been modified.\n\n   * @param event Information about the change event.\n\n   */,10,  public void notifyListeners(PlotChangeEvent event) {\n\n  java.util.Iterator iterator = listeners.iterator();\n\n  while (iterator.hasNext()) {\n\n    PlotChangeListener listener = (PlotChangeListener)iterator.next();\n\n    listener.plotChanged(event);\n\n
3519,setHorizontalAxis,Plot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Plot.java,381,406,9,/**\n\n   * Sets the horizontal axis for the plot (this must be compatible with the plot type or an\n\n   * exception is thrown).\n\n   * @param axis The new axis;\n\n   */,40,"  public void setHorizontalAxis(Axis axis) throws AxisNotCompatibleException {\n\n    if (isCompatibleHorizontalAxis(axis)) {\n\n      if (axis!=null) {\n\n        try {\n\n          axis.setPlot(this);\n\n        }\n\n        catch (PlotNotCompatibleException e) {\n\n          throw new AxisNotCompatibleException(""Plot.setHorizontalAxis(...): ""\n\n                            +""plot not compatible with axis."");\n\n        }\n\n        axis.addChangeListener(this);\n\n      }\n\n      // plot is likely registered as a listener with the existing axis...\n\n      if (this.horizontalAxis!=null) {\n\n      this.horizontalAxis.removeChangeListener(this);\n\n      }\n\n      this.horizontalAxis = axis;\n\n    }\n\n    else throw new AxisNotCompatibleException(""Plot.setHorizontalAxis(...): ""\n\n                         +""axis not compatible with plot."");\n\n"
3521,drawHorizontalLines,XYPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/XYPlot.java,411,420,5,/**\n\n   * Support method for the draw(...) method.\n\n   */,18,"  private void drawHorizontalLines(Graphics2D g2, Rectangle2D dataArea) {\n\n    // Draw any horizontal lines\n\n    if (horizontalLines != null) {\n\n      for (int i=0; i<horizontalLines.size(); i++) {\n\n        g2.setPaint((Paint)horizontalColors.get(i));\n\n        g2.setStroke(new BasicStroke(1));\n\n        Number y = (Number)horizontalLines.get(i);\n\n        int yint = (int)getRangeAxis().translateValueToJava2D(y.doubleValue(), dataArea);\n\n        g2.drawLine(0, yint, (int)(dataArea.getWidth()), yint);\n\n"
3522,drawVerticalLines,XYPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/XYPlot.java,393,402,5,/**\n\n   * Support method for the draw(...) method.\n\n   */,18,"  private void drawVerticalLines(Graphics2D g2, Rectangle2D dataArea) {\n\n    // Draw any vertical lines\n\n    if (verticalLines != null) {\n\n      for (int i=0; i<verticalLines.size(); i++) {\n\n        g2.setPaint((Paint)verticalColors.get(i));\n\n        g2.setStroke(new BasicStroke(1));\n\n        Number x = (Number)verticalLines.get(i);\n\n        int xint = (int)getDomainAxis().translateValueToJava2D(x.doubleValue(), dataArea);\n\n        g2.drawLine(xint, 0, xint, (int)(dataArea.getHeight()));\n\n"
3523,setXYItemRenderer,XYPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/XYPlot.java,139,141,7,"/**\n\n   * Sets the item renderer, and notifies all listeners of a change to the plot.\n\n   * @param renderer The new renderer.\n\n   */",6,  public void setXYItemRenderer(XYItemRenderer renderer) {\n\n    this.renderer = renderer;\n\n    this.notifyListeners(new PlotChangeEvent(this));\n\n
3524,addHorizontalLine,XYPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/XYPlot.java,180,183,7,"/**\n\n   * Adds a horizontal line at the specified data value, using the default color red.\n\n   * @param value The data value.\n\n   */",6,"  public void addHorizontalLine(Number value) {\n\n    addHorizontalLine(value, Color.red);\n\n    this.notifyListeners(new PlotChangeEvent(this));\n\n"
3525,XYPlot,XYPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/XYPlot.java,98,104,9,/**\n\n   * Constructs an XYPlot with the specified axes (other attributes take default values).\n\n   * @param horizontalAxis The horizontal axis.\n\n   * @param verticalAxis The vertical axis.\n\n   */,12,"  public XYPlot(ValueAxis horizontalAxis, ValueAxis verticalAxis) {\n\n  this(horizontalAxis, verticalAxis,\n\n       Plot.DEFAULT_INSETS,\n\n       Plot.DEFAULT_BACKGROUND_COLOR,\n\n       Plot.DEFAULT_OUTLINE_STROKE,\n\n       Plot.DEFAULT_OUTLINE_COLOR);\n\n"
3526,isCompatibleVerticalAxis,XYPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/XYPlot.java,243,247,11,"/**\n\n   * Checks the compatibility of a vertical axis, returning true if the axis is compatible with\n\n   * the plot, and false otherwise.\n\n   * @param axis The vertical axis;\n\n   * @return True if the axis is compatible with the plot, and false otherwise.\n\n   */",10,  public boolean isCompatibleVerticalAxis(Axis axis) {\n\n  if (axis instanceof VerticalNumberAxis) {\n\n    return true;\n\n  }\n\n  else return false;\n\n
3527,getRangeAxis,XYPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/XYPlot.java,217,218,9,/**\n\n   * A convenience method that returns a reference to the vertical axis cast as a\n\n   * ValueAxis.\n\n   * @return The vertical axis cast as a ValueAxis.\n\n   */,4,  public ValueAxis getRangeAxis() {\n\n  return (ValueAxis)verticalAxis;\n\n
3528,getMinimumHorizontalDataValue,XYPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/XYPlot.java,479,485,9,"/**\n\n   * Returns the minimum value in the domain, since this is plotted against the horizontal axis\n\n   * for an XYPlot.\n\n   * @return The minimum value to be plotted against the horizontal axis.\n\n   */",12,  public Number getMinimumHorizontalDataValue() {\n\n  Dataset data = this.getChart().getDataset();\n\n  if (data!=null) {\n\n    return Datasets.getMinimumDomainValue(data);\n\n  }\n\n  else return null;\n\n
3529,getItemRenderer,XYPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/XYPlot.java,131,132,7,/**\n\n   * Returns a reference to the current item renderer.\n\n   * @return A reference to the current item renderer.\n\n   */,4,  public XYItemRenderer getItemRenderer() {\n\n    return this.renderer;\n\n
3530,addHorizontalLine,XYPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/XYPlot.java,191,199,9,"/**\n\n   * Adds a horizontal line at the specified data value, using the specified color.\n\n   * @param value The data value.\n\n   * @param color The line color.\n\n   */",14,"  public void addHorizontalLine(Number location, Paint color) {\n\n    if (horizontalLines == null) {\n\n      horizontalLines = new ArrayList();\n\n      horizontalColors = new ArrayList();\n\n    }\n\n    horizontalColors.add(color);\n\n    horizontalLines.add(location);\n\n"
3531,drawVerticalLine,XYPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/XYPlot.java,365,372,5,/**\n\n   * Utility method for drawing a crosshair on the chart (if required).\n\n   */,14,"  private void drawVerticalLine(Graphics2D g2, Rectangle2D dataArea, double value,\n\n                  Stroke stroke, Paint paint) {\n\n    double xx = this.getDomainAxis().translateValueToJava2D(value, dataArea);\n\n    Line2D line = new Line2D.Double(xx, dataArea.getMinY(), xx, dataArea.getMaxY());\n\n    g2.setStroke(stroke);\n\n    g2.setPaint(paint);\n\n    g2.draw(line);\n\n"
3532,handleClick,XYPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/XYPlot.java,429,442,5,/**\n\n   * Handles a 'click' on the plot by updating the anchor values...\n\n   */,22,"  public void handleClick(int x, int y, DrawInfo info) {\n\n    // set the anchor value for the horizontal axis...\n\n    ValueAxis hva = this.getDomainAxis();\n\n    double hvalue = hva.translateJava2DtoValue((float)x, info.getDataArea());\n\n    hva.setAnchorValue(hvalue);\n\n    hva.setCrosshairValue(hvalue);\n\n    // set the anchor value for the vertical axis...\n\n    ValueAxis vva = this.getRangeAxis();\n\n    double vvalue = vva.translateJava2DtoValue((float)y, info.getDataArea());\n\n    vva.setAnchorValue(vvalue);\n\n    vva.setCrosshairValue(vvalue);\n\n"
3533,getDomainAxis,XYPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/XYPlot.java,208,209,9,/**\n\n   * A convenience method that returns a reference to the horizontal axis cast as a\n\n   * ValueAxis.\n\n   * @return The horizontal axis cast as a ValueAxis.\n\n   */,4,  public ValueAxis getDomainAxis() {\n\n  return (ValueAxis)horizontalAxis;\n\n
3534,addVerticalLine,XYPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/XYPlot.java,156,157,7,/**\n\n   * Adds a vertical line at location with default color blue.\n\n   * @return void\n\n   */,4,"  public void addVerticalLine(Number location) {\n\n    addVerticalLine(location, Color.blue);\n\n"
3535,draw,XYPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/XYPlot.java,259,358,17,/**\n\n   * Draws the XY plot on a Java 2D graphics device (such as the screen or a printer).\n\n   * <P>\n\n   * XYPlot now relies on an XYItemRenderer to draw each item in the plot.  This allows the\n\n   * visual representation of the plot to be changed easily.\n\n   * @param g2 The graphics device.\n\n   * @param drawArea The area within which the plot (including axis labels) should be drawn.\n\n   * @param info Collects chart drawing information (null permitted).\n\n   */,164,"  public void draw(Graphics2D g2, Rectangle2D plotArea, DrawInfo info) {\n\n    // set up info collection...\n\n    ToolTipsCollection tooltips = null;\n\n    if (info!=null) {\n\n      info.setPlotArea(plotArea);\n\n      tooltips = info.getToolTipsCollection();\n\n    }\n\n    // adjust the drawing area for plot insets (if any)...\n\n  if (insets!=null) {\n\n    plotArea.setRect(plotArea.getX()+insets.left,\n\n               plotArea.getY()+insets.top,\n\n               plotArea.getWidth()-insets.left-insets.right,\n\n               plotArea.getHeight()-insets.top-insets.bottom);\n\n  }\n\n  // estimate the area required for drawing the axes...\n\n  HorizontalAxis hAxis = getHorizontalAxis();\n\n  VerticalAxis vAxis = getVerticalAxis();\n\n  double hAxisAreaHeight = hAxis.reserveHeight(g2, this, plotArea);\n\n  Rectangle2D vAxisArea = vAxis.reserveAxisArea(g2, this, plotArea, hAxisAreaHeight);\n\n    // ...and therefore what is left for the plot itself...\n\n  Rectangle2D dataArea = new Rectangle2D.Double(plotArea.getX()+vAxisArea.getWidth(),\n\n                            plotArea.getY(),\n\n                            plotArea.getWidth()-vAxisArea.getWidth(),\n\n                            plotArea.getHeight()-hAxisAreaHeight);\n\n    if (info!=null) {\n\n      info.setDataArea(dataArea);\n\n    }\n\n    CrosshairInfo crosshairInfo = new CrosshairInfo();\n\n    crosshairInfo.setCrosshairDistance(Double.POSITIVE_INFINITY);\n\n    crosshairInfo.setAnchorX(this.getDomainAxis().getAnchorValue());\n\n    crosshairInfo.setAnchorY(this.getRangeAxis().getAnchorValue());\n\n    // draw the plot background and axes...\n\n  drawOutlineAndBackground(g2, dataArea);\n\n  this.horizontalAxis.draw(g2, plotArea, dataArea);\n\n  this.verticalAxis.draw(g2, plotArea, dataArea);\n\n    // now get the data and plot it (the visual representation will depend on the renderer\n\n    // that has been set)...\n\n    XYDataset data = this.getDataset();\n\n    if (data!=null) {\n\n    Shape originalClip = g2.getClip();\n\n    g2.clip(dataArea);\n\n      drawVerticalLines(g2, dataArea);\n\n      drawHorizontalLines(g2, dataArea);\n\n      double transRangeZero = this.getRangeAxis().translateValueToJava2D(0.0, dataArea);\n\n      int seriesCount = data.getSeriesCount();\n\n      for (int series=0; series<seriesCount; series++) {\n\n        int itemCount = data.getItemCount(series);\n\n        for (int item=0; item<itemCount; item++) {\n\n          Shape tooltipArea = renderer.drawItem(g2, dataArea, info, this,\n\n                              (ValueAxis)horizontalAxis,\n\n                              (ValueAxis)verticalAxis,\n\n                              data, series, item,\n\n                              transRangeZero, crosshairInfo);\n\n          // add a tooltip for the item...\n\n          if (tooltips!=null) {\n\n            if (this.toolTipGenerator==null) {\n\n              toolTipGenerator = new StandardXYToolTipGenerator();\n\n            }\n\n            String tip = this.toolTipGenerator.generateToolTip(data, series, item);\n\n            if (tooltipArea!=null) {\n\n              tooltips.addToolTip(tip, tooltipArea);\n\n            }\n\n          }\n\n        }\n\n      }\n\n      // draw vertical crosshair if required...\n\n      ValueAxis hva = (ValueAxis)this.horizontalAxis;\n\n      hva.setCrosshairValue(crosshairInfo.getCrosshairX());\n\n      if (hva.isCrosshairVisible()) {\n\n        this.drawVerticalLine(g2, dataArea, hva.getCrosshairValue(),\n\n                    hva.getCrosshairStroke(),\n\n                    hva.getCrosshairPaint());\n\n      }\n\n      // draw horizontal crosshair if required...\n\n      ValueAxis vva = (ValueAxis)this.verticalAxis;\n\n      vva.setCrosshairValue(crosshairInfo.getCrosshairY());\n\n      if (vva.isCrosshairVisible()) {\n\n        this.drawHorizontalLine(g2, dataArea, vva.getCrosshairValue(),\n\n                    vva.getCrosshairStroke(),\n\n                    vva.getCrosshairPaint());\n\n      }\n\n      g2.setClip(originalClip);\n\n"
3536,drawHorizontalLine,XYPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/XYPlot.java,379,386,5,/**\n\n   * Utility method for drawing a crosshair on the chart (if required).\n\n   */,14,"  private void drawHorizontalLine(Graphics2D g2, Rectangle2D dataArea, double value,\n\n                  Stroke stroke, Paint paint) {\n\n    double yy = this.getRangeAxis().translateValueToJava2D(value, dataArea);\n\n    Line2D line = new Line2D.Double(dataArea.getMinX(), yy, dataArea.getMaxX(), yy);\n\n    g2.setStroke(stroke);\n\n    g2.setPaint(paint);\n\n    g2.draw(line);\n\n"
3537,XYPlot,XYPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/XYPlot.java,117,123,17,/**\n\n   * Constructs a new XY plot.\n\n   * @param horizontalAxis The horizontal axis.\n\n   * @param verticalAxis The vertical axis.\n\n   * @param insets Amount of blank space around the plot area.\n\n   * @param background The Paint used to fill the plot background.\n\n   * @param outlineStroke The Stroke used to draw an outline around the plot.\n\n   * @param outlinePaint The color used to draw the plot outline.\n\n   */,12,"  public XYPlot(ValueAxis horizontalAxis, ValueAxis verticalAxis,\n\n          Insets insets, Paint background,\n\n          Stroke outlineStroke, Paint outlinePaint) {\n\n    super(horizontalAxis, verticalAxis, insets, background, outlineStroke, outlinePaint);\n\n    this.renderer = new StandardXYItemRenderer();\n\n    this.toolTipGenerator = null;\n\n"
3538,getMaximumHorizontalDataValue,XYPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/XYPlot.java,494,500,9,"/**\n\n   * Returns the maximum value in the domain, since this is plotted against the horizontal axis\n\n   * for an XYPlot.\n\n   * @return The maximum value to be plotted against the horizontal axis.\n\n   */",12,  public Number getMaximumHorizontalDataValue() {\n\n  Dataset data = this.getChart().getDataset();\n\n  if (data!=null) {\n\n    return Datasets.getMaximumDomainValue(data);\n\n  }\n\n  else return null;\n\n
3539,getPlotType,XYPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/XYPlot.java,470,471,7,/**\n\n   * Returns the plot type as a string.\n\n   * @return A short string describing the type of plot.\n\n   */,4,"  public String getPlotType() {\n\n  return ""XY Plot"";\n\n"
3540,isCompatibleHorizontalAxis,XYPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/XYPlot.java,227,234,11,"/**\n\n   * Checks the compatibility of a horizontal axis, returning true if the axis is compatible with\n\n   * the plot, and false otherwise.\n\n   * @param axis The horizontal axis;\n\n   * @return True if the axis is compatible with the plot, and false otherwise.\n\n   */",16,  public boolean isCompatibleHorizontalAxis(Axis axis) {\n\n  if (axis instanceof HorizontalNumberAxis) {\n\n    return true;\n\n  }\n\n  else if (axis instanceof HorizontalDateAxis) {\n\n    return true;\n\n  }\n\n  else return false;\n\n
3541,getDataset,XYPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/XYPlot.java,148,149,7,"/**\n\n   * A convenience method that returns the dataset for the plot, cast as an XYDataset.\n\n   * @return The dataset for the plot, cast as an XYDataset.\n\n   */",4,  public XYDataset getDataset() {\n\n  return (XYDataset)chart.getDataset();\n\n
3542,getMinimumVerticalDataValue,XYPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/XYPlot.java,509,515,9,"/**\n\n   * Returns the minimum value in the range, since this is plotted against the vertical axis for\n\n   * an XYPlot.\n\n   * @return The minimum value to be plotted against the vertical axis.\n\n   */",12,  public Number getMinimumVerticalDataValue() {\n\n  Dataset data = this.getChart().getDataset();\n\n  if (data!=null) {\n\n    return Datasets.getMinimumRangeValue(data);\n\n  }\n\n  else return null;\n\n
3543,addVerticalLine,XYPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/XYPlot.java,164,172,7,/**\n\n   * Adds a vertical of the given color at location with the given color.\n\n   * @return void\n\n   */,14,"  public void addVerticalLine(Number location, Paint color) {\n\n    if (verticalLines == null) {\n\n      verticalLines = new ArrayList();\n\n      verticalColors = new ArrayList();\n\n    }\n\n    verticalColors.add(color);\n\n    verticalLines.add(location);\n\n"
3549,getEffect3d,VerticalNumberAxis3D,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalNumberAxis3D.java,184,185,5,/**\n\n   * Return axis 3d deep along 'Z' axis.\n\n   */,4,  public double getEffect3d() {\n\n    return effect3d;\n\n
3550,VerticalNumberAxis3D,VerticalNumberAxis3D,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalNumberAxis3D.java,75,80,7,"/**\n\n   * Constructs a VerticalNumberAxis3D, with the specified label and default attributes.\n\n   * @param label The axis label.\n\n   */",10,"  public VerticalNumberAxis3D(String label) {\n\n  this(label,\n\n       Axis.DEFAULT_AXIS_LABEL_FONT,\n\n       ValueAxis.DEFAULT_MINIMUM_AXIS_VALUE,\n\n       ValueAxis.DEFAULT_MAXIMUM_AXIS_VALUE);\n\n"
3551,VerticalNumberAxis3D,VerticalNumberAxis3D,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalNumberAxis3D.java,91,117,13,"/**\n\n   * Constructs a VerticalNumberAxis3D, using default attributes where necessary.\n\n   * @param label The axis label.\n\n   * @param labelFont The font for displaying the axis label.\n\n   * @param minimumAxisValue The lowest value shown on the axis.\n\n   * @param maximumAxisValue The highest value shown on the axis.\n\n   */",52,"  public VerticalNumberAxis3D(String label, Font labelFont,\n\n          double minimumAxisValue, double maximumAxisValue) {\n\n  this(label, labelFont,\n\n       Axis.DEFAULT_AXIS_LABEL_PAINT,\n\n       Axis.DEFAULT_AXIS_LABEL_INSETS,\n\n       true,  // vertical label\n\n     true,  // show tick labels\n\n       Axis.DEFAULT_TICK_LABEL_FONT,\n\n       Axis.DEFAULT_TICK_LABEL_PAINT,\n\n       Axis.DEFAULT_TICK_LABEL_INSETS,\n\n     true,  // show tick marks\n\n       Axis.DEFAULT_TICK_STROKE,\n\n       true,  // autorange\n\n       true,  // autorange includes zero\n\n       NumberAxis.DEFAULT_MINIMUM_AUTO_RANGE,\n\n     minimumAxisValue, maximumAxisValue,\n\n       false, // inverted\n\n     true,\n\n       NumberAxis.DEFAULT_TICK_UNIT,\n\n       false,  // show grid lines\n\n       ValueAxis.DEFAULT_GRID_LINE_STROKE,\n\n       ValueAxis.DEFAULT_GRID_LINE_PAINT,\n\n       0.0,\n\n       ValueAxis.DEFAULT_CROSSHAIR_STROKE,\n\n       ValueAxis.DEFAULT_CROSSHAIR_PAINT,\n\n       DEFAULT_EFFECT_3D);\n\n"
3552,VerticalNumberAxis3D,VerticalNumberAxis3D,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalNumberAxis3D.java,153,177,63,/**\n\n   * Constructs a new VerticalNumberAxis3D.\n\n   * @param label The axis label.\n\n   * @param labelFont The font for displaying the axis label.\n\n   * @param labelPaint The paint used to draw the axis label.\n\n   * @param labelInsets Determines the amount of blank space around the label.\n\n   * @param verticalLabel Flag indicating whether or not the label is drawn vertically.\n\n   * @param showTickLabels Flag indicating whether or not tick labels are visible.\n\n   * @param tickLabelFont The font used to display tick labels.\n\n   * @param tickLabelPaint The paint used to draw tick labels.\n\n   * @param tickLabelInsets Determines the amount of blank space around tick labels.\n\n   * @param showTickMarks Flag indicating whether or not tick marks are visible.\n\n   * @param tickMarkStroke The stroke used to draw tick marks (if visible).\n\n   * @param autoRange Flag indicating whether or not the axis is automatically scaled to fit the\n\n   *          data.\n\n   * @param autoRangeIncludesZero A flag indicating whether or not zero *must* be displayed on\n\n   *                axis.\n\n   * @param autoRangeMinimum The smallest automatic range allowed.\n\n   * @param minimumAxisValue The lowest value shown on the axis.\n\n   * @param maximumAxisValue The highest value shown on the axis.\n\n   * @param inverted A flag indicating whether the axis is normal or inverted (inverted means\n\n   *         running from positive to negative).\n\n   * @param autoTickUnit A flag indicating whether or not the tick units are automatically\n\n   *           selected.\n\n   * @param showGridLines Flag indicating whether or not grid lines are visible for this axis.\n\n   * @param gridStroke The Stroke used to display grid lines (if visible).\n\n   * @param gridPaint The Paint used to display grid lines (if visible).\n\n   * @param crosshairValue The value at which to draw an optional crosshair (null permitted).\n\n   * @param crosshairStroke The pen/brush used to draw the crosshair.\n\n   * @param crosshairPaint The color used to draw the crosshair.\n\n   * @param effect3d 'Z' axis deep.\n\n   */,46,"  public VerticalNumberAxis3D(String label, Font labelFont, Paint labelPaint, Insets labelInsets,\n\n          boolean verticalLabel,\n\n          boolean showTickLabels, Font tickLabelFont, Paint tickLabelPaint,\n\n                Insets tickLabelInsets,\n\n          boolean showTickMarks, Stroke tickMarkStroke,\n\n          boolean autoRange, boolean autoRangeIncludesZero,\n\n                Number autoRangeMinimum,\n\n          double minimumAxisValue, double maximumAxisValue,\n\n                boolean inverted,\n\n          boolean autoTickUnit, NumberTickUnit tickUnit,\n\n          boolean showGridLines, Stroke gridStroke, Paint gridPaint,\n\n                double crosshairValue, Stroke crosshairStroke, Paint crosshairPaint,\n\n                double effect3d) {\n\n  super(label, labelFont, labelPaint, labelInsets, verticalLabel, showTickLabels,\n\n        tickLabelFont, tickLabelPaint,\n\n      tickLabelInsets, showTickMarks, tickMarkStroke,\n\n      autoRange, autoRangeIncludesZero, autoRangeMinimum,\n\n      minimumAxisValue, maximumAxisValue,\n\n        inverted,\n\n        autoTickUnit, tickUnit,\n\n        showGridLines, gridStroke, gridPaint,\n\n        crosshairValue, crosshairStroke, crosshairPaint);\n\n  this.effect3d = effect3d;\n\n"
3553,VerticalNumberAxis3D,VerticalNumberAxis3D,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalNumberAxis3D.java,67,68,5,"/**\n\n   * Constructs a VerticalNumberAxis3D, with no label and default attributes.\n\n   */",4,  public VerticalNumberAxis3D() {\n\n  this(null);\n\n
3554,draw,VerticalNumberAxis3D,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalNumberAxis3D.java,194,240,11,/**\n\n   * Draws the plot on a Java 2D graphics device (such as the screen or a printer).\n\n   * @param g2 The graphics device.\n\n   * @param drawArea The area within which the chart should be drawn.\n\n   * @param plotArea The area within which the plot should be drawn (a subset of the drawArea).\n\n   */,88,"  public void draw(Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {\n\n  // draw the axis label\n\n  if (this.label!=null) {\n\n    g2.setFont(labelFont);\n\n    g2.setPaint(labelPaint);\n\n    Rectangle2D labelBounds = labelFont.getStringBounds(label, g2.getFontRenderContext());\n\n    if (labelDrawnVertical) {\n\n    double xx = drawArea.getX()+labelInsets.left+labelBounds.getHeight();\n\n    double yy = plotArea.getY()+plotArea.getHeight()/2+(labelBounds.getWidth()/2);\n\n    drawVerticalString(label, g2, (float)xx, (float)yy);\n\n    }\n\n    else {\n\n    double xx = drawArea.getX()+labelInsets.left;\n\n    double yy = drawArea.getY()+drawArea.getHeight()/2-labelBounds.getHeight()/2;\n\n    g2.drawString(label, (float)xx, (float)yy);\n\n    }\n\n  }\n\n  // draw the tick labels and marks and gridlines\n\n  this.refreshTicks(g2, drawArea, plotArea);\n\n  double xx = plotArea.getX();\n\n  g2.setFont(tickLabelFont);\n\n  Iterator iterator = ticks.iterator();\n\n  while (iterator.hasNext()) {\n\n    Tick tick = (Tick)iterator.next();\n\n    float yy = (float)this.translateValueToJava2D(tick.getNumericalValue(), plotArea);\n\n    if (tickLabelsVisible) {\n\n    g2.setPaint(this.tickLabelPaint);\n\n    g2.drawString(tick.getText(), tick.getX(), tick.getY());\n\n    }\n\n    if (tickMarksVisible) {\n\n    g2.setStroke(this.getTickMarkStroke());\n\n    Line2D mark = new Line2D.Double(plotArea.getX()-2, yy,\n\n            plotArea.getX(), yy);\n\n    g2.draw(mark);\n\n    }\n\n    if (gridLinesVisible) {\n\n    g2.setStroke(gridStroke);\n\n    g2.setPaint(gridPaint);\n\n    Line2D gridline = new Line2D.Double(xx+effect3d, yy-effect3d,\n\n              plotArea.getMaxX(), yy-effect3d);\n\n    g2.draw(gridline);\n\n    Line2D grid3Dline = new Line2D.Double(xx, yy,\n\n              xx+effect3d, yy-effect3d);\n\n    g2.draw(grid3Dline);\n\n"
3555,getMin,AbstractAxisRange,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/AbstractAxisRange.java,68,69,5,/**\n\n   * Returns the min of the range.\n\n   */,4,  public Object getMin() {\n\n    return min;\n\n
3556,getMax,AbstractAxisRange,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/AbstractAxisRange.java,75,76,5,/**\n\n   * Returns the max of the range.\n\n   */,4,  public Object getMax() {\n\n    return max;\n\n
3557,after,AbstractAxisRange,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/AbstractAxisRange.java,111,112,11,/**\n\n   * Returns true if o1 is after o2.\n\n   *\n\n   * @param o1 Object #1 to compare.\n\n   * @param o2 Object #2 to compare.\n\n   */,4,"  protected boolean after(Object o1, Object o2) {\n\n    return (!o1.equals(o2) && !before(o1, o2));\n\n"
3559,AbstractAxisRange,AbstractAxisRange,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/AbstractAxisRange.java,60,62,11,/**\n\n   * Creates an AbstractAxisRange object.\n\n   *\n\n   * @param min Minimum value\n\n   * @param max Maximum value\n\n   */,6,"  public AbstractAxisRange(Object min, Object max) {\n\n    this.min = min;\n\n    this.max = max;\n\n"
3560,combine,AbstractAxisRange,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/AbstractAxisRange.java,85,92,11,/**\n\n   * Combines this with range. The result will be a range that contains both\n\n   * this and range.\n\n   *\n\n   * @param range Range to combine with this.\n\n   */,16,"  public void combine(AxisRange range) {\n\n    Object otherMin = range.getMin();\n\n    Object otherMax = range.getMax();\n\n    if (before(otherMin, min)) {\n\n      min = otherMin;\n\n    }\n\n    if (after(otherMax, max)) {\n\n      max = otherMax;\n\n"
3563,CombinedChart,CombinedChart,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedChart.java,61,62,13,/**\n\n   * Standard constructor: returns a CombinedCart for displaying a dataset and\n\n   * a plot.\n\n   *\n\n   * @param data The data to be represented in the chart.\n\n   * @param plot Controller of the visual representation of the data.\n\n   */,4,"  public CombinedChart(Dataset data, Plot plot) {\n\n    super(data, plot, null, null, false);\n\n"
3569,reserveAxisArea,VerticalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalNumberAxis.java,408,435,13,/**\n\n   * Returns area in which the axis will be displayed.\n\n   * @param g2 The graphics device;\n\n   * @param plot A reference to the plot;\n\n   * @param drawArea The area in which the plot and axes should be drawn;\n\n   * @param reservedHeight The height reserved for the horizontal axis;\n\n   */,50,"  public Rectangle2D reserveAxisArea(Graphics2D g2, Plot plot, Rectangle2D drawArea,\n\n             double reservedHeight) {\n\n  // calculate the width of the axis label...\n\n  double labelWidth = 0.0;\n\n  if (label!=null) {\n\n    Rectangle2D labelBounds = labelFont.getStringBounds(label, g2.getFontRenderContext());\n\n    labelWidth = labelInsets.left+labelInsets.right;\n\n    if (this.labelDrawnVertical) {\n\n    labelWidth = labelWidth + labelBounds.getHeight();  // assume width == height before rotation\n\n    }\n\n    else {\n\n    labelWidth = labelWidth + labelBounds.getWidth();\n\n    }\n\n  }\n\n  // calculate the width of the tick labels\n\n  double tickLabelWidth = tickLabelInsets.left+tickLabelInsets.right;\n\n  if (tickLabelsVisible) {\n\n    Rectangle2D approximatePlotArea = new Rectangle2D.Double(drawArea.getX(), drawArea.getY(),\n\n                   drawArea.getWidth(),\n\n                   drawArea.getHeight()-reservedHeight);\n\n    this.refreshTicks(g2, drawArea, approximatePlotArea);\n\n    tickLabelWidth = tickLabelWidth+getMaxTickLabelWidth(g2, approximatePlotArea);\n\n  }\n\n  return new Rectangle2D.Double(drawArea.getX(), drawArea.getY(), labelWidth+tickLabelWidth,\n\n            drawArea.getHeight()-reservedHeight);\n\n"
3570,isLabelDrawnVertical,VerticalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalNumberAxis.java,198,199,11,/**\n\n   * Returns a flag that indicates whether or not the axis label is drawn with a vertical\n\n   * orientation (this saves space).\n\n   * @return A flag that indicates whether or not the axis label is drawn with a vertical\n\n   * orientation.\n\n   */,4,  public boolean isLabelDrawnVertical() {\n\n  return this.labelDrawnVertical;\n\n
3571,VerticalNumberAxis,VerticalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalNumberAxis.java,160,188,63,/**\n\n   * Constructs a vertical number axis.\n\n   * @param label The axis label.\n\n   * @param labelFont The font for displaying the axis label.\n\n   * @param labelPaint The paint used to draw the axis label.\n\n   * @param labelInsets Determines the amount of blank space around the label.\n\n   * @param labelDrawnVertical Flag indicating whether or not the label is drawn vertically.\n\n   * @param tickLabelsVisible Flag indicating whether or not tick labels are visible.\n\n   * @param tickLabelFont The font used to display tick labels.\n\n   * @param tickLabelPaint The paint used to draw tick labels.\n\n   * @param tickLabelInsets Determines the amount of blank space around tick labels.\n\n   * @param showTickMarks Flag indicating whether or not tick marks are visible.\n\n   * @param tickMarkStroke The stroke used to draw tick marks (if visible).\n\n   * @param autoRange Flag indicating whether or not the axis is automatically scaled to fit the\n\n   *          data.\n\n   * @param autoRangeIncludesZero A flag indicating whether or not zero *must* be displayed on\n\n   *                axis.\n\n   * @param autoRangeMinimum The smallest automatic range allowed.\n\n   * @param minimumAxisValue The lowest value shown on the axis.\n\n   * @param maximumAxisValue The highest value shown on the axis.\n\n   * @param inverted A flag indicating whether the axis is normal or inverted (inverted means\n\n   *         running from positive to negative).\n\n   * @param autoTickUnitSelection A flag indicating whether or not the tick units are\n\n   *                selected automatically.\n\n   * @param tickUnit The tick unit.\n\n   * @param showGridLines Flag indicating whether or not grid lines are visible for this axis.\n\n   * @param gridStroke The pen/brush used to display grid lines (if visible).\n\n   * @param gridPaint The color used to display grid lines (if visible).\n\n   * @param crosshairValue The value at which to draw an optional crosshair (null permitted).\n\n   * @param crosshairStroke The pen/brush used to draw the crosshair.\n\n   * @param crosshairPaint The color used to draw the crosshair.\n\n   */,54,"  public VerticalNumberAxis(String label,\n\n                Font labelFont, Paint labelPaint, Insets labelInsets,\n\n          boolean labelDrawnVertical,\n\n          boolean tickLabelsVisible, Font tickLabelFont, Paint tickLabelPaint,\n\n                Insets tickLabelInsets,\n\n          boolean tickMarksVisible, Stroke tickMarkStroke,\n\n          boolean autoRange, boolean autoRangeIncludesZero,\n\n                Number autoRangeMinimum,\n\n          double minimumAxisValue, double maximumAxisValue,\n\n                boolean inverted,\n\n          boolean autoTickUnitSelection,\n\n                NumberTickUnit tickUnit,\n\n           boolean gridLinesVisible, Stroke gridStroke, Paint gridPaint,\n\n                double crosshairValue, Stroke crosshairStroke, Paint crosshairPaint) {\n\n  super(label,\n\n        labelFont, labelPaint, labelInsets,\n\n        tickLabelsVisible,\n\n        tickLabelFont, tickLabelPaint, tickLabelInsets,\n\n        tickMarksVisible,\n\n        tickMarkStroke,\n\n      autoRange, autoRangeIncludesZero, autoRangeMinimum,\n\n      minimumAxisValue, maximumAxisValue,\n\n        inverted,\n\n        autoTickUnitSelection, tickUnit,\n\n        gridLinesVisible, gridStroke, gridPaint,\n\n        crosshairValue, crosshairStroke, crosshairPaint);\n\n  this.labelDrawnVertical = labelDrawnVertical;\n\n"
3572,VerticalNumberAxis,VerticalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalNumberAxis.java,69,71,5,"/**\n\n   * Constructs a vertical number axis, using default values where necessary.\n\n   */",4,  public VerticalNumberAxis() {\n\n    this(null);\n\n
3573,VerticalNumberAxis,VerticalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalNumberAxis.java,97,124,13,/**\n\n   * Constructs a vertical number axis.\n\n   * @param label The axis label (null permitted).\n\n   * @param labelFont The font for displaying the axis label.\n\n   * @param minimumAxisValue The lowest value shown on the axis.\n\n   * @param maximumAxisValue The highest value shown on the axis.\n\n   */,54,"  public VerticalNumberAxis(String label, Font labelFont,\n\n          double minimumAxisValue, double maximumAxisValue) {\n\n  this(label,\n\n       labelFont,\n\n       Axis.DEFAULT_AXIS_LABEL_PAINT,\n\n       Axis.DEFAULT_AXIS_LABEL_INSETS,\n\n       true, // vertical axis label\n\n       true, // tick labels visible\n\n       Axis.DEFAULT_TICK_LABEL_FONT,\n\n       Axis.DEFAULT_TICK_LABEL_PAINT,\n\n       Axis.DEFAULT_TICK_LABEL_INSETS,\n\n     true, // tick marks visible\n\n       Axis.DEFAULT_TICK_STROKE,\n\n       true, // auto range\n\n       true, // auto range includes zero\n\n       NumberAxis.DEFAULT_MINIMUM_AUTO_RANGE,\n\n     minimumAxisValue,\n\n       maximumAxisValue,\n\n       false, // inverted\n\n     true, // auto tick unit selection\n\n       NumberAxis.DEFAULT_TICK_UNIT,\n\n     true, // grid lines visible\n\n       ValueAxis.DEFAULT_GRID_LINE_STROKE,\n\n       ValueAxis.DEFAULT_GRID_LINE_PAINT,\n\n       0.0,\n\n       ValueAxis.DEFAULT_CROSSHAIR_STROKE,\n\n       ValueAxis.DEFAULT_CROSSHAIR_PAINT);\n\n"
3574,setLabelDrawnVertical,VerticalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalNumberAxis.java,207,211,9,/**\n\n   * Sets the flag that controls whether or not the axis label is drawn with a vertical\n\n   * orientation.\n\n   * @param flag The flag.\n\n   */,8,  public void setLabelDrawnVertical(boolean flag) {\n\n    if (this.labelDrawnVertical!=flag) {\n\n    this.labelDrawnVertical = flag;\n\n    this.notifyListeners(new AxisChangeEvent(this));\n\n
3575,selectAutoTickUnit,VerticalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalNumberAxis.java,446,468,13,/**\n\n   * Selects an appropriate tick value for the axis.  The strategy is to display as many ticks as\n\n   * possible (selected from an array of \'standard\' tick units) without the labels overlapping.\n\n   * @param g2 The graphics device;\n\n   * @param drawArea The area in which the plot and axes should be drawn;\n\n   * @param plotArea The area in which the plot should be drawn;\n\n   */,36,"  private void selectAutoTickUnit(Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {\n\n    // calculate the tick label height...\n\n    FontRenderContext frc = g2.getFontRenderContext();\n\n    double tickLabelHeight = tickLabelFont.getLineMetrics(""123"", frc).getHeight()\n\n                 +this.tickLabelInsets.top+this.tickLabelInsets.bottom;\n\n    // now find the smallest tick unit that will accommodate the labels...\n\n  double zero = this.translateValueToJava2D(0.0, plotArea);\n\n    // start with the current tick unit...\n\n    NumberTickUnit candidate1\n\n             = (NumberTickUnit)this.standardTickUnits.getNearestTickUnit(this.tickUnit);\n\n    double y = this.translateValueToJava2D(candidate1.getValue().doubleValue(), plotArea);\n\n    double unitHeight = Math.abs(y-zero);\n\n    // then extrapolate...\n\n    double bestguess = (tickLabelHeight/unitHeight) * candidate1.value.doubleValue();\n\n    NumberTickUnit guess = new NumberTickUnit(new Double(bestguess), null);\n\n    NumberTickUnit candidate2\n\n               = (NumberTickUnit)this.standardTickUnits.getNearestTickUnit(guess);\n\n    this.tickUnit = candidate2;\n\n"
3577,reserveWidth,VerticalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalNumberAxis.java,376,397,11,/**\n\n   * Returns the width required to draw the axis in the specified draw area.\n\n   * @param g2 The graphics device;\n\n   * @param plot A reference to the plot;\n\n   * @param drawArea The area within which the plot should be drawn.\n\n   */,40,"  public double reserveWidth(Graphics2D g2, Plot plot, Rectangle2D drawArea) {\n\n  // calculate the width of the axis label...\n\n  double labelWidth = 0.0;\n\n  if (label!=null) {\n\n    Rectangle2D labelBounds = labelFont.getStringBounds(label, g2.getFontRenderContext());\n\n    labelWidth = labelInsets.left+labelInsets.right;\n\n    if (this.labelDrawnVertical) {\n\n    labelWidth = labelWidth + labelBounds.getHeight();  // assume width == height before rotation\n\n    }\n\n    else {\n\n    labelWidth = labelWidth + labelBounds.getWidth();\n\n    }\n\n  }\n\n  // calculate the width required for the tick labels (if visible);\n\n  double tickLabelWidth = tickLabelInsets.left+tickLabelInsets.right;\n\n  if (tickLabelsVisible) {\n\n    this.refreshTicks(g2, drawArea, drawArea);\n\n    tickLabelWidth = tickLabelWidth+getMaxTickLabelWidth(g2, drawArea);\n\n  }\n\n  return labelWidth+tickLabelWidth;\n\n"
3578,refreshTicks,VerticalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalNumberAxis.java,479,504,13,"/**\n\n   * Calculates the positions of the tick labels for the axis, storing the results in the\n\n   * tick label list (ready for drawing).\n\n   * @param g2 The graphics device.\n\n   * @param drawArea The area in which the plot and the axes should be drawn.\n\n   * @param plotArea The area in which the plot should be drawn.\n\n   */",44,"  public void refreshTicks(Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {\n\n  this.ticks.clear();\n\n  g2.setFont(tickLabelFont);\n\n  if (this.autoTickUnitSelection) {\n\n    selectAutoTickUnit(g2, drawArea, plotArea);\n\n  }\n\n  double size = this.tickUnit.getValue().doubleValue();\n\n  int count = this.calculateVisibleTickCount();\n\n  double lowestTickValue = this.calculateLowestVisibleTickValue();\n\n  //tickLabelFormatter = new DecimalFormat(tickLabelFormatter.toPattern());\n\n  for (int i=0; i<count; i++) {\n\n    Number currentTickValue = new Double(lowestTickValue+(i*size));\n\n    double yy = this.translateValueToJava2D(currentTickValue.doubleValue(), plotArea);\n\n    String tickLabel = this.valueToString(currentTickValue.doubleValue());\n\n    Rectangle2D tickLabelBounds = tickLabelFont.getStringBounds(tickLabel,\n\n                                    g2.getFontRenderContext());\n\n    float x = (float)(plotArea.getX()\n\n                -tickLabelBounds.getWidth()\n\n                -tickLabelInsets.left-tickLabelInsets.right);\n\n    float y = (float)(yy+(tickLabelBounds.getHeight()/2));\n\n    Tick tick = new Tick(currentTickValue, tickLabel, x, y);\n\n    ticks.add(tick);\n\n"
3579,VerticalNumberAxis,VerticalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalNumberAxis.java,79,86,7,"/**\n\n   * Constructs a vertical number axis, using default values where necessary.\n\n   * @param label The axis label (null permitted).\n\n   */",12,"  public VerticalNumberAxis(String label) {\n\n  this(label,\n\n       Axis.DEFAULT_AXIS_LABEL_FONT,\n\n       ValueAxis.DEFAULT_MINIMUM_AXIS_VALUE,\n\n       ValueAxis.DEFAULT_MAXIMUM_AXIS_VALUE);\n\n    this.autoRange = true;\n\n"
3580,configure,VerticalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalNumberAxis.java,220,222,7,"/**\n\n   * Configures the axis to work with the specified plot.  If the axis has auto-scaling, then sets\n\n   * the maximum and minimum values.\n\n   */",6,  public void configure() {\n\n  if (isAutoRange()) {\n\n    autoAdjustRange();\n\n
3581,draw,VerticalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalNumberAxis.java,555,635,12,/**\n\n   * Draws the plot on a Java 2D graphics device (such as the screen or a printer).\n\n   * @param g2 The graphics device;\n\n   * @param drawArea The area within which the chart should be drawn.\n\n   * @param plotArea The area within which the plot should be drawn (a subset of the drawArea).\n\n   */\n,82,"  public void draw(Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {\n\n  // draw the axis label\n\n  if (this.label!=null) {\n\n    g2.setFont(labelFont);\n\n    g2.setPaint(labelPaint);\n\n    Rectangle2D labelBounds = labelFont.getStringBounds(label, g2.getFontRenderContext());\n\n    if (labelDrawnVertical) {\n\n    double xx = drawArea.getX()+labelInsets.left+labelBounds.getHeight();\n\n    double yy = plotArea.getY()+plotArea.getHeight()/2+(labelBounds.getWidth()/2);\n\n    drawVerticalString(label, g2, (float)xx, (float)yy);\n\n    }\n\n    else {\n\n    double xx = drawArea.getX()+labelInsets.left;\n\n    double yy = drawArea.getY()+drawArea.getHeight()/2-labelBounds.getHeight()/2;\n\n    g2.drawString(label, (float)xx, (float)yy);\n\n    }\n\n  }\n\n  // draw the tick labels and marks and gridlines\n\n  this.refreshTicks(g2, drawArea, plotArea);\n\n  double xx = plotArea.getX();\n\n  g2.setFont(tickLabelFont);\n\n  Iterator iterator = ticks.iterator();\n\n  while (iterator.hasNext()) {\n\n    Tick tick = (Tick)iterator.next();\n\n    float yy = (float)this.translateValueToJava2D(tick.getNumericalValue(), plotArea);\n\n    if (tickLabelsVisible) {\n\n    g2.setPaint(this.tickLabelPaint);\n\n    g2.drawString(tick.getText(), tick.getX(), tick.getY());\n\n    }\n\n    if (tickMarksVisible) {\n\n    g2.setStroke(this.getTickMarkStroke());\n\n    Line2D mark = new Line2D.Double(plotArea.getX()-2, yy,\n\n            plotArea.getX()+2, yy);\n\n    g2.draw(mark);\n\n    }\n\n    if (gridLinesVisible) {\n\n    g2.setStroke(gridStroke);\n\n    g2.setPaint(gridPaint);\n\n    Line2D gridline = new Line2D.Double(xx, yy,\n\n              plotArea.getMaxX(), yy);\n\n    g2.draw(gridline);\n\n"
3582,autoAdjustRange,VerticalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalNumberAxis.java,270,307,5,/**\n\n   * Rescales the axis to ensure that all data is visible.\n\n   */,62,"  public void autoAdjustRange() {\n\n  if (plot!=null) {\n\n    if (plot instanceof VerticalValuePlot) {\n\n    VerticalValuePlot vvp = (VerticalValuePlot)plot;\n\n        Number u = vvp.getMaximumVerticalDataValue();\n\n        double upper = this.DEFAULT_MAXIMUM_AXIS_VALUE;\n\n        if (u!=null) {\n\n      upper = u.doubleValue();\n\n        }\n\n        Number l = vvp.getMinimumVerticalDataValue();\n\n        double lower = this.DEFAULT_MINIMUM_AXIS_VALUE;\n\n        if (l!=null) {\n\n      lower = l.doubleValue();\n\n        }\n\n    double range = upper-lower;\n\n        // ensure the autorange is at least <minRange> in size...\n\n    double minRange = this.autoRangeMinimumSize.doubleValue();\n\n    if (range<minRange) {\n\n      upper = (upper+lower+minRange)/2;\n\n      lower = (upper+lower-minRange)/2;\n\n    }\n\n    if (this.autoRangeIncludesZero()) {\n\n      if (upper!=0.0) upper = Math.max(0.0, upper+upperMargin*range);\n\n      if (lower!=0.0) lower = Math.min(0.0, lower-lowerMargin*range);\n\n    }\n\n    else {\n\n      if (upper!=0.0) upper = upper+upperMargin*range;\n\n      if (lower!=0.0) lower = lower-lowerMargin*range;\n\n    }\n\n    this.minimumAxisValue=lower;\n\n    this.maximumAxisValue=upper;\n\n"
3583,getMinimumVerticalDataValue,VerticalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalBarPlot.java,447,453,7,"/**\n\n   * Returns the minimum value in the range, since this is plotted against the vertical axis for\n\n   * BarPlot.\n\n   */",12,  public Number getMinimumVerticalDataValue() {\n\n  Dataset data = this.getChart().getDataset();\n\n  if (data!=null) {\n\n    return Datasets.getMinimumRangeValue(data);\n\n  }\n\n  else return null;\n\n
3584,getCategoryAxis,VerticalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalBarPlot.java,158,159,7,/**\n\n   * A convenience method that returns a reference to the horizontal axis cast as a\n\n   * CategoryAxis.\n\n   */,4,  public CategoryAxis getCategoryAxis() {\n\n  return (CategoryAxis)horizontalAxis;\n\n
3585,isCompatibleHorizontalAxis,VerticalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalBarPlot.java,214,218,9,"/**\n\n   * Checks the compatibility of a horizontal axis, returning true if the axis is compatible with\n\n   * the plot, and false otherwise.\n\n   * @param axis The horizontal axis;\n\n   */",10,  public boolean isCompatibleHorizontalAxis(Axis axis) {\n\n  if (axis instanceof CategoryAxis) {\n\n    return true;\n\n  }\n\n  else return false;\n\n
3586,setVerticalAxis,VerticalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalBarPlot.java,149,151,9,/**\n\n   * Sets the vertical axis for the plot.  This method should throw an exception if the axis\n\n   * doesn't implement the required interfaces.\n\n   * @param vAxis The new vertical axis.\n\n   */,6,  public void setVerticalAxis(Axis vAxis) throws AxisNotCompatibleException {\n\n  // check that the axis implements the required interface (if not raise an exception);\n\n  super.setVerticalAxis(vAxis);\n\n
3587,getCategoryCoordinate,VerticalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalBarPlot.java,184,205,9,/**\n\n   * Returns the x-coordinate (in Java 2D User Space) of the center of the specified category.\n\n   * @param category The index of the category of interest (first category index = 0);\n\n   * @param area The region within which the plot will be drawn.\n\n   */,36,"  public double getCategoryCoordinate(int category, Rectangle2D area) {\n\n    // calculate first part of result...\n\n    double result = area.getX() + (area.getWidth()*introGapPercent);\n\n    // then add some depending on how many categories...\n\n  int categoryCount = getDataset().getCategoryCount();\n\n    if (categoryCount>1) {\n\n    double categorySpan = area.getWidth()\n\n                  * (1-introGapPercent-trailGapPercent-categoryGapsPercent);\n\n      double categoryGapSpan = area.getWidth()*categoryGapsPercent;\n\n      result = result\n\n           + (category+0.5)*(categorySpan/categoryCount)\n\n           + (category)*(categoryGapSpan/(categoryCount-1));\n\n    }\n\n    else {\n\n      result = result\n\n           + (category+0.5)*area.getWidth()*(1-introGapPercent-trailGapPercent);\n\n    }\n\n    return result;\n\n"
3588,getRangeAxis,VerticalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalBarPlot.java,140,141,5,/**\n\n   * Returns the range axis.\n\n   */,4,  public ValueAxis getRangeAxis() {\n\n  return (ValueAxis)verticalAxis;\n\n
3589,calculateBarWidth,VerticalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalBarPlot.java,415,433,7,/**\n\n   * Returns the width of each bar in the chart.\n\n   * @param area The area within which the plot will be drawn.\n\n   */,28,"  double calculateBarWidth(Rectangle2D plotArea) {\n\n  CategoryDataset data = getDataset();\n\n  // series, category and bar counts\n\n  int categoryCount = data.getCategoryCount();\n\n  int seriesCount = data.getSeriesCount();\n\n  int barCount = renderer.barWidthsPerCategory(data)*categoryCount;\n\n  // calculate the plot width (bars are vertical) less whitespace\n\n    double usable = plotArea.getWidth() *\n\n                  (1.0 - introGapPercent - trailGapPercent - categoryGapsPercent);\n\n    if (renderer.barWidthsPerCategory(data)>1) {\n\n//    usable = usable - ((seriesCount-1) * categoryCount * seriesGap);\n\n    }\n\n  // and thus the width of the bars\n\n  return usable/barCount;\n\n"
3590,getPlotType,VerticalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalBarPlot.java,439,440,5,/**\n\n   * Returns a short string describing the type of plot.\n\n   */,4,"  public String getPlotType() {\n\n  return ""Bar Plot"";\n\n"
3591,VerticalBarPlot,VerticalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalBarPlot.java,106,117,23,"/**\n\n   * Constructs a new vertical bar plot.\n\n   * @param horizontalAxis The horizontal axis.\n\n   * @param verticalAxis The vertical axis.\n\n   * @param introGapPercent The gap before the first bar in the plot, as a percentage of the\n\n   *            available drawing space.\n\n   * @param trailGapPercent The gap after the last bar in the plot, as a percentage of the\n\n   *            available drawing space.\n\n   * @param categoryGapPercent The percentage of drawing space allocated to the gap between the\n\n   *               last bar in one category and the first bar in the next category.\n\n   * @param itemGapPercent The gap between bars within the same category.\n\n   */",20,"  public VerticalBarPlot(CategoryAxis horizontalAxis, ValueAxis verticalAxis,\n\n               Insets insets,\n\n         double introGapPercent, double trailGapPercent,\n\n               double categoryGapPercent, double itemGapPercent,\n\n               CategoryToolTipGenerator toolTipGenerator) {\n\n  super(horizontalAxis, verticalAxis,\n\n        insets,\n\n      introGapPercent, trailGapPercent, categoryGapPercent, itemGapPercent,\n\n        toolTipGenerator);\n\n    this.renderer = new VerticalBarRenderer();\n\n"
3592,draw,VerticalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalBarPlot.java,239,288,11,/**\n\n   * Draws the plot on a Java 2D graphics device (such as the screen or a printer).\n\n   * @param g2 The graphics device.\n\n   * @param plotArea The area within which the plot should be drawn.\n\n   * @param info Collects info as the chart is drawn.\n\n   */,82,"  public void draw(Graphics2D g2, Rectangle2D plotArea, DrawInfo info) {\n\n    // set up the drawing info...\n\n    ToolTipsCollection tooltips = null;\n\n    if (info!=null) {\n\n      info.setPlotArea(plotArea);\n\n      tooltips = info.getToolTipsCollection();\n\n    }\n\n    // adjust the drawing area for the plot insets (if any)...\n\n  if (insets!=null) {\n\n    plotArea.setRect(plotArea.getX()+insets.left,\n\n               plotArea.getY()+insets.top,\n\n               plotArea.getWidth()-insets.left-insets.right,\n\n         plotArea.getHeight()-insets.top-insets.bottom);\n\n  }\n\n    if ((plotArea.getWidth()>=MINIMUM_WIDTH_TO_DRAW)\n\n     && (plotArea.getHeight()>=MINIMUM_HEIGHT_TO_DRAW)) {\n\n      // estimate the area required for drawing the axes...\n\n      HorizontalAxis hAxis = getHorizontalAxis();\n\n      VerticalAxis vAxis = getVerticalAxis();\n\n      double hAxisAreaHeight = hAxis.reserveHeight(g2, this, plotArea);\n\n      Rectangle2D vAxisArea = vAxis.reserveAxisArea(g2, this, plotArea, hAxisAreaHeight);\n\n      // and thus the area available for plotting...\n\n      Rectangle2D dataArea = new Rectangle2D.Double(plotArea.getX()+vAxisArea.getWidth(),\n\n                              plotArea.getY(),\n\n                              plotArea.getWidth()-vAxisArea.getWidth(),\n\n                              plotArea.getHeight()-hAxisAreaHeight);\n\n      if (info!=null) {\n\n        info.setDataArea(dataArea);\n\n      }\n\n      Shape backgroundPlotArea = calculateBackgroundPlotArea(dataArea);\n\n      // draw the background and axes...\n\n      drawOutlineAndBackground(g2, backgroundPlotArea);\n\n      getCategoryAxis().draw(g2, plotArea, dataArea);\n\n      getRangeAxis().draw(g2, plotArea, dataArea);\n\n      drawBars(g2, backgroundPlotArea, dataArea, info);\n\n      // draw horizontal crosshair if required...\n\n      ValueAxis vva = this.getRangeAxis();\n\n      if (vva.isCrosshairVisible()) {\n\n        this.drawHorizontalLine(g2, dataArea, vva.getCrosshairValue(),\n\n                    vva.getCrosshairStroke(),\n\n                    vva.getCrosshairPaint());\n\n"
3593,setRenderer,VerticalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalBarPlot.java,125,127,7,/**\n\n   * Sets the renderer for the bar plot.\n\n   * @param renderer The renderer.\n\n   */,6,  public void setRenderer(VerticalBarRenderer renderer) {\n\n    this.renderer = renderer;\n\n    this.notifyListeners(new PlotChangeEvent(this));\n\n
3594,calculateBackgroundPlotArea,VerticalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalBarPlot.java,298,299,5,/**\n\n   * Returns chart's background area.\n\n   */,4,  protected Shape calculateBackgroundPlotArea(Rectangle2D plotArea) {\n\n    return plotArea;\n\n
3595,getMaximumVerticalDataValue,VerticalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalBarPlot.java,461,467,7,"/**\n\n   * Returns the maximum value in either the domain or the range, whichever is displayed against\n\n   * the vertical axis for the particular type of plot implementing this interface.\n\n   */",12,  public Number getMaximumVerticalDataValue() {\n\n  Dataset data = this.getChart().getDataset();\n\n  if (data!=null) {\n\n    return Datasets.getMaximumRangeValue(data);\n\n  }\n\n  else return null;\n\n
3596,getCategories,VerticalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalBarPlot.java,175,176,5,/**\n\n   * A convenience method that returns a list of the categories in the dataset.\n\n   */,4,  public java.util.List getCategories() {\n\n  return getDataset().getCategories();\n\n
3597,VerticalBarPlot,VerticalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalBarPlot.java,81,89,9,/**\n\n   * Constructs a new vertical bar plot.\n\n   * @param horizontalAxis The horizontal axis.\n\n   * @param verticalAxis The vertical axis.\n\n   */,16,"  public VerticalBarPlot(CategoryAxis horizontalAxis, ValueAxis verticalAxis) {\n\n  this(horizontalAxis, verticalAxis,\n\n       Plot.DEFAULT_INSETS,\n\n       BarPlot.DEFAULT_INTRO_GAP_PERCENT,\n\n       BarPlot.DEFAULT_TRAIL_GAP_PERCENT,\n\n       BarPlot.DEFAULT_CATEGORY_GAPS_PERCENT,\n\n       BarPlot.DEFAULT_ITEM_GAPS_PERCENT,\n\n       null\n\n"
3598,getDataset,VerticalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalBarPlot.java,133,134,5,"/**\n\n   * A convenience method that returns the dataset for the plot, cast as a CategoryDataset.\n\n   */",4,  public CategoryDataset getDataset() {\n\n  return (CategoryDataset)chart.getDataset();\n\n
3599,isCompatibleVerticalAxis,VerticalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalBarPlot.java,226,230,9,"/**\n\n   * Checks the compatibility of a vertical axis, returning true if the axis is compatible with\n\n   * the plot, and false otherwise.\n\n   * @param axis The vertical axis;\n\n   */",10,  public boolean isCompatibleVerticalAxis(Axis axis) {\n\n  if (axis instanceof VerticalNumberAxis) {\n\n    return true;\n\n  }\n\n  else return false;\n\n
3600,setHorizontalAxis,VerticalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalBarPlot.java,167,169,9,/**\n\n   * Sets the horizontal axis for the plot.  This method should throw an exception if the axis\n\n   * doesn't implement the required interfaces.\n\n   * @param axis The new horizontal axis.\n\n   */,6,  public void setHorizontalAxis(Axis axis) throws AxisNotCompatibleException {\n\n  // check that the axis implements the required interface (if not raise an exception);\n\n  super.setHorizontalAxis(axis);\n\n
3601,drawBars,VerticalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalBarPlot.java,308,387,11,/**\n\n   * Draws charts bars\n\n   * @param g2 The graphics device;\n\n   * @param backgroundPlotArea The area within which will be clipped\n\n   * @param plotArea The area within which the plot should be drawn.\n\n   */,138,"  protected void drawBars(Graphics2D g2,\n\n              Shape backgroundPlotArea, Rectangle2D dataArea,\n\n              DrawInfo info) {\n\n    // now get the data and plot the bars...\n\n    CategoryDataset data = this.getDataset();\n\n    if (data!=null) {\n\n      Shape savedClip = g2.getClip();\n\n      g2.clip(backgroundPlotArea);\n\n      int seriesCount = data.getSeriesCount();\n\n      int categoryCount = data.getCategoryCount();\n\n      int barCount = renderer.barWidthsPerCategory(data);\n\n      double translatedZero = getRangeAxis().translateValueToJava2D(0.0, dataArea);\n\n      // work out the span dimensions for the categories...\n\n      double categorySpan = 0.0;\n\n      double categoryGapSpan = 0.0;\n\n      if (categoryCount>1) {\n\n        categorySpan = dataArea.getWidth()\n\n                 * (1-introGapPercent-trailGapPercent-categoryGapsPercent);\n\n        categoryGapSpan = dataArea.getWidth()*categoryGapsPercent;\n\n      }\n\n      else {\n\n        categorySpan = dataArea.getWidth()*(1-introGapPercent-trailGapPercent);\n\n      }\n\n      // work out the item span...\n\n      double itemSpan = categorySpan;\n\n      double itemGapSpan = 0.0;\n\n      if (seriesCount>1) {\n\n        if (renderer.hasItemGaps()) {\n\n          itemGapSpan = dataArea.getWidth()*itemGapsPercent;\n\n          itemSpan = itemSpan - itemGapSpan;\n\n        }\n\n      }\n\n      double itemWidth = itemSpan/(categoryCount*renderer.barWidthsPerCategory(data));\n\n      int categoryIndex = 0;\n\n    Iterator iterator = data.getCategories().iterator();\n\n    while (iterator.hasNext()) {\n\n    Object category = iterator.next();\n\n    for (int series=0; series<seriesCount; series++) {\n\n          Shape tooltipArea = renderer.drawBar(g2,\n\n                             dataArea, this,\n\n                             getRangeAxis(),\n\n                             data, series,\n\n                             category, categoryIndex,\n\n                             translatedZero, itemWidth,\n\n                             categorySpan, categoryGapSpan,\n\n                             itemSpan, itemGapSpan);\n\n          // add a tooltip for the bar...\n\n          if (info!=null) {\n\n            ToolTipsCollection tooltips = info.getToolTipsCollection();\n\n            if (tooltips!=null) {\n\n              if (this.toolTipGenerator==null) {\n\n                toolTipGenerator = new StandardCategoryToolTipGenerator();\n\n              }\n\n              String tip = this.toolTipGenerator.generateToolTip(data, series,\n\n                                         category);\n\n              if (tooltipArea!=null) {\n\n                tooltips.addToolTip(tip, tooltipArea);\n\n              }\n\n            }\n\n          }\n\n        }\n\n        categoryIndex++;\n\n      }\n\n      // draw a line at zero...\n\n      Line2D baseline = new Line2D.Double(dataArea.getX(), translatedZero,\n\n                        dataArea.getMaxX(), translatedZero);\n\n      g2.setStroke(new BasicStroke());\n\n      g2.draw(baseline);\n\n      g2.setClip(savedClip);\n\n"
3602,handleClick,VerticalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalBarPlot.java,474,480,5,/**\n\n   * Handles a 'click' on the plot by updating the anchor values...\n\n   */,12,"  public void handleClick(int x, int y, DrawInfo info) {\n\n    // set the anchor value for the horizontal axis...\n\n    ValueAxis vva = this.getRangeAxis();\n\n    double vvalue = vva.translateJava2DtoValue((float)y, info.getDataArea());\n\n    vva.setAnchorValue(vvalue);\n\n    vva.setCrosshairValue(vvalue);\n\n"
3603,drawOutlineAndBackground,VerticalBarPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalBarPlot.java,396,406,9,/**\n\n   * Draws the plot outline and background.\n\n   * @param g2 The graphics device.\n\n   * @param area The area for the plot.\n\n   */,18,"  public void drawOutlineAndBackground(Graphics2D g2, Shape area) {\n\n  if (backgroundPaint!=null) {\n\n    g2.setPaint(backgroundPaint);\n\n    g2.fill(area);\n\n  }\n\n  if ((outlineStroke!=null) && (outlinePaint!=null)) {\n\n    g2.setStroke(outlineStroke);\n\n    g2.setPaint(outlinePaint);\n\n    g2.draw(area);\n\n"
3604,setAutoTickUnitSelection,ValueAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ValueAxis.java,300,304,13,/**\n\n   * Sets a flag indicating whether or not the tick unit is automatically selected from a\n\n   * range of standard tick units.\n\n   * <P>\n\n   * Registered listeners are notified of a change to the axis.\n\n   * @param flag The new value of the flag.\n\n   */,8,  public void setAutoTickUnitSelection(boolean flag) {\n\n    if (this.autoTickUnitSelection!=flag) {\n\n      this.autoTickUnitSelection = flag;\n\n    notifyListeners(new AxisChangeEvent(this));\n\n
3605,setCrosshairVisible,ValueAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ValueAxis.java,405,409,7,/**\n\n   * Sets the flag indicating whether or not a crosshair is visible for this axis.\n\n   * @param flag The new value of the flag.\n\n   */,8,  public void setCrosshairVisible(boolean flag) {\n\n    if (this.crosshairVisible!=flag) {\n\n      this.crosshairVisible=flag;\n\n      notifyListeners(new AxisChangeEvent(this));\n\n
3606,isGridLinesVisible,ValueAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ValueAxis.java,313,314,7,"/**\n\n   * Returns true if the grid lines are showing, and false otherwise.\n\n   * @return True if the grid lines are showing, and false otherwise.\n\n   */",4,  public boolean isGridLinesVisible() {\n\n  return gridLinesVisible;\n\n
3607,getGridPaint,ValueAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ValueAxis.java,360,361,7,/**\n\n   * Returns the grid line color.\n\n   * @return The grid line color.\n\n   */,4,  public Paint getGridPaint() {\n\n  return gridPaint;\n\n
3608,setGridLinesVisible,ValueAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ValueAxis.java,322,326,9,/**\n\n   * Sets the visibility of the grid lines and notifies registered listeners that the axis has\n\n   * been modified.\n\n   * @param flag The new setting.\n\n   */,8,  public void setGridLinesVisible(boolean flag) {\n\n    if (gridLinesVisible!=flag) {\n\n      gridLinesVisible = flag;\n\n    notifyListeners(new AxisChangeEvent(this));\n\n
3609,setCrosshairValue,ValueAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ValueAxis.java,448,451,11,/**\n\n   * Sets the crosshair value for the axis.\n\n   * <P>\n\n   * Registered listeners are notified that the axis has been modified.\n\n   * @param value The new value (null permitted).\n\n   */,6,  public void setCrosshairValue(double value) {\n\n    this.crosshairValue = value;\n\n    notifyListeners(new AxisChangeEvent(this));\n\n
3610,setMaximumAxisValue,ValueAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ValueAxis.java,260,265,11,/**\n\n   * Sets the maximum value for the axis.\n\n   * <P>\n\n   * Registered listeners are notified that the axis has been modified.\n\n   * @param value The new maximum.\n\n   */,10,  public void setMaximumAxisValue(double value) {\n\n  if (this.maximumAxisValue!=value) {\n\n    this.maximumAxisValue = value;\n\n      this.autoRange = false;\n\n      notifyListeners(new AxisChangeEvent(this));\n\n
3611,getMinimumAxisValue,ValueAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ValueAxis.java,227,228,7,/**\n\n   * Returns the minimum value for the axis.\n\n   * @return The minimum value for the axis.\n\n   */,4,  public double getMinimumAxisValue() {\n\n  return minimumAxisValue;\n\n
3612,setAnchorValue,ValueAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ValueAxis.java,389,391,5,/**\n\n   * Sets the anchor value for this axis.\n\n   */,6,  public void setAnchorValue(double value) {\n\n    this.anchorValue = value;\n\n    notifyListeners(new AxisChangeEvent(this));\n\n
3613,setCrosshairStroke,ValueAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ValueAxis.java,467,469,9,/**\n\n   * Sets the Stroke used to draw the grid lines (if visible) and notifies registered listeners\n\n   * that the axis has been modified.\n\n   * @param stroke The new grid line stroke.\n\n   */,6,  public void setCrosshairStroke(Stroke stroke) {\n\n  crosshairStroke = stroke;\n\n  notifyListeners(new AxisChangeEvent(this));\n\n
3614,getCrosshairPaint,ValueAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ValueAxis.java,476,477,7,/**\n\n   * Returns the grid line color.\n\n   * @return The grid line color.\n\n   */,4,  public Paint getCrosshairPaint() {\n\n  return crosshairPaint;\n\n
3615,getCrosshairStroke,ValueAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ValueAxis.java,458,459,5,/**\n\n   * Returns the Stroke used to draw the crosshair (if visible).\n\n   */,4,  public Stroke getCrosshairStroke() {\n\n  return crosshairStroke;\n\n
3616,ValueAxis,ValueAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ValueAxis.java,127,146,7,"/**\n\n   * Constructs a value axis, using default values where necessary.\n\n   * @param label The axis label.\n\n   */",38,"  public ValueAxis(String label) {\n\n  this(label,\n\n       Axis.DEFAULT_AXIS_LABEL_FONT,\n\n       Axis.DEFAULT_AXIS_LABEL_PAINT,\n\n       Axis.DEFAULT_AXIS_LABEL_INSETS,\n\n       true, // tick labels visible\n\n       Axis.DEFAULT_TICK_LABEL_FONT,\n\n       Axis.DEFAULT_TICK_LABEL_PAINT,\n\n       Axis.DEFAULT_TICK_LABEL_INSETS,\n\n       true, // tick marks visible\n\n       Axis.DEFAULT_TICK_STROKE,\n\n       true, // auto range\n\n       true, // auto tick unit\n\n       true, // show grid lines\n\n       ValueAxis.DEFAULT_GRID_LINE_STROKE,\n\n       ValueAxis.DEFAULT_GRID_LINE_PAINT,\n\n       0.0,  // crosshair\n\n       ValueAxis.DEFAULT_CROSSHAIR_STROKE,\n\n       ValueAxis.DEFAULT_CROSSHAIR_PAINT);\n\n"
3617,getCrosshairValue,ValueAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ValueAxis.java,438,439,5,/**\n\n   * Returns the crosshair value.\n\n   */,4,  public double getCrosshairValue() {\n\n    return this.crosshairValue;\n\n
3618,getMaximumAxisValue,ValueAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ValueAxis.java,250,251,5,/**\n\n   * Returns the maximum value for the axis.\n\n   */,4,  public double getMaximumAxisValue() {\n\n  return maximumAxisValue;\n\n
3619,setAxisRange,ValueAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ValueAxis.java,275,280,9,/**\n\n   * Sets the axis range.\n\n   * @param lower The lower axis limit.\n\n   * @param upper The upper axis limit.\n\n   */,10,"  public void setAxisRange(double lower, double upper) {\n\n    this.autoRange = false;\n\n    this.minimumAxisValue = lower;\n\n    this.maximumAxisValue = upper;\n\n    notifyListeners(new AxisChangeEvent(this));\n\n"
3620,isCrosshairVisible,ValueAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ValueAxis.java,397,398,5,/**\n\n   * Returns a flag indicating whether or not a crosshair is visible for this axis.\n\n   */,4,  public boolean isCrosshairVisible() {\n\n    return this.crosshairVisible;\n\n
3621,setGridPaint,ValueAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ValueAxis.java,369,376,9,/**\n\n   * Sets the Paint used to color the grid lines (if visible) and notifies registered listeners\n\n   * that the axis has been modified.\n\n   * @param paint The new grid paint.\n\n   */,14,"  public void setGridPaint(Paint paint) {\n\n    // check arguments...\n\n    if (paint==null) {\n\n      throw new IllegalArgumentException(""ValueAxis.setGridPaint(...): null not permitted"");\n\n    }\n\n  gridPaint = paint;\n\n  notifyListeners(new AxisChangeEvent(this));\n\n"
3622,isAutoTickUnitSelection,ValueAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ValueAxis.java,289,290,9,/**\n\n   * Returns a flag indicating whether or not the tick unit is automatically selected from a\n\n   * range of standard tick units.\n\n   * @return A flag indicating whether or not the tick unit is automatically selected.\n\n   */,4,  public boolean isAutoTickUnitSelection() {\n\n  return autoTickUnitSelection;\n\n
3623,setGridStroke,ValueAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ValueAxis.java,343,352,9,/**\n\n   * Sets the Stroke used to draw the grid lines (if visible) and notifies registered listeners\n\n   * that the axis has been modified.\n\n   * @param stroke The new grid line stroke.\n\n   */,16,"  public void setGridStroke(Stroke stroke) {\n\n    // check arguments...\n\n    if (stroke==null) {\n\n      throw new IllegalArgumentException(""ValueAxis.setGridStroke(...): null not permitted"");\n\n    }\n\n    // make the change...\n\n    gridStroke = stroke;\n\n  notifyListeners(new AxisChangeEvent(this));\n\n"
3625,getGridStroke,ValueAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ValueAxis.java,334,335,5,/**\n\n   * Returns the Stroke used to draw the grid lines (if visible).\n\n   */,4,  public Stroke getGridStroke() {\n\n  return gridStroke;\n\n
3626,setMinimumAxisValue,ValueAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ValueAxis.java,237,242,11,/**\n\n   * Sets the minimum value for the axis.\n\n   * <P>\n\n   * Registered listeners are notified that the axis has been modified.\n\n   * @param value The new minimum.\n\n   */,10,  public void setMinimumAxisValue(double value) {\n\n  if (this.minimumAxisValue!=value) {\n\n    this.minimumAxisValue = value;\n\n      this.autoRange = false;\n\n      notifyListeners(new AxisChangeEvent(this));\n\n
3627,setAutoRange,ValueAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ValueAxis.java,213,218,9,"/**\n\n   * Sets a flag that determines whether or not the axis range is automatically adjusted to fit\n\n   * the data, and notifies registered listeners that the axis has been modified.\n\n   * @param auto Flag indicating whether or not the axis is automatically scaled to fit the data.\n\n   */",10,  public void setAutoRange(boolean auto) {\n\n  if (this.autoRange!=auto) {\n\n    this.autoRange=auto;\n\n    if (autoRange) autoAdjustRange();\n\n    notifyListeners(new AxisChangeEvent(this));\n\n
3628,setCrosshairLockedOnData,ValueAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ValueAxis.java,426,430,7,"/**\n\n   * Sets the flag indicating whether or not the crosshair should ""lock-on"" to actual data\n\n   * values.\n\n   */",8,  public void setCrosshairLockedOnData(boolean flag) {\n\n    if (this.crosshairLockedOnData!=flag) {\n\n      this.crosshairLockedOnData=flag;\n\n      notifyListeners(new AxisChangeEvent(this));\n\n
3629,setCrosshairPaint,ValueAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ValueAxis.java,485,487,9,/**\n\n   * Sets the Paint used to color the grid lines (if visible) and notifies registered listeners\n\n   * that the axis has been modified.\n\n   * @param paint The new grid paint.\n\n   */,6,  public void setCrosshairPaint(Paint paint) {\n\n  crosshairPaint = paint;\n\n  notifyListeners(new AxisChangeEvent(this));\n\n
3630,ValueAxis,ValueAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ValueAxis.java,173,196,45,/**\n\n   * Constructs a value axis.\n\n   * @param label The axis label.\n\n   * @param labelFont The font for displaying the axis label.\n\n   * @param labelPaint The paint used to draw the axis label.\n\n   * @param labelInsets Determines the amount of blank space around the label.\n\n   * @param tickLabelsVisible Flag indicating whether or not the tick labels are visible.\n\n   * @param tickLabelFont The font used to display tick labels.\n\n   * @param tickLabelPaint The paint used to draw tick labels.\n\n   * @param tickLabelInsets Determines the amount of blank space around tick labels.\n\n   * @param tickMarksVisible Flag indicating whether or not the tick marks are visible.\n\n   * @param tickMarkStroke The stroke used to draw tick marks (if visible).\n\n   * @param autoRange Flag indicating whether or not the axis range is automatically adjusted to\n\n   *          fit the data.\n\n   * @param autoTickUnitSelection A flag indicating whether or not the tick unit is automatically\n\n   *                selected.\n\n   * @param gridLinesVisible Flag indicating whether or not grid lines are visible.\n\n   * @param gridStroke The Stroke used to display grid lines (if visible).\n\n   * @param gridPaint The Paint used to display grid lines (if visible).\n\n   * @param crosshairValue The value at which to draw an optional crosshair (null permitted).\n\n   * @param crosshairStroke The pen/brush used to draw the crosshair.\n\n   * @param crosshairPaint The color used to draw the crosshair.\n\n   */,44,"  protected ValueAxis(String label,\n\n            Font labelFont, Paint labelPaint, Insets labelInsets,\n\n        boolean tickLabelsVisible,\n\n            Font tickLabelFont, Paint tickLabelPaint, Insets tickLabelInsets,\n\n        boolean tickMarksVisible, Stroke tickMarkStroke,\n\n        boolean autoRange, boolean autoTickUnitSelection,\n\n        boolean gridLinesVisible, Stroke gridStroke, Paint gridPaint,\n\n            double crosshairValue,\n\n            Stroke crosshairStroke, Paint crosshairPaint) {\n\n  super(label,\n\n        labelFont, labelPaint, labelInsets,\n\n      tickLabelsVisible,\n\n        tickLabelFont, tickLabelPaint, tickLabelInsets,\n\n      tickMarksVisible, tickMarkStroke);\n\n  this.autoRange = autoRange;\n\n  this.autoTickUnitSelection = autoTickUnitSelection;\n\n  this.gridLinesVisible = gridLinesVisible;\n\n  this.gridStroke = gridStroke;\n\n  this.gridPaint = gridPaint;\n\n    this.crosshairValue = crosshairValue;\n\n    this.crosshairStroke = crosshairStroke;\n\n    this.crosshairPaint = crosshairPaint;\n\n"
3631,isAutoRange,ValueAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ValueAxis.java,204,205,7,"/**\n\n   * Returns true if the axis range is automatically adjusted to fit the data, and false\n\n   * otherwise.\n\n   */",4,  public boolean isAutoRange() {\n\n  return autoRange;\n\n
3632,isCrosshairLockedOnData,ValueAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ValueAxis.java,418,419,7,"/**\n\n   * Returns a flag indicating whether or not the crosshair should ""lock-on"" to actual data\n\n   * values.\n\n   */",4,  public boolean isCrosshairLockedOnData() {\n\n    return this.crosshairLockedOnData;\n\n
3633,getAnchorValue,ValueAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ValueAxis.java,382,383,5,/**\n\n   * Returns the anchor value for this axis.\n\n   */,4,  public double getAnchorValue() {\n\n    return anchorValue;\n\n
3635,getNearestTickUnit,TickUnits,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/TickUnits.java,74,82,9,/**\n\n   * Returns the tick unit in the collection that is closest in size to the specified unit.\n\n   * @param unit The unit.\n\n   * @returns The unit in the collection that is closest in size to the specified unit.\n\n   */,16,"  public TickUnit getNearestTickUnit(TickUnit unit) {\n\n    int index = Collections.binarySearch(units, unit);\n\n    if (index>=0) {\n\n      return (TickUnit)units.get(index);\n\n    }\n\n    else {\n\n      index = -(index + 1);\n\n      return (TickUnit)units.get(Math.min(index, units.size()));\n\n"
3636,TickUnits,TickUnits,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/TickUnits.java,53,54,5,/**\n\n   * Constructs a new collection of tick units.\n\n   */,4,  public TickUnits() {\n\n    this.units = new ArrayList();\n\n
3637,add,TickUnits,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/TickUnits.java,62,65,9,/**\n\n   * Adds a tick unit to the collection.\n\n   * <P>\n\n   * The tick units are maintained in ascending order.\n\n   */,6,  public void add(TickUnit unit) {\n\n    units.add(unit);\n\n    Collections.sort(units);\n\n
3638,drawBar,VerticalBarRenderer3D,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalBarRenderer3D.java,78,177,7,/**\n\n   * Renders an individual bar...there are bug-fixes that have been applied to VerticalBarRenderer\n\n   * that need to be applied here too.\n\n   */,174,"  public Shape drawBar(Graphics2D g2, Rectangle2D dataArea, BarPlot plot, ValueAxis valueAxis,\n\n             CategoryDataset data, int series, Object category, int categoryIndex,\n\n             double translatedZero, double itemWidth,\n\n             double categorySpan, double categoryGapSpan,\n\n             double itemSpan, double itemGapSpan) {\n\n    Shape result = null;\n\n    // check the value we are plotting...\n\n    Number value = data.getValue(series, category);\n\n    if (value!=null) {\n\n      // BAR X\n\n      double rectX = dataArea.getX()+dataArea.getWidth()*plot.getIntroGapPercent();\n\n      int categories = data.getCategoryCount();\n\n      int seriesCount = data.getSeriesCount();\n\n      if (categories>1) {\n\n        rectX = rectX\n\n            // bars in completed categories\n\n            + categoryIndex*(categorySpan/categories)\n\n            // gaps between completed categories\n\n            + (categoryIndex*(categoryGapSpan/(categories-1))\n\n            // bars+gaps completed in current category\n\n            + (series*itemSpan/(categories*seriesCount)));\n\n        if (seriesCount>1) {\n\n          rectX = rectX\n\n              + (series*itemGapSpan/(categories*(seriesCount-1)));\n\n        }\n\n      }\n\n      else {\n\n        rectX = rectX\n\n            // bars+gaps completed in current category\n\n            + (series*itemSpan/(categories*seriesCount));\n\n        if (seriesCount>1) {\n\n          rectX = rectX\n\n              + (series*itemGapSpan/(categories*(seriesCount-1)));\n\n        }\n\n      }\n\n      // BAR Y\n\n      double translatedValue = valueAxis.translateValueToJava2D(value.doubleValue(), dataArea);\n\n      double rectY = Math.min(translatedZero, translatedValue);\n\n      // BAR WIDTH\n\n      double rectWidth = itemWidth;\n\n      // BAR HEIGHT\n\n      double rectHeight = Math.abs(translatedValue-translatedZero);\n\n      Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, rectHeight);\n\n      Paint seriesPaint = plot.getSeriesPaint(series);\n\n      g2.setPaint(seriesPaint);\n\n      g2.fill(bar);\n\n      result = bar;\n\n      GeneralPath bar3dRight = null;\n\n      GeneralPath bar3dTop = null;\n\n      double effect3d = 0.00;\n\n      VerticalAxis vAxis = plot.getVerticalAxis();\n\n      if (rectHeight != 0 && vAxis instanceof VerticalNumberAxis3D) {\n\n        effect3d = ((VerticalNumberAxis3D) vAxis).getEffect3d();\n\n        bar3dRight = new GeneralPath();\n\n        bar3dRight.moveTo((float)(rectX+rectWidth), (float)rectY);\n\n        bar3dRight.lineTo((float)(rectX+rectWidth), (float)(rectY+rectHeight));\n\n        bar3dRight.lineTo((float)(rectX+rectWidth+effect3d),\n\n                  (float)(rectY+rectHeight-effect3d));\n\n        bar3dRight.lineTo((float)(rectX+rectWidth+effect3d), (float)(rectY-effect3d));\n\n        if (seriesPaint instanceof Color) {\n\n          g2.setPaint( ((Color) seriesPaint).darker());\n\n        }\n\n        g2.fill(bar3dRight);\n\n        bar3dTop = new GeneralPath();\n\n        bar3dTop.moveTo( (float) rectX, (float) rectY);\n\n        bar3dTop.lineTo((float) (rectX+effect3d), (float) (rectY-effect3d));\n\n        bar3dTop.lineTo((float) (rectX+rectWidth+effect3d), (float) (rectY-effect3d));\n\n        bar3dTop.lineTo((float) (rectX+rectWidth), (float) (rectY) );\n\n        if (seriesPaint instanceof Color) {\n\n          g2.setPaint( ((Color) seriesPaint)); //.brighter());\n\n        }\n\n        g2.fill(bar3dTop);\n\n      }\n\n      if (itemWidth>3) {\n\n        g2.setStroke(plot.getSeriesOutlineStroke(series));\n\n        //g2.setStroke(new BasicStroke(0.25f));\n\n        g2.setPaint(plot.getSeriesOutlinePaint(series));\n\n        g2.draw(bar);\n\n        if (bar3dRight != null) {\n\n          g2.draw(bar3dRight);\n\n        }\n\n        if (bar3dTop != null) {\n\n          g2.draw(bar3dTop);\n\n        }\n\n      }\n\n    }\n\n    return result;\n\n"
3639,hasItemGaps,VerticalBarRenderer3D,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalBarRenderer3D.java,62,63,5,"/**\n\n   * Returns true, since there are (potentially) gaps between bars in this representation.\n\n   */",4,  public boolean hasItemGaps() {\n\n    return true;\n\n
3641,barWidthsPerCategory,VerticalBarRenderer3D,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalBarRenderer3D.java,70,71,7,/**\n\n   * This will be a method in the renderer that tells whether there is one bar width per category\n\n   * or onebarwidth per series per category.\n\n   */,4,  public int barWidthsPerCategory(CategoryDataset data) {\n\n    return data.getSeriesCount();\n\n
3642,drawBar,VerticalBarRenderer,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalBarRenderer.java,92,154,37,/**\n\n   * Handles the rendering of a single bar.\n\n   * @param g2\n\n   * @param dataArea\n\n   * @param plot\n\n   * @param valueAxis\n\n   * @param data\n\n   * @param series\n\n   * @param category\n\n   * @param categoryIndex\n\n   * @param translatedZero\n\n   * @param itemWidth\n\n   * @param categorySpan\n\n   * @param categoryGapSpan\n\n   * @param itemSpan\n\n   * @param itemGapSpan\n\n   * @return A shape representing the area in which the bar is drawn (one use for this is\n\n   *     supporting tooltips).\n\n   */,108,"  public Shape drawBar(Graphics2D g2, Rectangle2D dataArea, BarPlot plot, ValueAxis valueAxis,\n\n             CategoryDataset data, int series, Object category, int categoryIndex,\n\n             double translatedZero, double itemWidth,\n\n             double categorySpan, double categoryGapSpan,\n\n             double itemSpan, double itemGapSpan) {\n\n    Shape result = null;\n\n    // first check the value we are plotting...\n\n    Number value = data.getValue(series, category);\n\n    if (value!=null) {\n\n      // BAR X\n\n      double rectX = dataArea.getX()+dataArea.getWidth()*plot.getIntroGapPercent();\n\n      int categories = data.getCategoryCount();\n\n      int seriesCount = data.getSeriesCount();\n\n      if (categories>1) {\n\n        rectX = rectX\n\n            // bars in completed categories\n\n            + categoryIndex*(categorySpan/categories)\n\n            // gaps between completed categories\n\n            + (categoryIndex*(categoryGapSpan/(categories-1))\n\n            // bars+gaps completed in current category\n\n            + (series*itemSpan/(categories*seriesCount)));\n\n        if (seriesCount>1) {\n\n          rectX = rectX\n\n              + (series*itemGapSpan/(categories*(seriesCount-1)));\n\n        }\n\n      }\n\n      else {\n\n        rectX = rectX\n\n            // bars+gaps completed in current category\n\n            + (series*itemSpan/(categories*seriesCount));\n\n        if (seriesCount>1) {\n\n          rectX = rectX\n\n              + (series*itemGapSpan/(categories*(seriesCount-1)));\n\n        }\n\n      }\n\n      // BAR Y\n\n      double translatedValue = valueAxis.translateValueToJava2D(value.doubleValue(), dataArea);\n\n      double rectY = Math.min(translatedZero, translatedValue);\n\n      // BAR WIDTH\n\n      double rectWidth = itemWidth;\n\n      // BAR HEIGHT\n\n      double rectHeight = Math.abs(translatedValue-translatedZero);\n\n      Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, rectHeight);\n\n      Paint seriesPaint = plot.getSeriesPaint(series);\n\n      g2.setPaint(seriesPaint);\n\n      g2.fill(bar);\n\n      if (itemWidth>3) {\n\n        g2.setStroke(plot.getSeriesStroke(series));\n\n        g2.setPaint(plot.getSeriesOutlinePaint(series));\n\n        g2.draw(bar);\n\n      }\n\n      result = bar;\n\n    }\n\n    return result;\n\n"
3643,hasItemGaps,VerticalBarRenderer,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalBarRenderer.java,61,62,5,"/**\n\n   * Returns true, since for this renderer there are gaps between the items in one category.\n\n   */",4,  public boolean hasItemGaps() {\n\n    return true;\n\n
3644,barWidthsPerCategory,VerticalBarRenderer,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalBarRenderer.java,69,70,7,"/**\n\n   * Returns the number of bar-widths displayed in each category.  For this renderer, there is one\n\n   * bar per series, so we return the number of series.\n\n   */",4,  public int barWidthsPerCategory(CategoryDataset data) {\n\n    return data.getSeriesCount();\n\n
3645,draw,VerticalCategoryAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalCategoryAxis.java,118,151,11,/**\n\n   * Draws the CategoryAxis on a Java 2D graphics device (such as the screen or a printer).\n\n   * @param g2 The graphics device.\n\n   * @param drawArea The area within which the axis should be drawn.\n\n   * @param plotArea The area within which the plot is being drawn.\n\n   */,64,"  public void draw(Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {\n\n  // draw the axis label\n\n  if (label!=null) {\n\n      g2.setFont(labelFont);\n\n    g2.setPaint(labelPaint);\n\n    FontRenderContext frc = g2.getFontRenderContext();\n\n    LineMetrics metrics = labelFont.getLineMetrics(label, frc);\n\n    Rectangle2D labelBounds = labelFont.getStringBounds(label, frc);\n\n    if (verticalLabel) {\n\n      double xx = drawArea.getX()+labelInsets.left\n\n                       +metrics.getHeight()\n\n                       -metrics.getDescent()\n\n                   -metrics.getLeading();\n\n      double yy = plotArea.getY()+plotArea.getHeight()/2\n\n                       +(labelBounds.getWidth()/2);\n\n      drawVerticalString(label, g2, (float)xx, (float)yy);\n\n    }\n\n    else {\n\n      double xx = drawArea.getX()+labelInsets.left;\n\n      double yy = drawArea.getY()+drawArea.getHeight()/2-labelBounds.getHeight()/2;\n\n      g2.drawString(label, (float)xx, (float)yy);\n\n    }\n\n    }\n\n  // draw the category labels\n\n  if (this.tickLabelsVisible) {\n\n    g2.setFont(tickLabelFont);\n\n    g2.setPaint(tickLabelPaint);\n\n    this.refreshTicks(g2, drawArea, plotArea);\n\n    Iterator iterator = ticks.iterator();\n\n    while (iterator.hasNext()) {\n\n    Tick tick = (Tick)iterator.next();\n\n    g2.drawString(tick.getText(), tick.getX(), tick.getY());\n\n"
3646,isCompatiblePlot,VerticalCategoryAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalCategoryAxis.java,263,265,7,"/**\n\n   * Returns true if the specified plot is compatible with the axis, and false otherwise.\n\n   * @param plot The plot;\n\n   */",6,  protected boolean isCompatiblePlot(Plot plot) {\n\n    if (plot instanceof CategoryPlot) return true;\n\n    else return false;\n\n
3647,refreshTicks,VerticalCategoryAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalCategoryAxis.java,163,185,11,/**\n\n   * Creates a temporary list of ticks that can be used when drawing the axis.\n\n   * @param g2 The graphics device (used to get font measurements).\n\n   * @param drawArea The area where the plot and axes will be drawn.\n\n   * @param plotArea The area inside the axes.\n\n   */,42,"  public void refreshTicks(Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {\n\n  this.ticks.clear();\n\n  CategoryPlot categoryPlot = (CategoryPlot)plot;\n\n    Dataset data = categoryPlot.getDataset();\n\n    if (data!=null) {\n\n      Font font = this.getTickLabelFont();\n\n    g2.setFont(font);\n\n    FontRenderContext frc = g2.getFontRenderContext();\n\n    int categoryIndex = 0;\n\n    Iterator iterator = categoryPlot.getDataset().getCategories().iterator();\n\n      while (iterator.hasNext()) {\n\n      Object category = iterator.next();\n\n      String label = category.toString();\n\n      Rectangle2D labelBounds = font.getStringBounds(label, frc);\n\n      LineMetrics metrics = font.getLineMetrics(label, frc);\n\n      float xx = (float)(plotArea.getX()-tickLabelInsets.right-labelBounds.getWidth());\n\n      float yy = (float)(categoryPlot.getCategoryCoordinate(categoryIndex, plotArea)\n\n                  -metrics.getStrikethroughOffset()+0.5f);\n\n      Tick tick = new Tick(category, label, xx, yy);\n\n      ticks.add(tick);\n\n      categoryIndex = categoryIndex+1;\n\n"
3648,VerticalCategoryAxis,VerticalCategoryAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalCategoryAxis.java,96,108,27,/**\n\n   * Full constructor: returns a new VerticalCategoryAxis with attributes as specified by the\n\n   * caller.\n\n   * @param label The axis label.\n\n   * @param labelFont The font for displaying the axis label.\n\n   * @param labelPaint The paint used to draw the axis label.\n\n   * @param labelInsets Determines the amount of blank space around the label.\n\n   * @param verticalLabel Flag indicating whether or not the axis label is drawn vertically.\n\n   * @param categoryLabelsVisible Flag indicating whether or not category labels are visible.\n\n   * @param categoryLabelFont The font used to display category labels.\n\n   * @param categoryLabelPaint The paint used to draw category labels.\n\n   * @param tickMarksVisible Flag indicating whether or not tick marks are visible.\n\n   * @param tickMarkStroke The stroke used to draw tick marks (if visible).\n\n   */,22,"  public VerticalCategoryAxis(String label,\n\n                Font labelFont, Paint labelPaint, Insets labelInsets,\n\n        boolean verticalLabel,\n\n        boolean categoryLabelsVisible,\n\n                Font categoryLabelFont, Paint categoryLabelPaint,\n\n                Insets categoryLabelInsets,\n\n        boolean tickMarksVisible, Stroke tickMarkStroke) {\n\n  super(label, labelFont, labelPaint, labelInsets,\n\n      categoryLabelsVisible, categoryLabelFont, categoryLabelPaint, categoryLabelInsets,\n\n      tickMarksVisible, tickMarkStroke);\n\n  this.verticalLabel = verticalLabel;\n\n"
3649,VerticalCategoryAxis,VerticalCategoryAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalCategoryAxis.java,66,78,7,"/**\n\n   * Constructs a VerticalCategoryAxis, using default attributes where necessary.\n\n   * @param label The axis label.\n\n   */",24,"  public VerticalCategoryAxis(String label) {\n\n    this(label,\n\n       Axis.DEFAULT_AXIS_LABEL_FONT,\n\n       Axis.DEFAULT_AXIS_LABEL_PAINT,\n\n       Axis.DEFAULT_TICK_LABEL_INSETS,\n\n       true, // vertical label\n\n       true, // category labels visible\n\n       Axis.DEFAULT_TICK_LABEL_FONT,\n\n       Axis.DEFAULT_TICK_LABEL_PAINT,\n\n       Axis.DEFAULT_TICK_LABEL_INSETS,\n\n       false, // tick marks visible\n\n       Axis.DEFAULT_TICK_STROKE);\n\n"
3650,reserveWidth,VerticalCategoryAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalCategoryAxis.java,199,221,17,"/**\n\n   * Estimates the height required for the axis, given a specific drawing area, without any\n\n   * information about the width of the vertical axis.\n\n   * <P>\n\n   * Supports the HorizontalAxisLead interface.\n\n   * @param g2 The graphics device (used to obtain font information).\n\n   * @param drawArea The area within which the axis should be drawn.\n\n   * @param plot The plot that the axis belongs to.\n\n   */",42,"  public double reserveWidth(Graphics2D g2, Plot plot, Rectangle2D drawArea) {\n\n  // calculate the width of the axis label...\n\n    double labelWidth = 0.0;\n\n    if (label!=null) {\n\n    Rectangle2D labelBounds = labelFont.getStringBounds(label, g2.getFontRenderContext());\n\n    labelWidth = this.labelInsets.left+labelInsets.right;\n\n    if (this.verticalLabel) {\n\n      // assume width == height before rotation\n\n        labelWidth = labelWidth + labelBounds.getHeight();\n\n    }\n\n    else {\n\n      labelWidth = labelWidth + labelBounds.getWidth();\n\n    }\n\n    }\n\n  // calculate the width required for the tick labels (if visible);\n\n  double tickLabelWidth = tickLabelInsets.left+tickLabelInsets.right;\n\n  if (tickLabelsVisible) {\n\n    this.refreshTicks(g2, drawArea, drawArea);\n\n    tickLabelWidth = tickLabelWidth+getMaxTickLabelWidth(g2, drawArea);\n\n  }\n\n  return labelWidth+tickLabelWidth;\n\n"
3651,reserveAxisArea,VerticalCategoryAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalCategoryAxis.java,231,256,11,/**\n\n   * Returns the area required to draw the axis in the specified draw area.\n\n   * @param g2 The graphics device;\n\n   * @param drawArea The area within which the plot should be drawn;\n\n   * @param reservedHeight The height reserved by the horizontal axis.\n\n   */,46,"  public Rectangle2D reserveAxisArea(Graphics2D g2, Plot plot, Rectangle2D drawArea,\n\n             double reservedHeight) {\n\n    // calculate the width of the axis label...\n\n    double labelWidth = 0.0;\n\n    if (label!=null) {\n\n    Rectangle2D labelBounds = labelFont.getStringBounds(label, g2.getFontRenderContext());\n\n    labelWidth = this.labelInsets.left+labelInsets.right;\n\n    if (this.verticalLabel) {\n\n        // assume width == height before rotation\n\n      labelWidth = labelWidth + labelBounds.getHeight();\n\n    }\n\n    else {\n\n      labelWidth = labelWidth + labelBounds.getWidth();\n\n    }\n\n    }\n\n  // calculate the width required for the tick labels (if visible);\n\n  double tickLabelWidth = tickLabelInsets.left+tickLabelInsets.right;\n\n  if (tickLabelsVisible) {\n\n    this.refreshTicks(g2, drawArea, drawArea);\n\n    tickLabelWidth = tickLabelWidth+getMaxTickLabelWidth(g2, drawArea);\n\n  }\n\n  return new Rectangle2D.Double(drawArea.getX(), drawArea.getY(), labelWidth+tickLabelWidth,\n\n            drawArea.getHeight()-reservedHeight);\n\n"
3652,isCompatibleVerticalAxis,VerticalBarPlot3D,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalBarPlot3D.java,102,106,9,"/**\n\n   * Checks the compatibility of a vertical axis, returning true if the axis is compatible with\n\n   * the plot, and false otherwise.\n\n   * @param axis The vertical axis;\n\n   */",10,  public boolean isCompatibleVerticalAxis(Axis axis) {\n\n  if (axis instanceof VerticalNumberAxis3D) {\n\n    return true;\n\n  }\n\n  else return false;\n\n
3653,VerticalBarPlot3D,VerticalBarPlot3D,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalBarPlot3D.java,65,70,9,/**\n\n   * Constructs a vertical bar plot with 3D effect.\n\n   * @param horizontalAxis The horizontal axis.\n\n   * @param verticalAxis The vertical axis.\n\n   */,10,"  public VerticalBarPlot3D(CategoryAxis horizontalAxis, ValueAxis verticalAxis) {\n\n  this(horizontalAxis, verticalAxis,\n\n       Plot.DEFAULT_INSETS,\n\n       0.1, 0.1, 0.2, 0.0,\n\n       null);\n\n"
3654,calculateBackgroundPlotArea,VerticalBarPlot3D,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalBarPlot3D.java,112,132,5,/**\n\n   * Returns the shape of the background for the 3D-effect bar plot.\n\n   */,36,"  protected Shape calculateBackgroundPlotArea(Rectangle2D plotArea) {\n\n  VerticalAxis vAxis = getVerticalAxis();\n\n  double effect3d = ((VerticalNumberAxis3D) vAxis).getEffect3d();\n\n    GeneralPath backgroundPlotArea = new GeneralPath();\n\n    backgroundPlotArea.moveTo((float) plotArea.getX(), (float)plotArea.getY());\n\n    backgroundPlotArea.lineTo((float)(plotArea.getX()+effect3d),\n\n                  (float)(plotArea.getY()-effect3d));\n\n    backgroundPlotArea.lineTo((float)(plotArea.getX()+plotArea.getWidth()),\n\n                  (float)(plotArea.getY()-effect3d));\n\n    backgroundPlotArea.lineTo((float)(plotArea.getX()+plotArea.getWidth()),\n\n                  (float)(plotArea.getY()+plotArea.getHeight()-effect3d));\n\n    backgroundPlotArea.lineTo((float)(plotArea.getX()+plotArea.getWidth()-effect3d),\n\n                  (float)(plotArea.getY()+plotArea.getHeight()));\n\n    backgroundPlotArea.lineTo((float) plotArea.getX(),\n\n                  (float)(plotArea.getY()+plotArea.getHeight()));\n\n    backgroundPlotArea.lineTo((float) plotArea.getX(),\n\n                  (float) plotArea.getY());\n\n    return backgroundPlotArea;\n\n"
3655,VerticalBarPlot3D,VerticalBarPlot3D,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalBarPlot3D.java,84,93,19,/**\n\n   * Constructs a vertical bar plot with 3D effect.\n\n   * @param horizontalAxis The horizontal axis.\n\n   * @param verticalAxis The vertical axis.\n\n   * @param introGap The gap before the first bar in the plot.\n\n   * @param trailGap The gap after the last bar in the plot.\n\n   * @param categoryGap The gap between the last bar in one category and the first bar in the next\n\n   *          category.\n\n   * @param seriesGap The gap between bars within the same category.\n\n   */,18,"  public VerticalBarPlot3D(CategoryAxis horizontalAxis, ValueAxis verticalAxis,\n\n               Insets insets,\n\n         double introGap, double trailGap,\n\n               double categoryGap, double seriesGap,\n\n               CategoryToolTipGenerator toolTipGenerator) {\n\n  super(horizontalAxis, verticalAxis,\n\n        insets,\n\n      introGap, trailGap, categoryGap, seriesGap,\n\n        toolTipGenerator);\n\n"
3656,drawBars,VerticalBarPlot3D,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/VerticalBarPlot3D.java,139,157,5,/**\n\n   * Draws the bars...\n\n   */,36,"  protected void drawBars(Graphics2D g2, Shape backgroundPlotArea, Rectangle2D plotArea,\n\n              DrawInfo info) {\n\n    VerticalAxis vAxis = getVerticalAxis();\n\n  double effect3d = ((VerticalNumberAxis3D) vAxis).getEffect3d();\n\n    // draw far 3d axis\n\n  if ((outlineStroke!=null) && (outlinePaint!=null)) {\n\n    g2.setStroke(outlineStroke);\n\n    g2.setPaint(outlinePaint);\n\n    g2.draw(new Line2D.Double(plotArea.getX()+effect3d, plotArea.getY()-effect3d,\n\n              plotArea.getX()+effect3d, plotArea.getY()+plotArea.getHeight()-effect3d));\n\n    g2.draw(new Line2D.Double(plotArea.getX(), plotArea.getY()+plotArea.getHeight(),\n\n              plotArea.getX()+effect3d, plotArea.getY()+plotArea.getHeight()-effect3d));\n\n    g2.draw(new Line2D.Double(plotArea.getX()+effect3d,\n\n                    plotArea.getY()+plotArea.getHeight()-effect3d,\n\n                    plotArea.getX()+plotArea.getWidth(),\n\n                    plotArea.getY()+plotArea.getHeight()-effect3d));\n\n  }\n\n  super.drawBars(g2, backgroundPlotArea, plotArea, info);\n\n"
3657,getTitle,Title,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Title.java,77,78,5,/**\n\n   * Returns the title text.\n\n   */,4,  public String getTitle() {\n\n  return this.title;\n\n
3658,addChangeListener,Title,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Title.java,95,96,7,/**\n\n   * Registers an object for notification of changes to the title.\n\n   * @param listener The object that is being registered.\n\n   */,4,  public void addChangeListener(TitleChangeListener listener) {\n\n  listeners.add(listener);\n\n
3659,Title,Title,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Title.java,69,71,5,/**\n\n   * Standard constructor - builds a Title object.\n\n   */,6,  protected Title(String title) {\n\n  this.title = title;\n\n  this.listeners = new java.util.ArrayList();\n\n
3661,removeChangeListener,Title,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Title.java,103,104,7,/**\n\n   * Unregisters an object for notification of changes to the chart title.\n\n   * @param listener The object that is being unregistered.\n\n   */,4,  public void removeChangeListener(TitleChangeListener listener) {\n\n  listeners.remove(listener);\n\n
3662,setTitle,Title,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Title.java,86,87,9,/**\n\n   * Sets the title to the specified text and notifies registered listeners that the title has\n\n   * been modified.\n\n   * @param text The new chart title;\n\n   */,4,  public void setTitle(String text) {\n\n  this.title = text;\n\n
3663,createInstance,Title,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/Title.java,62,63,9,/**\n\n   * Static factory method that returns a concrete subclass of Title.\n\n   * @param title The chart title;\n\n   * @param font The font for displaying the chart title;\n\n   */,4,"  public static Title createInstance(String title, Font font) {\n\n  return new StandardTitle(title, font);\n\n"
3664,setChart,ChartChangeEvent,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/event/ChartChangeEvent.java,111,112,7,/**\n\n   * Sets the chart that generated the change event.\n\n   * @param chart The chart that generated the event.\n\n   */,4,  public void setChart(JFreeChart chart) {\n\n    this.chart = chart;\n\n
3665,ChartChangeEvent,ChartChangeEvent,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/event/ChartChangeEvent.java,87,88,9,"/**\n\n   * Standard constructor: returns a new ChartChangeEvent object, type GENERAL.\n\n   * @param source The source of the event (could be the chart, a title, an axis etc.);\n\n   * @param chart The chart that generated the event;\n\n   */",4,"  public ChartChangeEvent(Object source, JFreeChart chart) {\n\n    this(source, chart, GENERAL);\n\n"
3666,ChartChangeEvent,ChartChangeEvent,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/event/ChartChangeEvent.java,94,97,5,/**\n\n   * Full constructor: returns a new ChartChangeEvent object with the specified type.\n\n   */,8,"  public ChartChangeEvent(Object source, JFreeChart chart, int type) {\n\n    super(source);\n\n    this.chart = chart;\n\n    this.type = type;\n\n"
3667,ChartChangeEvent,ChartChangeEvent,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/event/ChartChangeEvent.java,78,79,7,"/**\n\n   * Standard constructor: returns a new ChartChangeEvent object, type GENERAL.\n\n   * @param source The source of the event (could be the chart, a title, an axis etc.)\n\n   */",4,"  public ChartChangeEvent(Object source) {\n\n    this(source, null, GENERAL);\n\n"
3668,getType,ChartChangeEvent,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/event/ChartChangeEvent.java,118,119,5,/**\n\n   * Returns the event type.\n\n   */,4,  public int getType() {\n\n    return this.type;\n\n
3669,getChart,ChartChangeEvent,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/event/ChartChangeEvent.java,103,104,5,/**\n\n   * Returns a reference to the chart that generated the change event.\n\n   */,4,  public JFreeChart getChart() {\n\n    return chart;\n\n
3670,AxisChangeEvent,AxisChangeEvent,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/event/AxisChangeEvent.java,55,57,7,/**\n\n   * Default constructor: returns a new AxisChangeEvent.\n\n   * @param axis The axis that generated the event.\n\n   */,6,  public AxisChangeEvent(Axis axis) {\n\n    super(axis);\n\n    this.axis = axis;\n\n
3671,setRange,CombinedHorizontalDateAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedHorizontalDateAxis.java,214,223,12,/**\n\n   * Sets our AxisRange (min/max). This is done after a CombinedPlot has\n\n   * has calculated the overall range of all CombinedAxis that share the same\n\n   * Axis for all Plots. This makes all plots display the complete range of\n\n   * their Datasets.\n\n   */\n,18,  public void setRange(AxisRange range) {\n\n    setAutoRange(false);\n\n    setMinimumDate((Date)range.getMin());\n\n    setMaximumDate((Date)range.getMax());\n\n    if (visible) {\n\n      HorizontalDateAxis axis = (HorizontalDateAxis)getParentAxis();\n\n      axis.setAutoRange(false);\n\n      axis.setMinimumDate((Date)range.getMin());\n\n      axis.setMaximumDate((Date)range.getMax());\n\n
3672,setVisible,CombinedHorizontalDateAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedHorizontalDateAxis.java,233,234,18,"/**\n\n   * Sets the visible flag on or off for this combined axis. A visible axis will\n\n   * display the axis title, ticks and legend depending on the parent's\n\n   * attributes. An invisible axis will not display anything. If the invisible\n\n   * axis isContainer(), then it occupies space on the graphic device.\n\n   */\n\n --------------\n\n//////////////////////////////////////////////////////////////////////////////\n\n --------------\n",4,  public void setVisible(boolean flag) {\n\n    visible = flag;\n\n
3673,draw,CombinedHorizontalDateAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedHorizontalDateAxis.java,118,133,15,"/**\n\n   * If axis is not visible, just draws grid lines if needed, but no horizonatal\n\n   * date axis labels.\n\n   * @param g2 The graphics device;\n\n   * @param drawArea The area within which the chart should be drawn;\n\n   * @param plotArea The area within which the plot should be drawn (a subset of the drawArea).\n\n   */\n\n",30,"  public void draw(Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {\n\n    if (visible) {\n\n      axis.draw(g2, drawArea, plotArea);\n\n    }\n\n    else if (gridLinesVisible) {\n\n      refreshTicks(g2, drawArea, plotArea);\n\n      g2.setStroke(gridStroke);\n\n      g2.setPaint(gridPaint);\n\n      Iterator iterator = ticks.iterator();\n\n      while (iterator.hasNext()) {\n\n        Tick tick = (Tick)iterator.next();\n\n        float xx = (float)translateValueToJava2D(tick.getNumericalValue(), plotArea);\n\n        Line2D gridline = new Line2D.Float(xx, (float)plotArea.getMaxY(),\n\n                           xx, (float)plotArea.getMinY());\n\n        g2.draw(gridline);\n\n"
3674,isVisible,CombinedHorizontalDateAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedHorizontalDateAxis.java,240,241,5,/**\n\n   * Is this axis visible? Is is drawn?\n\n   */,4,  public boolean isVisible() {\n\n    return visible;\n\n
3675,CombinedHorizontalDateAxis,CombinedHorizontalDateAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedHorizontalDateAxis.java,77,103,9,/**\n\n   * Constructs a combined horizontal date axis.\n\n   * @param axis Parent HorizontalDateAxis to take as reference.\n\n   * @param visible Indicates if the axis is visible.\n\n   */,52,"  public CombinedHorizontalDateAxis(HorizontalDateAxis axis, boolean visible) {\n\n    super(axis.getLabel(),\n\n        axis.getLabelFont(),\n\n        axis.getLabelPaint(),\n\n        axis.getLabelInsets(),\n\n        axis.isTickLabelsVisible(),\n\n        axis.getTickLabelFont(),\n\n        axis.getTickLabelPaint(),\n\n        axis.getTickLabelInsets(),\n\n        axis.getVerticalTickLabels(),\n\n        axis.isTickMarksVisible(),\n\n        axis.getTickMarkStroke(),\n\n        axis.isAutoRange(),\n\n        axis.getMinimumDate(),\n\n        axis.getMaximumDate(),\n\n        axis.isAutoTickUnitSelection(),\n\n        axis.getTickUnit(),\n\n        axis.getTickLabelFormatter(),\n\n        axis.isGridLinesVisible(),\n\n        axis.getGridStroke(),\n\n        axis.getGridPaint(),\n\n        axis.getCrosshairDate(),\n\n        axis.getCrosshairStroke(),\n\n        axis.getCrosshairPaint());\n\n    this.axis = axis;\n\n    this.visible = visible;\n\n"
3676,reserveHeight,CombinedHorizontalDateAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedHorizontalDateAxis.java,149,158,13,"/**\n\n   * Returns the height required to draw the axis in the specified draw area. If\n\n   * the axis is not visible, returns zero.\n\n   * @param g2 The graphics device;\n\n   * @param plot The plot that the axis belongs to;\n\n   * @param drawArea The area within which the plot should be drawn;\n\n   */",18,"  public double reserveHeight(Graphics2D g2, Plot plot, Rectangle2D drawArea) {\n\n    if (!visible) {\n\n      return 0;\n\n    }\n\n    else if (reserveHeight > 0) {\n\n      return reserveHeight;\n\n    }\n\n    else {\n\n      return axis.reserveHeight(g2, plot, drawArea);\n\n"
3677,getParentAxis,CombinedHorizontalDateAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedHorizontalDateAxis.java,187,188,5,/**\n\n   * Returns our parent axis.\n\n   */,4,  public Axis getParentAxis() {\n\n    return axis;\n\n
3678,getRange,CombinedHorizontalDateAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedHorizontalDateAxis.java,194,205,5,/**\n\n   * Returns the AxisRange (min/max) of our Axis\n\n   */,22,"  public AxisRange getRange() {\n\n    DateAxisRange range;\n\n    if (visible) {\n\n      axis.autoAdjustRange();\n\n      range = new DateAxisRange(axis.getMinimumDate(), axis.getMaximumDate());\n\n    }\n\n    else {\n\n      autoAdjustRange();\n\n      range = new DateAxisRange(getMinimumDate(), getMaximumDate());\n\n    }\n\n    return (range);\n\n"
3679,reserveAxisArea,CombinedHorizontalDateAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedHorizontalDateAxis.java,170,176,16,/**\n\n   * Returns area in which the axis will be displayed. If the axis is not visible\n\n   * returns a zero size rectangle.\n\n   * @param g2 The graphics device;\n\n   * @param plot A reference to the plot;\n\n   * @param drawArea The area within which the plot and axes should be drawn;\n\n   * @param reservedWidth The space already reserved for the vertical axis;\n\n   */\n,14,"  public Rectangle2D reserveAxisArea(Graphics2D g2, Plot plot, Rectangle2D drawArea,\n\n                     double reservedWidth) {\n\n    if (visible) {\n\n      return axis.reserveAxisArea(g2, plot, drawArea, reservedWidth);\n\n    }\n\n    else {\n\n      return new Rectangle2D.Double();\n\n"
3680,reserveHeight,OverlaidHorizontalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/OverlaidHorizontalNumberAxis.java,110,119,14,/**\n\n   * Returns the height required to draw the axis in the specified draw area. The\n\n   * list of our axes is checked and the first non zero height is returned.\n\n   * @param g2 The graphics device;\n\n   * @param plot The plot that the axis belongs to;\n\n   * @param drawArea The area within which the plot should be drawn;\n\n   */\n,20,"  public double reserveHeight(Graphics2D g2, Plot plot, Rectangle2D drawArea) {\n\n    Iterator iter = axes.iterator();\n\n    while (iter.hasNext()) {\n\n      HorizontalAxis axis = (HorizontalAxis)iter.next();\n\n      double height = axis.reserveHeight(g2, plot, drawArea);\n\n      if (height != 0) {\n\n        return height;\n\n      }\n\n    }\n\n    return 0;\n\n"
3681,reserveAxisArea,OverlaidHorizontalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/OverlaidHorizontalNumberAxis.java,130,141,15,/**\n\n   * Returns area in which the axis will be displayed. The list is our axes is\n\n   * checked and the first non zero area is returned.\n\n   * @param g2 The graphics device;\n\n   * @param plot A reference to the plot;\n\n   * @param drawArea The area within which the plot and axes should be drawn;\n\n   * @param reservedWidth The space already reserved for the vertical axis;\n\n   */,24,"  public Rectangle2D reserveAxisArea(Graphics2D g2, Plot plot, Rectangle2D drawArea,\n\n                     double reservedWidth) {\n\n    Rectangle2D empty = new Rectangle2D.Double();\n\n    Iterator iter = axes.iterator();\n\n    while (iter.hasNext()) {\n\n      HorizontalAxis axis = (HorizontalAxis)iter.next();\n\n      Rectangle2D area = axis.reserveAxisArea(g2, plot, drawArea, reservedWidth);\n\n      if (!area.equals(empty)) {\n\n        return area;\n\n      }\n\n    }\n\n    return empty;\n\n"
3682,OverlaidHorizontalNumberAxis,OverlaidHorizontalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/OverlaidHorizontalNumberAxis.java,62,81,9,/**\n\n   * Constructor.\n\n   * @param plot CombinedPlot where this OverlaidHorizontalNumberAxis will be\n\n   *    contained.\n\n   */,38,"  public OverlaidHorizontalNumberAxis(CombinedPlot plot) {\n\n    super((HorizontalNumberAxis)plot.getHorizontalAxis(), false);\n\n    this.plot = plot;\n\n    this.axes = plot.getHorizontalAxes();\n\n    // validate type of axes and tell each axis that it is overlaid\n\n    boolean oneVisible = false;\n\n    Iterator iter = axes.iterator();\n\n    while (iter.hasNext()) {\n\n      Object axis = iter.next();\n\n      if ((axis instanceof CombinedHorizontalNumberAxis)) {\n\n        CombinedHorizontalNumberAxis combAxis = (CombinedHorizontalNumberAxis)axis;\n\n        oneVisible |= combAxis.isVisible();\n\n        if (iter.hasNext() || oneVisible) {\n\n          combAxis.setGridLinesVisible(false);\n\n          //combAxis.setOverlaid(true);\n\n        }\n\n      } else {\n\n        throw new IllegalArgumentException(""Can not combine "" + axis.getClass()\n\n                     + "" into "" + this.getClass() );\n\n"
3684,getRange,OverlaidHorizontalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/OverlaidHorizontalNumberAxis.java,151,152,5,/**\n\n   * Returns the AxisRange (min/max) of our Axis\n\n   */,4,  public AxisRange getRange() {\n\n    return plot.getRange(axes);\n\n
3685,setVisible,CombinedVerticalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedVerticalNumberAxis.java,238,239,11,"/**\n\n   * Sets the visible flag on or off for this combined axis. A visible axis will\n\n   * display the axis title, ticks and legend depending on the parent's\n\n   * attributes. An invisible axis will not display anything. If the invisible\n\n   * axis isContainer(), then it occupies space on the graphic device.\n\n   */",4,  public void setVisible(boolean flag) {\n\n    visible = flag;\n\n
3686,draw,CombinedVerticalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedVerticalNumberAxis.java,126,140,11,/**\n\n   * Draws the plot on a Java 2D graphics device (such as the screen or a printer).\n\n   * @param g2 The graphics device;\n\n   * @param drawArea The area within which the chart should be drawn.\n\n   * @param plotArea The area within which the plot should be drawn (a subset of the drawArea).\n\n   */,28,"  public void draw(Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {\n\n    if (visible) {\n\n      axis.draw(g2, drawArea, plotArea);\n\n    } else if (gridLinesVisible) {\n\n      refreshTicks(g2, drawArea, plotArea);\n\n      g2.setStroke(gridStroke);\n\n      g2.setPaint(gridPaint);\n\n      double xx = plotArea.getX();\n\n      Iterator iterator = ticks.iterator();\n\n      while (iterator.hasNext()) {\n\n        Tick tick = (Tick)iterator.next();\n\n        float yy = (float)this.translateValueToJava2D(tick.getNumericalValue(), plotArea);\n\n        Line2D gridline = new Line2D.Double(xx, yy, plotArea.getMaxX(), yy);\n\n        g2.draw(gridline);\n\n"
3687,getRange,CombinedVerticalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedVerticalNumberAxis.java,206,209,5,/**\n\n   * Returns the AxisRange (min/max) of our Axis\n\n   */,8,"  public AxisRange getRange() {\n\n    autoAdjustRange();\n\n    return (new NumberAxisRange(new Double(getMinimumAxisValue()),\n\n        new Double(getMaximumAxisValue())));\n\n"
3688,setReserveDimension,CombinedVerticalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedVerticalNumberAxis.java,152,153,13,"/**\n\n   * The CombinedPlot will calculate the maximim of all reserveWidth or reserveHeight\n\n   * depending on the type of CombinedPlot and inform all CombinedXXXXXAxis to store\n\n   * this value.\n\n   * @param dimension If the axis is vertical, this is width. If axis is\n\n   *  horizontal, then this is height\n\n   */",4,  public void setReserveDimension(double dimension) {\n\n    this.reserveWidth = dimension;\n\n
3689,CombinedVerticalNumberAxis,CombinedVerticalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedVerticalNumberAxis.java,83,112,9,/**\n\n   * Constructs a combined vertical number axis.\n\n   * @param axis Parent VerticalNumberAxis to take as reference.\n\n   * @param visible Is this axis visible?\n\n   */,56,"  public CombinedVerticalNumberAxis(VerticalNumberAxis axis, boolean visible) {\n\n    super(axis.getLabel(),\n\n        axis.getLabelFont(),\n\n        axis.getLabelPaint(),\n\n        axis.getLabelInsets(),\n\n        axis.isLabelDrawnVertical(),\n\n        axis.isTickLabelsVisible(),\n\n        axis.getTickLabelFont(),\n\n        axis.getTickLabelPaint(),\n\n        axis.getTickLabelInsets(),\n\n        axis.isTickMarksVisible(),\n\n        axis.getTickMarkStroke(),\n\n        axis.isAutoRange(),\n\n        axis.autoRangeIncludesZero(),\n\n        axis.getAutoRangeMinimumSize(),\n\n        axis.getMinimumAxisValue(),\n\n        axis.getMaximumAxisValue(),\n\n        axis.isInverted(),\n\n        axis.isAutoTickUnitSelection(),\n\n        axis.getTickUnit(),\n\n        axis.isGridLinesVisible(),\n\n        axis.getGridStroke(),\n\n        axis.getGridPaint(),\n\n        axis.getCrosshairValue(),\n\n        axis.getCrosshairStroke(),\n\n        axis.getCrosshairPaint());\n\n    this.axis = axis;\n\n    this.visible = visible;\n\n"
3690,reserveAxisArea,CombinedVerticalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedVerticalNumberAxis.java,183,189,13,/**\n\n   * Returns area in which the axis will be displayed.\n\n   * @param g2 The graphics device;\n\n   * @param plot A reference to the plot;\n\n   * @param drawArea The area in which the plot and axes should be drawn;\n\n   * @param reservedHeight The height reserved for the horizontal axis;\n\n   */,12,"  public Rectangle2D reserveAxisArea(Graphics2D g2, Plot plot, Rectangle2D drawArea,\n\n                     double reservedHeight) {\n\n    return new Rectangle2D.Double(drawArea.getX(),\n\n                    drawArea.getY(),\n\n                    reserveWidth(g2, plot, drawArea),\n\n                    drawArea.getHeight()-reservedHeight);\n\n"
3691,getParentAxis,CombinedVerticalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedVerticalNumberAxis.java,199,200,5,/**\n\n   * Returns our parent axis.\n\n   */,4,  public Axis getParentAxis() {\n\n    return axis;\n\n
3692,CombinedVerticalNumberAxis,CombinedVerticalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedVerticalNumberAxis.java,74,75,7,/**\n\n   * Constructs a visible combined vertical number axis.\n\n   * @param axis Parent VerticalNumberAxis to take as reference.\n\n   */,4,"  public CombinedVerticalNumberAxis(VerticalNumberAxis axis) {\n\n    this(axis, true);\n\n"
3693,setRange,CombinedVerticalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedVerticalNumberAxis.java,218,228,12,/**\n\n   * Sets our AxisRange (min/max). This is done after a CombinedPlot has\n\n   * has calculated the overall range of all CombinedAxis that share the same\n\n   * Axis for all Plots. This makes all plots display the complete range of\n\n   * their Datasets.\n\n   */\n,22,  public void setRange(AxisRange range) {\n\n    setAutoRange(false);\n\n    Number min = (Number)range.getMin();\n\n    Number max = (Number)range.getMax();\n\n    setMinimumAxisValue(min.doubleValue());\n\n    setMaximumAxisValue(max.doubleValue());\n\n    if (visible) {\n\n      VerticalNumberAxis axis = (VerticalNumberAxis)getParentAxis();\n\n      axis.setAutoRange(false);\n\n      axis.setMinimumAxisValue(min.doubleValue());\n\n      axis.setMaximumAxisValue(max.doubleValue());\n\n
3694,reserveWidth,CombinedVerticalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedVerticalNumberAxis.java,165,172,17,"/**\n\n   * Returns the width required to draw the biggest axis of all the combined\n\n   * vertical axis in the specified draw area. If the width was set via\n\n   * setReserveWidth, then this value is returned instead of a calculation.\n\n   *\n\n   * @param g2 The graphics device;\n\n   * @param plot A reference to the plot;\n\n   * @param drawArea The area within which the plot should be drawn.\n\n   */",14,"  public double reserveWidth(Graphics2D g2, Plot plot, Rectangle2D drawArea) {\n\n    if (!visible) {\n\n      return 0;\n\n    } else if (reserveWidth > 0) {\n\n      return reserveWidth;\n\n    } else {\n\n      return axis.reserveWidth(g2, plot, drawArea);\n\n"
3695,getPrimitive,Performance2,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/demo/Performance2.java,40,41,5,/**\n\n   * Just use double value - should be fast.\n\n   */,4,  public double getPrimitive() {\n\n    return primitive;\n\n
3696,getPrimitiveAsObject,Performance2,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/demo/Performance2.java,47,48,5,/**\n\n   * Creates a Number object every time the primitive is accessed - should be really slow.\n\n   */,4,  public Number getPrimitiveAsObject() {\n\n    return new Double(primitive);\n\n
3697,getObjectAsPrimitive,Performance2,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/demo/Performance2.java,62,63,7,"/**\n\n   * Returns a double value generated from the Object - should be similar to previous method,\n\n   * but is not!\n\n   */",4,  public double getObjectAsPrimitive() {\n\n    return object.doubleValue();\n\n
3698,getObject,Performance2,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/demo/Performance2.java,54,55,5,/**\n\n   * Returns the object - caller has to use doubleValue() method.\n\n   */,4,  public Number getObject() {\n\n    return object;\n\n
3699,adjustForInsets,CombinedPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedPlot.java,370,378,5,/**\n\n   * Utility method to adjust a Rectangle2D for Insets\n\n   */,16,"  protected Rectangle2D adjustForInsets(Rectangle2D drawArea, Insets insets) {\n\n    if (insets != null) {\n\n      return new Rectangle2D.Double(drawArea.getX()+insets.left,\n\n                      drawArea.getY()+insets.top,\n\n                      drawArea.getWidth()-insets.left-insets.right,\n\n                      drawArea.getHeight()-insets.top-insets.bottom);\n\n    } else {\n\n      return drawArea;\n\n"
3700,getXValue,SampleXYDataset,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/demo/SampleXYDataset.java,79,80,11,"/**\n\n   * Returns the x-value for the specified series and item.  Series are numbered 0, 1, ...\n\n   * @param series The index (zero-based) of the series;\n\n   * @param item The index (zero-based) of the required item;\n\n   * @return The x-value for the specified series and item.\n\n   */",4,"  public Number getXValue(int series, int item) {\n\n    return new Double(-10.0+translate+(item*0.2));\n\n"
3701,getPlotArea,CombinedPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedPlot.java,613,614,7,/**\n\n   * Returns the last plotArea calculated.\n\n   * // TODO: is this useful?\n\n   */,4,  public Rectangle2D getPlotArea() {\n\n    return plotArea;\n\n
3702,getSeriesName,SampleXYDataset,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/demo/SampleXYDataset.java,109,116,9,/**\n\n   * Returns the name of the series.\n\n   * @param series The index (zero-based) of the series;\n\n   * @return The name of the series.\n\n   */,16,"  public String getSeriesName(int series) {\n\n    if (series==0) {\n\n      return ""y = cosine(x)"";\n\n    }\n\n    else if (series==1) {\n\n      return ""y = 2*sine(x)"";\n\n    }\n\n    else return ""Error"";\n\n"
3703,CombinedPlot,CombinedPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedPlot.java,128,135,15,"/**\n\n   * Creates a HORIZONTAL or VERTICAL CombinedPlot. If type is HORIZONTAL, then\n\n   * axis should contain the shared vertical axis. If type if VERTICAL, then\n\n   * axis should contain the shared horizontal axis.\n\n   *\n\n   * @param axis Shared axis to use for all sub-plots.\n\n   * @param type Type of CombinedPlot (HORIZONTAL or VERTICAL).\n\n   */",14,"  public CombinedPlot(Axis axis, int type) {\n\n    super((type == VERTICAL ? axis : null), (type == HORIZONTAL ? axis : null));\n\n    if (type != HORIZONTAL && type != VERTICAL) {\n\n      throw new IllegalArgumentException(""Invalid type ("" + type + "")"");\n\n    }\n\n    this.type = type;\n\n    setInsets(new Insets(0, 0, 0, 0));\n\n"
3704,getYValue,SampleXYDataset,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/demo/SampleXYDataset.java,89,93,11,"/**\n\n   * Returns the y-value for the specified series and item.  Series are numbered 0, 1, ...\n\n   * @param series The index (zero-based) of the series;\n\n   * @param item The index (zero-based) of the required item;\n\n   * @return The y-value for the specified series and item.\n\n   */",10,"  public Number getYValue(int series, int item) {\n\n    if (series==0) {\n\n      return new Double(Math.cos(-10.0+translate+(item/10.0)));\n\n    }\n\n    else return new Double(2*(Math.sin(-10.0+translate+(item/10.0))));\n\n"
3705,adjustPlotsMinMax,CombinedPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedPlot.java,781,782,5,/**\n\n   * Adjusts both of our axes ranges.\n\n   */,4,"  protected void adjustPlotsMinMax() {\n\n    adjustPlotsMinMax((type != HORIZONTAL), (type != VERTICAL));\n\n"
3706,getSeriesCount,SampleXYDataset,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/demo/SampleXYDataset.java,100,101,7,/**\n\n   * Returns the number of series in the data source.\n\n   * @return The number of series in the data source.\n\n   */,4,  public int getSeriesCount() {\n\n    return 2;\n\n
3707,CombinedPlot,CombinedPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedPlot.java,145,149,11,/**\n\n   * Creates an OVERLAID CombinedPlot.\n\n   *\n\n   * @param horizontal Shared horizontal axis to use for all sub-plots.\n\n   * @param vertical Shared vertical axis to use for all sub-plots.\n\n   */,8,"  public CombinedPlot(Axis horizontal, Axis vertical) {\n\n    super(horizontal, vertical);\n\n    type = OVERLAID;\n\n    setInsets(new Insets(0, 0, 0, 0));\n\n"
3708,SampleXYDataset,SampleXYDataset,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/demo/SampleXYDataset.java,60,61,5,/**\n\n   * Default constructor.\n\n   */,4,  public SampleXYDataset() {\n\n    this.translate = 0.0;\n\n
3709,add,CombinedPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedPlot.java,179,213,23,"/**\n\n   * Adds a CombinedChart to the CombinedPlot. Verifies that the shared axes are\n\n   * the same.\n\n   *\n\n   * @param chart The chart to add\n\n   * @param weight Weight of this chart relative to the rest. Must be greater than one.\n\n   *      For an OVERLAID CombinedPlot, weight must be one.\n\n   * @exception AxisNotCompatibleException If common axis is not the same as\n\n   *      previous charts, or if the other axes is not compatible.\n\n   * @exception IllegalArgumentException if weight is <= 0 for HORIZONTAL or\n\n   *      VERTICAL plots, or weight != 0 for OVERLAID plots.\n\n   */",60,"  public void add(CombinedChart chart, int weight)\n\n    throws AxisNotCompatibleException, IllegalArgumentException {\n\n    // verify valid horizontal and vertical axis\n\n    Plot p = chart.getPlot();\n\n    if (getHorizontalAxis() != p.getHorizontalAxis() && type != HORIZONTAL) {\n\n      throw new AxisNotCompatibleException(""Can\'t combine with different horizontal axis"");\n\n    } else if (getVerticalAxis() != p.getVerticalAxis() && type != VERTICAL) {\n\n      throw new AxisNotCompatibleException(""Can\'t combine with different vertical axis"");\n\n    } else if (!isCompatibleHorizontalAxis((Axis)p.getHorizontalAxis())) {\n\n      throw new AxisNotCompatibleException(""Incompatible horizontal axis"");\n\n    } else if (!isCompatibleVerticalAxis((Axis)p.getVerticalAxis())) {\n\n      throw new AxisNotCompatibleException(""Incompatible vertical axis"");\n\n    }\n\n    // verify valid weight\n\n    if (weight <= 0 && type != OVERLAID) {\n\n      throw new IllegalArgumentException(""weight must be positive"");\n\n    } else if (weight != 1 && type == OVERLAID) {\n\n      throw new IllegalArgumentException(""weight must 1"");\n\n    }\n\n    // only first chart of overlaid chart will draw background and outline\n\n    if (charts.size() > 0 && type == OVERLAID) {\n\n      p.setBackgroundPaint(null);\n\n      p.setOutlineStroke(null);\n\n      p.setOutlinePaint(null);\n\n    }\n\n    // store the chartot and its weight\n\n    ChartInfo chartInfo = new ChartInfo(chart, weight);\n\n    charts.add(chartInfo);\n\n    // keep track of total weights\n\n    weights += weight;\n\n"
3710,adjustPlots,CombinedPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedPlot.java,513,521,9,/**\n\n   * Adjusts the charts to combine changing their axis and rescaling them to\n\n   * take into account combined plots. Should be called after adding all\n\n   * sub-charts to the CombinedPlot.\n\n   */,14,  public void adjustPlots() {\n\n    // adjust plot axes: wrap with CombinedXXXXXAxis/OverlaidXXXXAxis objects\n\n    adjustPlotsAxis();\n\n    // adjust plot axis min and max values to display all plots\n\n    adjustPlotsMinMax();\n\n    // adjust all paints and strokes for each plot\n\n    adjustSeriesPaintAndStroke();\n\n
3711,setRange,CombinedPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedPlot.java,601,605,9,/**\n\n   * Sets the AxisRange (min/max) for all the axes in the List.\n\n   * @param range Range to set.\n\n   * @parem axes List of axes to set.\n\n   */,10,"  public void setRange(AxisRange range, java.util.List axes) {\n\n    Iterator iter = axes.iterator();\n\n    while (iter.hasNext()) {\n\n      CombinableAxis axis = (CombinableAxis)iter.next();\n\n      axis.setRange(range);\n\n"
3712,getMaximumHorizontalDataValue,CombinedPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedPlot.java,447,461,16,"/**\n\n   * Returns the maximum value in the domain of all the charts, since this is plotted\n\n   * against the horizontal axis for a combined plot.\n\n   * @return The maximum value to be plotted against the horizontal axis.\n\n   */\n\n --------------\n\n// From HorizontalValuePlot and VerticalValuePlot\n\n --------------\n",30,  public Number getMaximumHorizontalDataValue() {\n\n    if (charts.size() == 0) {\n\n      return null;\n\n    }\n\n    Number max = new Double(Double.MIN_VALUE);\n\n    Iterator iter = charts.iterator();\n\n    while (iter.hasNext()) {\n\n      ChartInfo chartInfo = (ChartInfo)iter.next();\n\n      HorizontalValuePlot plot = (HorizontalValuePlot)chartInfo.plot;\n\n      Number x = plot.getMaximumHorizontalDataValue();\n\n      if (x.doubleValue() > max.doubleValue()) {\n\n        max = x;\n\n      }\n\n    }\n\n    return max;\n\n
3713,isCompatibleVerticalAxis,CombinedPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedPlot.java,232,233,11,"/**\n\n   * Checks the compatibility of a vertical axis, returning true if the axis is compatible with\n\n   * the plot, and false otherwise.  The vertical axis for this plot must be an instance of\n\n   * VerticalNumberAxis.\n\n   * @param axis The vertical axis.\n\n   */",4,  public boolean isCompatibleVerticalAxis(Axis axis) {\n\n    return (axis instanceof VerticalNumberAxis);\n\n
3714,isCompatibleHorizontalAxis,CombinedPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedPlot.java,221,223,9,"/**\n\n   * Checks the compatibility of a horizontal axis, returning true if the axis is\n\n   * compatible with the plot, and false otherwise.\n\n   * @param axis The horizontal axis.\n\n   */",6,  public boolean isCompatibleHorizontalAxis(Axis axis) {\n\n    return ((axis instanceof HorizontalNumberAxis) ||\n\n        (axis instanceof HorizontalDateAxis));\n\n
3715,getMinimumHorizontalDataValue,CombinedPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedPlot.java,425,439,10,"/**\n\n   * Returns the minimum value in the domain of all the charts, since this is plotted\n\n   * against the horizontal axis for a combined plot.\n\n   * @return The minimum value to be plotted against the horizontal axis.\n\n   */\n",30,  public Number getMinimumHorizontalDataValue() {\n\n    if (charts.size() == 0) {\n\n      return null;\n\n    }\n\n    Number min = new Double(Double.MAX_VALUE);\n\n    Iterator iter = charts.iterator();\n\n    while (iter.hasNext()) {\n\n      ChartInfo chartInfo = (ChartInfo)iter.next();\n\n      HorizontalValuePlot plot = (HorizontalValuePlot)chartInfo.plot;\n\n      Number x = plot.getMinimumHorizontalDataValue();\n\n      if (x.doubleValue() < min.doubleValue()) {\n\n        min = x;\n\n      }\n\n    }\n\n    return min;\n\n
3716,add,CombinedPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedPlot.java,163,164,19,"/**\n\n   * Adds a CombinedChart to the CombinedPlot. Verifies that the shared axes are\n\n   * the same and assigns a weight of 1 to this chart.\n\n   *\n\n   * @param chart The chart to add\n\n   * @exception AxisNotCompatibleException If horizontal axis is not the same as\n\n   *      previous charts, or if vertical axis is not compatible.\n\n   * @exception IllegalArgumentException if weight is <= 0 for HORIZONTAL or\n\n   *      VERTICAL plots, or weight != 0 for OVERLAID plots.\n\n   */",4,"  public void add(CombinedChart chart) throws AxisNotCompatibleException {\n\n    add(chart, 1);\n\n"
3717,adjustPlotsAxis,CombinedPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedPlot.java,691,693,11,"/**\n\n   * Adjusts the internal charts to allow automatic rendering of their conponents.\n\n   * This includes setting all HorizontalAxis to a CombinedHorizontalXXXXAxis or\n\n   * OverlaidHorizontalXXXXAxis, and setting all VerticalAxis to a CombinedVerticalXXXXAxis or\n\n   * OverlaidVerticalXXXXAxis.\n\n   */",6,"  protected void adjustPlotsAxis() {\n\n    if (!isAdjusted) {\n\n      adjustPlotsAxis(true, true);\n\n"
3718,adjustPlotsMinMax,CombinedPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedPlot.java,791,807,11,/**\n\n   * Adjusts our axes ranges.\n\n   *\n\n   * @param adjustHorizontal Adjust the range of our horizontal axes?\n\n   * @param adjustVertical Adjust the range of our vertical axes?\n\n   */,28,"  protected void adjustPlotsMinMax(boolean adjustHorizontal, boolean adjustVertical) {\n\n    java.util.List axes;\n\n    AxisRange range;\n\n    if (adjustHorizontal && !axisRangeSet[HORIZONTAL]) {\n\n      axes = getHorizontalAxes(true);\n\n      range = getRange(axes);\n\n      setRange(range, axes);\n\n      setAxisRangeSet(HORIZONTAL, true);\n\n    }\n\n    if (adjustVertical && !axisRangeSet[VERTICAL]) {\n\n      axes = getVerticalAxes(true);\n\n      range = getRange(axes);\n\n      setRange(range, axes);\n\n      setAxisRangeSet(VERTICAL, true);\n\n"
3719,getHorizontalAxes,CombinedPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedPlot.java,536,548,7,/**\n\n   * Returns a List of all our Horizontal Axes.\n\n   * @param recursive true indicates to traverse all included sub-plots recursivelly.\n\n   */,26,  public java.util.List getHorizontalAxes(boolean recursive) {\n\n    ArrayList axes = new ArrayList();\n\n    Iterator iter = charts.iterator();\n\n    while (iter.hasNext()) {\n\n      ChartInfo chartInfo = (ChartInfo)iter.next();\n\n      axes.add(chartInfo.plot.getHorizontalAxis());\n\n      if (recursive && chartInfo.plot instanceof CombinedPlot) {\n\n        CombinedPlot subPlot = (CombinedPlot)chartInfo.plot;\n\n        java.util.List moreAxes = subPlot.getHorizontalAxes(true);\n\n        axes.addAll(moreAxes);\n\n      }\n\n    }\n\n    return axes;\n\n
3720,readjustPlotsMinMax,CombinedPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedPlot.java,648,677,27,"/**\n\n   * Readjust the plot axes min and max as needed.  After readjusting the plot axes,\n\n   * it will readjust recursively contained combined plots that were missed.\n\n   *\n\n   * @param doHorizontalAxis Hint that we need to adjust the horizontal axis.\n\n   *  In order to adjust the axis, in addition to the hint being true, the\n\n   *  axisRangeSet[HORIZONTAL] flag for this plot must be true indicating that the\n\n   *  plot does indeed adjust it's horizontal axis.\n\n   * @param doVerticalAxis Hint that we need to adjust the vertical axis.\n\n   *  In order to adjust the axis, in addition to the hint being true, the\n\n   *  axisRangeSet[VERTICAL] flag for this plot must be true indicating that the\n\n   *  plot does indeed adjust it's vertical axis.\n\n   *\n\n   */",50,"   private void readjustPlotsMinMax(boolean doHorizontalAxis, boolean doVerticalAxis) {\n\n    if (inReadjustPlotsMinMax) return;\n\n    doHorizontalAxis &= axisRangeSet[HORIZONTAL];\n\n    doVerticalAxis &= axisRangeSet[VERTICAL];\n\n    // adjust plot axis min and max values to display all plots if needed\n\n    if (doHorizontalAxis || doVerticalAxis) {\n\n      if (doHorizontalAxis) {\n\n        setAxisRangeSet(HORIZONTAL, false);\n\n      }\n\n      if (doVerticalAxis) {\n\n        setAxisRangeSet(VERTICAL, false);\n\n      }\n\n      adjustPlotsMinMax(doHorizontalAxis, doVerticalAxis);\n\n    }\n\n    // recursively readjust any internal CombinedPlots we missed.\n\n    inReadjustPlotsMinMax = true;  // prevents StackOverflow\n\n    Iterator iter = charts.iterator();\n\n    while(iter.hasNext()) {\n\n      ChartInfo chartInfo = (ChartInfo)iter.next();\n\n      Plot plot = chartInfo.plot;\n\n      if (plot instanceof CombinedPlot) {\n\n        ((CombinedPlot)plot).readjustPlotsMinMax(!doHorizontalAxis, !doVerticalAxis);\n\n      }\n\n    }\n\n    inReadjustPlotsMinMax = false;\n\n"
3721,draw,CombinedPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedPlot.java,258,362,15,/**\n\n   * Draws the CombinedPlot on a Java 2D graphics device (such as the screen or a printer).\n\n   * Will perform all the placement calculations for each sub-plots and then tell these\n\n   * to draw themselves.\n\n   * <P>\n\n   * @param g2 The graphics device;\n\n   * @param drawArea The area within which the plot (including axis labels) should be drawn;\n\n   */,184,"  public void draw(Graphics2D g2, Rectangle2D drawArea, DrawInfo info) {\n\n    int n = charts.size();\n\n    int verticalGap = 0;\n\n    int horizontalGap = 0;\n\n    // adjust plot axis if needed\n\n    adjustPlots();\n\n    // adjust the drawing area for plot insets. insets are added as a border\n\n    // and between sub-charts. For in-between space between sub-charts, the\n\n    // max of insets.top and insets.bottom is used for VERTICAL plots and the\n\n    // max of insets.right and insets.left for HORIZONTAL plots.\n\n    drawArea = adjustForInsets(drawArea, insets);\n\n    if (insets != null && type != OVERLAID) {\n\n      verticalGap = Math.max(insets.top, insets.bottom);\n\n      horizontalGap = Math.max(insets.right, insets.left);\n\n    }\n\n    // calculate shared axis height and width\n\n    double hAxisAreaHeight = 0;\n\n    double vAxisAreaWidth = 0;\n\n    if (type != HORIZONTAL) {\n\n      // all plots share the same horizontal axis, reserve the height\n\n      hAxisAreaHeight = getHorizontalAxis().reserveHeight(g2, this, drawArea);\n\n    }\n\n    if (type != VERTICAL) {\n\n      // all plots share the same vertical axis, reserve the width\n\n      vAxisAreaWidth = getVerticalAxis().reserveWidth(g2, this, drawArea);\n\n    }\n\n    // make plotArea without shared axis areas\n\n    Rectangle2D plotArea = new Rectangle2D.Double(drawArea.getX(),\n\n                            drawArea.getY(),\n\n                            drawArea.getWidth()-vAxisAreaWidth,\n\n                            drawArea.getHeight()-hAxisAreaHeight);\n\n    // calculate plotAreas of all sub-plots, maximum vertical/horizontal axis width/height\n\n    Rectangle2D[] subPlotArea = new Rectangle2D[n];\n\n    double x = plotArea.getX();\n\n    double y = plotArea.getY();\n\n    double usableWidth = plotArea.getWidth()-horizontalGap*(charts.size()-1);\n\n    double usableHeight = plotArea.getHeight()-verticalGap*(charts.size()-1);\n\n    double maxAxisWidth = Double.MIN_VALUE;\n\n    double maxAxisHeight = Double.MIN_VALUE;\n\n    for (int i=0; i<n; i++) {\n\n      ChartInfo chartInfo = (ChartInfo)charts.get(i);\n\n      Plot plot = chartInfo.plot;\n\n      // calculate sub-plot height\n\n      double subPlotAreaHeight = usableHeight;\n\n      if (type == VERTICAL) {\n\n        subPlotAreaHeight *= (double)chartInfo.weight/weights;\n\n      }\n\n      if (i == n-1) {\n\n        // last plot has the visible horizontal axis\n\n        subPlotAreaHeight += hAxisAreaHeight;\n\n      }\n\n      // calculate sub-plot width\n\n      double subPlotAreaWidth = usableWidth;\n\n      if (type == HORIZONTAL) {\n\n        subPlotAreaWidth *= (double)chartInfo.weight/weights;\n\n      }\n\n      if (i == 0) {\n\n        // first plot has the visible vertical axis\n\n        subPlotAreaWidth += vAxisAreaWidth;\n\n      }\n\n      // calculate sub-plot area\n\n      subPlotArea[i] = new Rectangle2D.Double(x, y, subPlotAreaWidth, subPlotAreaHeight);\n\n      // calculate sub-plot max axis width and height if needed\n\n      if (type != OVERLAID) {\n\n        Rectangle2D tempArea = adjustForInsets(subPlotArea[i], plot.getInsets());\n\n        if (type == VERTICAL) {\n\n          maxAxisWidth = Math.max(maxAxisWidth,\n\n                       plot.getVerticalAxis().reserveWidth(g2, plot, tempArea));\n\n        } else if (type == HORIZONTAL) {\n\n          maxAxisHeight = Math.max(maxAxisHeight,\n\n                    plot.getHorizontalAxis().reserveHeight(g2, plot, tempArea));\n\n        }\n\n      }\n\n      // calculat next (x, y)\n\n      if (type == VERTICAL) {\n\n        y += subPlotAreaHeight + verticalGap;\n\n      } else if (type == HORIZONTAL) {\n\n        x += subPlotAreaWidth + horizontalGap;\n\n      } if (type == OVERLAID && i == 0) {\n\n        x += vAxisAreaWidth;\n\n      }\n\n    }\n\n    // set the width and height of non-shared axis of all sub-plots\n\n    if (type == VERTICAL) {\n\n      setVerticalAxisWidth(maxAxisWidth);\n\n    } else if (type == HORIZONTAL) {\n\n      setHorizontalAxisHeight(maxAxisHeight);\n\n    }\n\n    // draw all the charts\n\n    for (int i=0; i<n; i++) {\n\n      ChartInfo chartInfo = (ChartInfo)charts.get(i);\n\n      chartInfo.chart.draw(g2, subPlotArea[i], null);\n\n"
3722,getVerticalAxes,CombinedPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedPlot.java,555,556,7,/**\n\n   * Returns a List of all our Vertical Axes. Does not traverse recursivelly the\n\n   * sub-chart structure.\n\n   */,4,  public java.util.List getVerticalAxes() {\n\n    return getVerticalAxes(false);\n\n
3723,getRange,CombinedPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedPlot.java,582,593,7,/**\n\n   * Returns the AxisRange (min/max) of the axes list.\n\n   * @param axes List of axes to use in calculation\n\n   */,24,  public AxisRange getRange(java.util.List axes) {\n\n    AxisRange range = null;\n\n    Iterator iter = axes.iterator();\n\n    while (iter.hasNext()) {\n\n      CombinableAxis axis = (CombinableAxis)iter.next();\n\n      if (range == null) {\n\n        range = axis.getRange();\n\n      } else {\n\n        range.combine(axis.getRange());\n\n      }\n\n    }\n\n    return range;\n\n
3724,horizontalAxisVisible,CombinedPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedPlot.java,749,755,17,/**\n\n   * Returns true if a horizontal axis is visible. Sub-classes can overwrite this\n\n   * method to implement additional logic. This implementation returns true for\n\n   * HORIZONTAL plots or if the plot under analysis is the first of the combination.\n\n   *\n\n   * @param firstPlot Are we the first plot of the CombinedPlot?\n\n   * @param lastPlot Are we the last plot of the CombinedPlot?\n\n   * @param subPlot Plot under analysis.\n\n   */,14,"  protected boolean horizontalAxisVisible(boolean firstPlot, boolean lastPlot, Plot subPlot) {\n\n    if (type == HORIZONTAL) {\n\n      return true;\n\n    } else if (lastPlot) {\n\n      return true;\n\n    } else {\n\n      return false;\n\n"
3725,setHorizontalAxisHeight,CombinedPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedPlot.java,386,394,7,/**\n\n   * Sets the height of the non-shared horizontal axis of all combined sub-plots\n\n   * @param height Height to\n\n   */,18,  protected void setHorizontalAxisHeight(double height) {\n\n    Iterator iter = charts.iterator();\n\n    while (iter.hasNext()) {\n\n      ChartInfo chartInfo = (ChartInfo)iter.next();\n\n      Plot plot = chartInfo.plot;\n\n      CombinableAxis axis = (CombinableAxis)plot.getHorizontalAxis();\n\n      axis.setReserveDimension(height);\n\n      if (plot instanceof CombinedPlot) {\n\n        ((CombinedPlot)plot).setHorizontalAxisHeight(height);\n\n
3726,getMaximumVerticalDataValue,CombinedPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedPlot.java,487,501,5,/**\n\n   * Returns the maximum value displayed against the vertical axis.\n\n   */,30,  public Number getMaximumVerticalDataValue() {\n\n    if (charts.size() == 0) {\n\n      return null;\n\n    }\n\n    Number max = new Double(Double.MIN_VALUE);\n\n    Iterator iter = charts.iterator();\n\n    while (iter.hasNext()) {\n\n      ChartInfo chartInfo = (ChartInfo)iter.next();\n\n      VerticalValuePlot plot = (VerticalValuePlot)chartInfo.plot;\n\n      Number x = plot.getMaximumVerticalDataValue();\n\n      if (x.doubleValue() > max.doubleValue()) {\n\n        max = x;\n\n      }\n\n    }\n\n    return max;\n\n
3727,adjustSeriesPaintAndStroke,CombinedPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedPlot.java,848,872,15,"/**\n\n   * Adjusts the Stroke and Paint objects associated with each Plot's Series\n\n   * that use the CombinedDataset so that each series is always drawn using the same\n\n   * rendering objects, no matter on what plot it appears.\n\n   * @param masterPlot Outermost plot that defines all the Stroke and Paint object\n\n   *    to use\n\n   * @param masterData Dataset\n\n   */",46,"  private void adjustSeriesPaintAndStroke(Plot masterPlot, Dataset masterData) {\n\n    Iterator iter = charts.iterator();\n\n    while (iter.hasNext()) {\n\n      ChartInfo chartInfo = (ChartInfo)iter.next();\n\n      Plot plot = chartInfo.plot;\n\n      Dataset data = chartInfo.chart.getDataset();\n\n      if (data instanceof CombinationDataset) {\n\n        CombinationDataset childData = (CombinationDataset)data;\n\n        if (childData.getParent() == masterData) {\n\n          int[] map = childData.getMap();\n\n          Stroke[] childStroke = new Stroke[map.length];\n\n          Paint[] childPaint = new Paint[map.length];\n\n          for (int j=0; j<map.length; j++) {\n\n            childStroke[j] = masterPlot.getSeriesStroke(map[j]);\n\n            childPaint[j] = masterPlot.getSeriesPaint(map[j]);\n\n          }\n\n          plot.setSeriesStroke(childStroke);\n\n          plot.setSeriesPaint(childPaint);\n\n        }\n\n      }\n\n      // adjust recursivelly any internal CombinedPlot\n\n      if (plot instanceof CombinedPlot) {\n\n        ((CombinedPlot)plot).adjustSeriesPaintAndStroke(masterPlot, masterData);\n\n"
3728,getMinimumVerticalDataValue,CombinedPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedPlot.java,467,481,5,/**\n\n   * Returns the minimum value displayed against the vertical axis.\n\n   */,30,  public Number getMinimumVerticalDataValue() {\n\n    if (charts.size() == 0) {\n\n      return null;\n\n    }\n\n    Number min = new Double(Double.MAX_VALUE);\n\n    Iterator iter = charts.iterator();\n\n    while (iter.hasNext()) {\n\n      ChartInfo chartInfo = (ChartInfo)iter.next();\n\n      VerticalValuePlot plot = (VerticalValuePlot)chartInfo.plot;\n\n      Number x = plot.getMinimumVerticalDataValue();\n\n      if (x.doubleValue() < min.doubleValue()) {\n\n        min = x;\n\n      }\n\n    }\n\n    return min;\n\n
3729,getVerticalAxes,CombinedPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedPlot.java,563,575,7,/**\n\n   * Returns a List of all our Vertical Axes.\n\n   * @param recursive true indicates to traverse all included sub-plots recursivelly.\n\n   */,26,  public java.util.List getVerticalAxes(boolean recursive) {\n\n    ArrayList axes = new ArrayList();\n\n    Iterator iter = charts.iterator();\n\n    while (iter.hasNext()) {\n\n      ChartInfo chartInfo = (ChartInfo)iter.next();\n\n      axes.add(chartInfo.plot.getVerticalAxis());\n\n      if (recursive && chartInfo.plot instanceof CombinedPlot) {\n\n        CombinedPlot subPlot = (CombinedPlot)chartInfo.plot;\n\n        java.util.List moreAxes = subPlot.getVerticalAxes(true);\n\n        axes.addAll(moreAxes);\n\n      }\n\n    }\n\n    return axes;\n\n
3730,getHorizontalAxes,CombinedPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedPlot.java,528,529,7,/**\n\n   * Returns a List of all our Horizontal Axes. Does not traverse recursivelly the\n\n   * sub-chart structure.\n\n   */,4,  public java.util.List getHorizontalAxes() {\n\n    return getHorizontalAxes(false);\n\n
3731,getSeriesName,SampleHighLowDataset,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/demo/SampleHighLowDataset.java,165,169,9,/**\n\n   * Returns the name of the series.\n\n   * @param series The index (zero-based) of the series;\n\n   * @return The name of the series.\n\n   */,10,"  public String getSeriesName(int series) {\n\n    if (series==0) {\n\n      return ""IBM"";\n\n    }\n\n    else return ""Error"";\n\n"
3732,adjustPlotsAxis,CombinedPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedPlot.java,706,737,17,"/**\n\n   * Adjusts the internal charts to allow automatic rendering of their conponents.\n\n   * This includes setting all HorizontalAxis to a CombinedHorizontalXXXXAxis or\n\n   * OverlaidHorizontalXXXXAxis, and setting all VerticalAxis to a CombinedVerticalXXXXAxis or\n\n   * OverlaidVerticalXXXXAxis.\n\n   *\n\n   * @param hVisible Indicates if the horizontal axis is visible for this plot\n\n   * @parem vVisible Indicates if the vertical axis is visible for this plot\n\n   */",50,"  protected void adjustPlotsAxis(boolean hVisible, boolean vVisible) {\n\n    Iterator iter = charts.iterator();\n\n    boolean hAxisVisible, vAxisVisible;\n\n    boolean first = true;\n\n    while (iter.hasNext()) {\n\n      ChartInfo chartInfo = (ChartInfo)iter.next();\n\n      Plot plot = chartInfo.plot;\n\n      if (plot instanceof CombinedPlot) {\n\n        // adjust recursivelly any combined plots first\n\n        hAxisVisible = (hVisible && horizontalAxisVisible(first, !iter.hasNext(), plot));\n\n        vAxisVisible = (vVisible && verticalAxisVisible(first, !iter.hasNext(), plot));\n\n        ((CombinedPlot)plot).adjustPlotsAxis(hAxisVisible, vAxisVisible);\n\n      }\n\n      // create combined horizontal axis\n\n      hAxisVisible = (hVisible && horizontalAxisVisible(first, !iter.hasNext(), plot));\n\n      Axis h = createCombinedAxis(plot, (Axis)plot.getHorizontalAxis(), hAxisVisible);\n\n      // create combined vertical axis\n\n      vAxisVisible = (vVisible && verticalAxisVisible(first, !iter.hasNext(), plot));\n\n      Axis v = createCombinedAxis(plot, (Axis)plot.getVerticalAxis(), vAxisVisible);\n\n      // adjust plot with new axes\n\n      plot.setHorizontalAxis(h);\n\n      plot.setVerticalAxis(v);\n\n      first = false;\n\n    }\n\n    isAdjusted = true;\n\n"
3733,getPlotType,CombinedPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedPlot.java,241,246,9,"/**\n\n   * Returns the plot type as a string. This implementation returns ""Overlaid Plot"",\n\n   * ""Horizontal Combined Plot"", ""Vertical Combined Plot"" or ""Unknown Combined Plot""\n\n   * depending of the type of CombinedPlot.\n\n   */",12,"  public String getPlotType() {\n\n    switch (type) {\n\n      case OVERLAID:   return ""Overlaid Plot"";\n\n      case HORIZONTAL: return ""Horizontal Combined Plot"";\n\n      case VERTICAL:   return ""Vertical Combined Plot"";\n\n      default:     return ""Unknown Combined Plot"";\n\n"
3734,adjustSeriesPaintAndStroke,CombinedPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedPlot.java,833,836,9,"/**\n\n   * Adjusts the Stroke and Paint objects associated with each Plot's Series\n\n   * that use the CombinedDataset so that each series is always drawn using the same\n\n   * rendering objects, no matter on what plot it appears.\n\n   */",8,"  private void adjustSeriesPaintAndStroke() {\n\n    if (chart != null) {\n\n      SeriesDataset masterData = (SeriesDataset)chart.getDataset();\n\n      adjustSeriesPaintAndStroke(this, masterData);\n\n"
3735,verticalAxisVisible,CombinedPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedPlot.java,768,774,17,/**\n\n   * Returns true is a vertical axis is visible. Sub-classes can overwrite this\n\n   * method to implement additional logic. This implementation returns true for\n\n   * VERTICAL plots or if the plot under analysis is the first of the combination.\n\n   *\n\n   * @param firstPlot Are we the first plot of the CombinedPlot?\n\n   * @param lastPlot Are we the last plot of the CombinedPlot?\n\n   * @param subPlot Plot under analysis.\n\n   */,14,"  protected boolean verticalAxisVisible(boolean firstPlot, boolean lastPlot, Plot subPlot) {\n\n    if (type == VERTICAL) {\n\n      return true;\n\n    } else if (firstPlot) {\n\n      return true;\n\n    } else {\n\n      return false;\n\n"
3736,setAxisRangeSet,CombinedPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedPlot.java,816,823,9,/**\n\n   * Recursively sets the axisRangeSet[type] flag to true for this and all its\n\n   * CombinedPlot sub-plots.\n\n   * @param type Indicates the flag to set (HORIZONTAL or VERTICAL).\n\n   */,16,"  private void setAxisRangeSet(int type, boolean flag) {\n\n    axisRangeSet[type] = flag;\n\n    Iterator iter = charts.iterator();\n\n    while (iter.hasNext()) {\n\n      ChartInfo chartInfo = (ChartInfo)iter.next();\n\n      Plot plot = chartInfo.plot;\n\n      if (plot instanceof CombinedPlot) {\n\n        ((CombinedPlot)plot).setAxisRangeSet(type, flag);\n\n"
3737,setVerticalAxisWidth,CombinedPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedPlot.java,403,411,7,/**\n\n   * Sets the width of the vertical axis of all combined sub-charts.\n\n   * @param width Width to set\n\n   */,18,  protected void setVerticalAxisWidth(double width) {\n\n    Iterator iter = charts.iterator();\n\n    while (iter.hasNext()) {\n\n      ChartInfo chartInfo = (ChartInfo)iter.next();\n\n      Plot plot = chartInfo.plot;\n\n      CombinableAxis axis = (CombinableAxis)plot.getVerticalAxis();\n\n      axis.setReserveDimension(width);\n\n      if (plot instanceof CombinedPlot) {\n\n        ((CombinedPlot)plot).setVerticalAxisWidth(width);\n\n
3738,chartChanged,CombinedPlot,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedPlot.java,627,628,11,/**\n\n   * Receives notification of a change to a (the) chart.\n\n   * <P>\n\n   * Reacts to dataset changes by reconfiguring the axes.\n\n   * @param event Information about the chart change event.\n\n   */,4,"  public void chartChanged(ChartChangeEvent event) {\n\n    readjustPlotsMinMax(axisRangeSet[HORIZONTAL], axisRangeSet[VERTICAL]);\n\n"
3739,NumberAxisRange,NumberAxisRange,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/NumberAxisRange.java,56,57,11,/**\n\n   * Creates an NumberAxisRange object.\n\n   *\n\n   * @param min Minimum Number value\n\n   * @param max Maximum Number value\n\n   */,4,"  public NumberAxisRange(Number min, Number max) {\n\n    super(min, max);\n\n"
3740,DateAxisRange,DateAxisRange,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/DateAxisRange.java,58,59,11,/**\n\n   * Creates an DateAxisRange object.\n\n   *\n\n   * @param min Minimum date value\n\n   * @param max Maximum date value\n\n   */,4,"  public DateAxisRange(Date min, Date max) {\n\n    super(min, max);\n\n"
3741,reserveAxisArea,CombinedHorizontalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedHorizontalNumberAxis.java,172,179,16,/**\n\n   * Returns area in which the axis will be displayed. If the axis is not visible\n\n   * returns a zero size rectangle.\n\n   * @param g2 The graphics device;\n\n   * @param plot A reference to the plot;\n\n   * @param drawArea The area within which the plot and axes should be drawn;\n\n   * @param reservedWidth The space already reserved for the vertical axis;\n\n   */\n,14,"  public Rectangle2D reserveAxisArea(Graphics2D g2, Plot plot, Rectangle2D drawArea,\n\n                     double reservedWidth) {\n\n    if (visible) {\n\n      return axis.reserveAxisArea(g2, plot, drawArea, reservedWidth);\n\n    }\n\n    else {\n\n      return new Rectangle2D.Double();\n\n"
3742,isVisible,CombinedHorizontalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedHorizontalNumberAxis.java,238,239,5,/**\n\n   * Is this axis visible? Is is drawn?\n\n   */,4,  public boolean isVisible() {\n\n    return visible;\n\n
3743,initialiseData,SampleHighLowDataset,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/demo/SampleHighLowDataset.java,184,472,5,/**\n\n   * Sets up the data for the sample data source.\n\n   */,482,"  private void initialiseData() {\n\n    dates = new Date[47];\n\n    highs = new Double[47];\n\n    lows = new Double[47];\n\n    opens = new Double[47];\n\n    closes = new Double[47];\n\n    dates[0]  = createDate(2001, Calendar.JANUARY,4);\n\n    highs[0]  = new Double(47.0);\n\n    lows[0]   = new Double(33.0);\n\n    opens[0]  = new Double(35.0);\n\n    closes[0] = new Double(33.0);\n\n    dates[1]  = createDate(2001, Calendar.JANUARY,5);\n\n    highs[1]  = new Double(47.0);\n\n    lows[1]   = new Double(32.0);\n\n    opens[1]  = new Double(41.0);\n\n    closes[1] = new Double(37.0);\n\n    dates[2]  = createDate(2001, Calendar.JANUARY,6);\n\n    highs[2]  = new Double(49.0);\n\n    lows[2]   = new Double(43.0);\n\n    opens[2]  = new Double(46.0);\n\n    closes[2] = new Double(48.0);\n\n    dates[3]  = createDate(2001, Calendar.JANUARY,7);\n\n    highs[3]  = new Double(51.0);\n\n    lows[3]   = new Double(39.0);\n\n    opens[3]  = new Double(40.0);\n\n    closes[3] = new Double(47.0);\n\n    dates[4]  = createDate(2001, Calendar.JANUARY,8);\n\n    highs[4]  = new Double(60.0);\n\n    lows[4]   = new Double(40.0);\n\n    opens[4]  = new Double(46.0);\n\n    closes[4] = new Double(53.0);\n\n    dates[5]  = createDate(2001, Calendar.JANUARY,9);\n\n    highs[5]  = new Double(62.0);\n\n    lows[5]   = new Double(55.0);\n\n    opens[5]  = new Double(57.0);\n\n    closes[5] = new Double(61.0);\n\n    dates[6]  = createDate(2001, Calendar.JANUARY,10);\n\n    highs[6]  = new Double(65.0);\n\n    lows[6]   = new Double(56.0);\n\n    opens[6]  = new Double(62.0);\n\n    closes[6] = new Double(59.0);\n\n    dates[7]  = createDate(2001, Calendar.JANUARY,11);\n\n    highs[7]  = new Double(55.0);\n\n    lows[7]   = new Double(43.0);\n\n    opens[7]  = new Double(45.0);\n\n    closes[7] = new Double(47.0);\n\n    dates[8]  = createDate(2001, Calendar.JANUARY,12);\n\n    highs[8]  = new Double(54.0);\n\n    lows[8]   = new Double(33.0);\n\n    opens[8]  = new Double(40.0);\n\n    closes[8] = new Double(51.0);\n\n    dates[9]  = createDate(2001, Calendar.JANUARY,13);\n\n    highs[9]  = new Double(47.0);\n\n    lows[9]   = new Double(33.0);\n\n    opens[9]  = new Double(35.0);\n\n    closes[9] = new Double(33.0);\n\n    dates[10]  = createDate(2001, Calendar.JANUARY,14);\n\n    highs[10]  = new Double(54.0);\n\n    lows[10]   = new Double(38.0);\n\n    opens[10]  = new Double(43.0);\n\n    closes[10] = new Double(52.0);\n\n    dates[11]  = createDate(2001, Calendar.JANUARY,15);\n\n    highs[11]  = new Double(48.0);\n\n    lows[11]   = new Double(41.0);\n\n    opens[11]  = new Double(44.0);\n\n    closes[11] = new Double(41.0);\n\n    dates[12]  = createDate(2001, Calendar.JANUARY,17);\n\n    highs[12]  = new Double(60.0);\n\n    lows[12]   = new Double(30.0);\n\n    opens[12]  = new Double(34.0);\n\n    closes[12] = new Double(44.0);\n\n    dates[13]  = createDate(2001, Calendar.JANUARY,18);\n\n    highs[13]  = new Double(58.0);\n\n    lows[13]   = new Double(44.0);\n\n    opens[13]  = new Double(54.0);\n\n    closes[13] = new Double(56.0);\n\n    dates[14]  = createDate(2001, Calendar.JANUARY,19);\n\n    highs[14]  = new Double(54.0);\n\n    lows[14]   = new Double(32.0);\n\n    opens[14]  = new Double(42.0);\n\n    closes[14] = new Double(53.0);\n\n    dates[15]  = createDate(2001, Calendar.JANUARY,20);\n\n    highs[15]  = new Double(53.0);\n\n    lows[15]   = new Double(39.0);\n\n    opens[15]  = new Double(50.0);\n\n    closes[15] = new Double(49.0);\n\n    dates[16]  = createDate(2001, Calendar.JANUARY,21);\n\n    highs[16]  = new Double(47.0);\n\n    lows[16]   = new Double(33.0);\n\n    opens[16]  = new Double(41.0);\n\n    closes[16] = new Double(40.0);\n\n    dates[17]  = createDate(2001, Calendar.JANUARY,22);\n\n    highs[17]  = new Double(55.0);\n\n    lows[17]   = new Double(37.0);\n\n    opens[17]  = new Double(43.0);\n\n    closes[17] = new Double(45.0);\n\n    dates[18]  = createDate(2001, Calendar.JANUARY,23);\n\n    highs[18]  = new Double(54.0);\n\n    lows[18]   = new Double(42.0);\n\n    opens[18]  = new Double(50.0);\n\n    closes[18] = new Double(42.0);\n\n    dates[19]  = createDate(2001, Calendar.JANUARY,24);\n\n    highs[19]  = new Double(48.0);\n\n    lows[19]   = new Double(37.0);\n\n    opens[19]  = new Double(37.0);\n\n    closes[19] = new Double(47.0);\n\n    dates[20]  = createDate(2001, Calendar.JANUARY,25);\n\n    highs[20]  = new Double(58.0);\n\n    lows[20]   = new Double(33.0);\n\n    opens[20]  = new Double(39.0);\n\n    closes[20] = new Double(41.0);\n\n    dates[21]  = createDate(2001, Calendar.JANUARY,26);\n\n    highs[21]  = new Double(47.0);\n\n    lows[21]   = new Double(31.0);\n\n    opens[21]  = new Double(36.0);\n\n    closes[21] = new Double(41.0);\n\n    dates[22]  = createDate(2001, Calendar.JANUARY,27);\n\n    highs[22]  = new Double(58.0);\n\n    lows[22]   = new Double(44.0);\n\n    opens[22]  = new Double(49.0);\n\n    closes[22] = new Double(44.0);\n\n    dates[23]  = createDate(2001, Calendar.JANUARY,28);\n\n    highs[23]  = new Double(46.0);\n\n    lows[23]   = new Double(41.0);\n\n    opens[23]  = new Double(43.0);\n\n    closes[23] = new Double(44.0);\n\n    dates[24]  = createDate(2001, Calendar.JANUARY,29);\n\n    highs[24]  = new Double(56.0);\n\n    lows[24]   = new Double(39.0);\n\n    opens[24]  = new Double(39.0);\n\n    closes[24] = new Double(51.0);\n\n    dates[25]  = createDate(2001, Calendar.JANUARY,30);\n\n    highs[25]  = new Double(56.0);\n\n    lows[25]   = new Double(39.0);\n\n    opens[25]  = new Double(47.0);\n\n    closes[25] = new Double(49.0);\n\n    dates[26]  = createDate(2001, Calendar.JANUARY,31);\n\n    highs[26]  = new Double(53.0);\n\n    lows[26]   = new Double(39.0);\n\n    opens[26]  = new Double(52.0);\n\n    closes[26] = new Double(47.0);\n\n    dates[27]  = createDate(2001, Calendar.FEBRUARY,1);\n\n    highs[27]  = new Double(51.0);\n\n    lows[27]   = new Double(30.0);\n\n    opens[27]  = new Double(45.0);\n\n    closes[27] = new Double(47.0);\n\n    dates[28]  = createDate(2001, Calendar.FEBRUARY,2);\n\n    highs[28]  = new Double(47.0);\n\n    lows[28]   = new Double(30.0);\n\n    opens[28]  = new Double(34.0);\n\n    closes[28] = new Double(46.0);\n\n    dates[29]  = createDate(2001, Calendar.FEBRUARY,3);\n\n    highs[29]  = new Double(57.0);\n\n    lows[29]   = new Double(37.0);\n\n    opens[29]  = new Double(44.0);\n\n    closes[29] = new Double(56.0);\n\n    dates[30]  = createDate(2001, Calendar.FEBRUARY,4);\n\n    highs[30]  = new Double(49.0);\n\n    lows[30]   = new Double(40.0);\n\n    opens[30]  = new Double(47.0);\n\n    closes[30] = new Double(44.0);\n\n    dates[31]  = createDate(2001, Calendar.FEBRUARY,5);\n\n    highs[31]  = new Double(46.0);\n\n    lows[31]   = new Double(38.0);\n\n    opens[31]  = new Double(43.0);\n\n    closes[31] = new Double(40.0);\n\n    dates[32]  = createDate(2001, Calendar.FEBRUARY,6);\n\n    highs[32]  = new Double(55.0);\n\n    lows[32]   = new Double(38.0);\n\n    opens[32]  = new Double(39.0);\n\n    closes[32] = new Double(53.0);\n\n    dates[33]  = createDate(2001, Calendar.FEBRUARY,7);\n\n    highs[33]  = new Double(50.0);\n\n    lows[33]   = new Double(33.0);\n\n    opens[33]  = new Double(37.0);\n\n    closes[33] = new Double(37.0);\n\n    dates[34]  = createDate(2001, Calendar.FEBRUARY,8);\n\n    highs[34]  = new Double(59.0);\n\n    lows[34]   = new Double(34.0);\n\n    opens[34]  = new Double(57.0);\n\n    closes[34] = new Double(43.0);\n\n    dates[35]  = createDate(2001, Calendar.FEBRUARY,9);\n\n    highs[35]  = new Double(48.0);\n\n    lows[35]   = new Double(39.0);\n\n    opens[35]  = new Double(46.0);\n\n    closes[35] = new Double(47.0);\n\n    dates[36]  = createDate(2001, Calendar.FEBRUARY,10);\n\n    highs[36]  = new Double(55.0);\n\n    lows[36]   = new Double(30.0);\n\n    opens[36]  = new Double(37.0);\n\n    closes[36] = new Double(30.0);\n\n    dates[37]  = createDate(2001, Calendar.FEBRUARY,11);\n\n    highs[37]  = new Double(60.0);\n\n    lows[37]   = new Double(32.0);\n\n    opens[37]  = new Double(56.0);\n\n    closes[37] = new Double(36.0);\n\n    dates[38]  = createDate(2001, Calendar.FEBRUARY,12);\n\n    highs[38]  = new Double(56.0);\n\n    lows[38]   = new Double(42.0);\n\n    opens[38]  = new Double(53.0);\n\n    closes[38] = new Double(54.0);\n\n    dates[39]  = createDate(2001, Calendar.FEBRUARY,13);\n\n    highs[39]  = new Double(49.0);\n\n    lows[39]   = new Double(42.0);\n\n    opens[39]  = new Double(45.0);\n\n    closes[39] = new Double(42.0);\n\n    dates[40]  = createDate(2001, Calendar.FEBRUARY,14);\n\n    highs[40]  = new Double(55.0);\n\n    lows[40]   = new Double(42.0);\n\n    opens[40]  = new Double(47.0);\n\n    closes[40] = new Double(54.0);\n\n     dates[41]  = createDate(2001, Calendar.FEBRUARY,15);\n\n    highs[41]  = new Double(49.0);\n\n    lows[41]   = new Double(35.0);\n\n    opens[41]  = new Double(38.0);\n\n    closes[41] = new Double(35.0);\n\n    dates[42]  = createDate(2001, Calendar.FEBRUARY,16);\n\n    highs[42]  = new Double(47.0);\n\n    lows[42]   = new Double(38.0);\n\n    opens[42]  = new Double(43.0);\n\n    closes[42] = new Double(42.0);\n\n    dates[43]  = createDate(2001, Calendar.FEBRUARY,17);\n\n    highs[43]  = new Double(53.0);\n\n    lows[43]   = new Double(42.0);\n\n    opens[43]  = new Double(47.0);\n\n    closes[43] = new Double(48.0);\n\n    dates[44]  = createDate(2001, Calendar.FEBRUARY,18);\n\n    highs[44]  = new Double(47.0);\n\n    lows[44]   = new Double(44.0);\n\n    opens[44]  = new Double(46.0);\n\n    closes[44] = new Double(44.0);\n\n    dates[45]  = createDate(2001, Calendar.FEBRUARY,19);\n\n    highs[45]  = new Double(46.0);\n\n    lows[45]   = new Double(40.0);\n\n    opens[45]  = new Double(43.0);\n\n    closes[45] = new Double(44.0);\n\n    dates[46]  = createDate(2001, Calendar.FEBRUARY,20);\n\n    highs[46]  = new Double(48.0);\n\n    lows[46]   = new Double(41.0);\n\n    opens[46]  = new Double(46.0);\n\n    closes[46] = new Double(41.0);\n\n"
3744,setRange,CombinedHorizontalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedHorizontalNumberAxis.java,210,221,12,/**\n\n   * Sets our AxisRange (min/max). This is done after a CombinedPlot has\n\n   * has calculated the overall range of all CombinedAxis that share the same\n\n   * Axis for all Plots. This makes all plots display the complete range of\n\n   * their Datasets.\n\n   */\n,22,  public void setRange(AxisRange range) {\n\n    setAutoRange(false);\n\n    Number min = (Number)range.getMin();\n\n    Number max = (Number)range.getMax();\n\n    setMinimumAxisValue(min.doubleValue());\n\n    setMaximumAxisValue(max.doubleValue());\n\n    if (visible) {\n\n      HorizontalNumberAxis axis = (HorizontalNumberAxis)getParentAxis();\n\n      axis.setAutoRange(false);\n\n      axis.setMinimumAxisValue(min.doubleValue());\n\n      axis.setMaximumAxisValue(max.doubleValue());\n\n
3745,reserveHeight,CombinedHorizontalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedHorizontalNumberAxis.java,152,160,14,"/**\n\n   * Returns the height required to draw the axis in the specified draw area. If\n\n   * the axis is not visible, returns zero.\n\n   * @param g2 The graphics device;\n\n   * @param plot The plot that the axis belongs to;\n\n   * @param drawArea The area within which the plot should be drawn;\n\n   */\n",18,"  public double reserveHeight(Graphics2D g2, Plot plot, Rectangle2D drawArea) {\n\n    if (!visible) {\n\n      return 0;\n\n    }\n\n    else if (reserveHeight > 0) {\n\n      return reserveHeight;\n\n    }\n\n    else {\n\n      return axis.reserveHeight(g2, plot, drawArea);\n\n"
3746,setVisible,CombinedHorizontalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedHorizontalNumberAxis.java,231,232,18,"/**\n\n   * Sets the visible flag on or off for this combined axis. A visible axis will\n\n   * display the axis title, ticks and legend depending on the parent's\n\n   * attributes. An invisible axis will not display anything. If the invisible\n\n   * axis isContainer(), then it occupies space on the graphic device.\n\n   */\n\n --------------\n\n//////////////////////////////////////////////////////////////////////////////\n\n --------------\n",4,  public void setVisible(boolean flag) {\n\n    visible = flag;\n\n
3747,getRange,CombinedHorizontalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedHorizontalNumberAxis.java,198,201,5,/**\n\n   * Returns the AxisRange (min/max) of our Axis\n\n   */,8,"  public AxisRange getRange() {\n\n    autoAdjustRange();\n\n    return (new NumberAxisRange(new Double(getMinimumAxisValue()),\n\n                  new Double(getMaximumAxisValue())));\n\n"
3748,getLowValue,SampleHighLowDataset,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/demo/SampleHighLowDataset.java,119,123,11,"/**\n\n   * Returns the low-value for the specified series and item.  Series are numbered 0, 1, ...\n\n   * @param series The index (zero-based) of the series;\n\n   * @param item The index (zero-based) of the required item;\n\n   * @return The low-value for the specified series and item.\n\n   */",10,"  public Number getLowValue(int series, int item) {\n\n    if (series==0) {\n\n      return lows[item];\n\n    }\n\n    else return null;\n\n"
3749,getOpenValue,SampleHighLowDataset,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/demo/SampleHighLowDataset.java,132,136,11,"/**\n\n   * Returns the open-value for the specified series and item.  Series are numbered 0, 1, ...\n\n   * @param series The index (zero-based) of the series;\n\n   * @param item The index (zero-based) of the required item;\n\n   * @return The open-value for the specified series and item.\n\n   */",10,"  public Number getOpenValue(int series, int item) {\n\n    if (series==0) {\n\n      return opens[item];\n\n    }\n\n    else return null;\n\n"
3750,getHighValue,SampleHighLowDataset,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/demo/SampleHighLowDataset.java,106,110,11,"/**\n\n   * Returns the high-value for the specified series and item.  Series are numbered 0, 1, ...\n\n   * @param series The index (zero-based) of the series;\n\n   * @param item The index (zero-based) of the required item;\n\n   * @return The high-value for the specified series and item.\n\n   */",10,"  public Number getHighValue(int series, int item) {\n\n    if (series==0) {\n\n      return highs[item];\n\n    }\n\n    else return null;\n\n"
3751,CombinedHorizontalNumberAxis,CombinedHorizontalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedHorizontalNumberAxis.java,75,104,9,/**\n\n   * Constructs a blank horizontal number axis.\n\n   * @param axis Parent HorizontalNumberAxis to take as reference.\n\n   * @param display Indicates if the axis is visible\n\n   */,56,"  public CombinedHorizontalNumberAxis(HorizontalNumberAxis axis, boolean visible) {\n\n    super(axis.getLabel(),\n\n        axis.getLabelFont(),\n\n        axis.getLabelPaint(),\n\n        axis.getLabelInsets(),\n\n        axis.isTickLabelsVisible(),\n\n        axis.getTickLabelFont(),\n\n        axis.getTickLabelPaint(),\n\n        axis.getTickLabelInsets(),\n\n        axis.getVerticalTickLabels(),\n\n        axis.isTickMarksVisible(),\n\n        axis.getTickMarkStroke(),\n\n        axis.isAutoRange(),\n\n        axis.autoRangeIncludesZero(),\n\n        axis.getAutoRangeMinimumSize(),\n\n        axis.getMinimumAxisValue(),\n\n        axis.getMaximumAxisValue(),\n\n        axis.isInverted(),\n\n        axis.isAutoTickUnitSelection(),\n\n        axis.getTickUnit(),\n\n        axis.isGridLinesVisible(),\n\n        axis.getGridStroke(),\n\n        axis.getGridPaint(),\n\n        axis.getCrosshairValue(),\n\n        axis.getCrosshairStroke(),\n\n        axis.getCrosshairPaint());\n\n    this.axis = axis;\n\n    this.visible = visible;\n\n"
3752,getYValue,SampleHighLowDataset,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/demo/SampleHighLowDataset.java,93,97,11,"/**\n\n   * Returns the y-value for the specified series and item.  Series are numbered 0, 1, ...\n\n   * @param series The index (zero-based) of the series;\n\n   * @param item The index (zero-based) of the required item;\n\n   * @return The y-value for the specified series and item.\n\n   */",10,"  public Number getYValue(int series, int item) {\n\n    if (series==0) {\n\n      return closes[item];\n\n    }\n\n    else return null;\n\n"
3753,getParentAxis,CombinedHorizontalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedHorizontalNumberAxis.java,191,192,5,/**\n\n   * Returns our parent axis.\n\n   */,4,  public Axis getParentAxis() {\n\n    return axis;\n\n
3754,getItemCount,SampleHighLowDataset,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/demo/SampleHighLowDataset.java,177,178,9,/**\n\n   * Returns the number of items in the specified series.\n\n   * @param series The index (zero-based) of the series;\n\n   * @return The number of items in the specified series.\n\n   */,4,  public int getItemCount(int series) {\n\n    return 47;  // one series with 47 items in this sample\n\n
3755,SampleHighLowDataset,SampleHighLowDataset,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/demo/SampleHighLowDataset.java,65,66,5,/**\n\n   * Default constructor.\n\n   */,4,  public SampleHighLowDataset() {\n\n    this.initialiseData();\n\n
3756,getSeriesCount,SampleHighLowDataset,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/demo/SampleHighLowDataset.java,156,157,7,"/**\n\n   * Returns the number of series in the data source, ONE in this sample.\n\n   * @return The number of series in the data source.\n\n   */",4,  public int getSeriesCount() {\n\n    return 1;\n\n
3757,draw,CombinedHorizontalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/CombinedHorizontalNumberAxis.java,119,135,15,"/**\n\n   * If the axis is not visible, just draws grid lines if needed, but no\n\n   * horizontal axis labels.\n\n   * @param g2 The graphics device;\n\n   * @param drawArea The area within which the chart should be drawn;\n\n   * @param plotArea The area within which the plot should be drawn (a subset of the drawArea);\n\n   */\n\n",32,"  public void draw(Graphics2D g2, Rectangle2D drawArea, Rectangle2D plotArea) {\n\n    if (visible) {\n\n      axis.draw(g2, drawArea, plotArea);\n\n    }\n\n    else {\n\n      if (gridLinesVisible) {\n\n        refreshTicks(g2, drawArea, plotArea);\n\n        Iterator iterator = ticks.iterator();\n\n        while (iterator.hasNext()) {\n\n          Tick tick = (Tick)iterator.next();\n\n          float xx = (float)translateValueToJava2D(tick.getNumericalValue(), plotArea);\n\n          g2.setStroke(gridStroke);\n\n          g2.setPaint(gridPaint);\n\n          Line2D gridline = new Line2D.Float(xx, (float)plotArea.getMaxY(), xx,\n\n                               (float)plotArea.getMinY());\n\n          g2.draw(gridline);\n\n"
3758,getCloseValue,SampleHighLowDataset,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/demo/SampleHighLowDataset.java,145,149,11,"/**\n\n   * Returns the close-value for the specified series and item.  Series are numbered 0, 1, ...\n\n   * @param series The index (zero-based) of the series;\n\n   * @param item The index (zero-based) of the required item;\n\n   * @return The close-value for the specified series and item.\n\n   */",10,"  public Number getCloseValue(int series, int item) {\n\n    if (series==0) {\n\n      return closes[item];\n\n    }\n\n    else return null;\n\n"
3759,getXValue,SampleHighLowDataset,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/demo/SampleHighLowDataset.java,75,76,11,"/**\n\n   * Returns the x-value for the specified series and item.  Series are numbered 0, 1, ...\n\n   * @param series The index (zero-based) of the series;\n\n   * @param item The index (zero-based) of the required item;\n\n   * @return The x-value for the specified series and item.\n\n   */",4,"  public Number getXValue(int series, int item) {\n\n    return new Long(dates[item].getTime());\n\n"
3760,reserveAxisArea,OverlaidVerticalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/OverlaidVerticalNumberAxis.java,132,144,15,/**\n\n   * Returns area in which the axis will be displayed. The list is our axes is\n\n   * checked and the first non zero area is returned.\n\n   * @param g2 The graphics device;\n\n   * @param plot A reference to the plot;\n\n   * @param drawArea The area within which the plot and axes should be drawn;\n\n   * @param reservedWidth The space already reserved for the vertical axis;\n\n   */,24,"  public Rectangle2D reserveAxisArea(Graphics2D g2, Plot plot, Rectangle2D drawArea,\n\n                     double reservedWidth) {\n\n    Rectangle2D empty = new Rectangle2D.Double();\n\n    Iterator iter = axes.iterator();\n\n    while (iter.hasNext()) {\n\n      VerticalAxis axis = (VerticalAxis)iter.next();\n\n      Rectangle2D area = axis.reserveAxisArea(g2, plot, drawArea, reservedWidth);\n\n      if (!area.equals(empty)) {\n\n        return area;\n\n      }\n\n    }\n\n    return empty;\n\n"
3762,reserveWidth,OverlaidVerticalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/OverlaidVerticalNumberAxis.java,111,121,13,/**\n\n   * Returns the width required to draw the axis in the specified draw area. The\n\n   * list of our axes is checked and the first non zero width is returned.\n\n   * @param g2 The graphics device;\n\n   * @param plot The plot that the axis belongs to;\n\n   * @param drawArea The area within which the plot should be drawn;\n\n   */,20,"  public double reserveWidth(Graphics2D g2, Plot plot, Rectangle2D drawArea) {\n\n    Iterator iter = axes.iterator();\n\n    while (iter.hasNext()) {\n\n      VerticalAxis axis = (VerticalAxis)iter.next();\n\n      double width = axis.reserveWidth(g2, plot, drawArea);\n\n      if (width != 0) {\n\n        return width;\n\n      }\n\n    }\n\n    return 0;\n\n"
3763,OverlaidVerticalNumberAxis,OverlaidVerticalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/OverlaidVerticalNumberAxis.java,62,82,9,/**\n\n   * Constructor.\n\n   * @param plot CombinedPlot where this OverlaidVerticalNumberAxis will be\n\n   *    contained.\n\n   */,36,"  public OverlaidVerticalNumberAxis(CombinedPlot plot) {\n\n    super((VerticalNumberAxis)plot.getVerticalAxis(), false);\n\n    this.plot = plot;\n\n    this.axes = plot.getVerticalAxes();\n\n    // validate type of axes and tell each axis that they are overlaid\n\n    boolean oneVisible = false;\n\n    Iterator iter = axes.iterator();\n\n    while (iter.hasNext()) {\n\n      Object axis = iter.next();\n\n      if ((axis instanceof CombinedVerticalNumberAxis)) {\n\n        CombinedVerticalNumberAxis combAxis = (CombinedVerticalNumberAxis)axis;\n\n        oneVisible |= combAxis.isVisible();\n\n        if (iter.hasNext() || oneVisible) {\n\n          combAxis.setGridLinesVisible(false);\n\n        }\n\n      } else {\n\n        throw new IllegalArgumentException(""Can not combine "" + axis.getClass()\n\n                     + "" into "" + this.getClass() );\n\n"
3764,getRange,OverlaidVerticalNumberAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/OverlaidVerticalNumberAxis.java,155,156,5,/**\n\n   * Returns the AxisRange (min/max) of our Axis\n\n   */,4,  public AxisRange getRange() {\n\n    return plot.getRange(axes);\n\n
3765,OverlaidHorizontalDateAxis,OverlaidHorizontalDateAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/OverlaidHorizontalDateAxis.java,65,83,9,/**\n\n   * Constructor.\n\n   * @param plot CombinedPlot where this OverlaidHorizontalDateAxis will be\n\n   *    contained.\n\n   */,36,"  public OverlaidHorizontalDateAxis(CombinedPlot plot) {\n\n    super((HorizontalDateAxis)plot.getHorizontalAxis(), false);\n\n    this.plot = plot;\n\n    this.axes = plot.getHorizontalAxes();\n\n    // validate type of axes and tell each axis that it\'s overlaid\n\n    boolean oneVisible = false;\n\n    Iterator iter = axes.iterator();\n\n    while (iter.hasNext()) {\n\n      Object axis = iter.next();\n\n      if ((axis instanceof CombinedHorizontalDateAxis)) {\n\n        CombinedHorizontalDateAxis combAxis = (CombinedHorizontalDateAxis)axis;\n\n        oneVisible |= combAxis.isVisible();\n\n        if (iter.hasNext() || oneVisible) {\n\n          combAxis.setGridLinesVisible(false);\n\n        }\n\n      } else {\n\n      throw new IllegalArgumentException(""Can not combine "" + axis.getClass()\n\n                         + "" into "" + this.getClass() );\n\n"
3766,reserveAxisArea,OverlaidHorizontalDateAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/OverlaidHorizontalDateAxis.java,132,143,15,/**\n\n   * Returns area in which the axis will be displayed. The list is our axes is\n\n   * checked and the first non zero area is returned.\n\n   * @param g2 The graphics device;\n\n   * @param plot A reference to the plot;\n\n   * @param drawArea The area within which the plot and axes should be drawn;\n\n   * @param reservedWidth The space already reserved for the vertical axis;\n\n   */,24,"  public Rectangle2D reserveAxisArea(Graphics2D g2, Plot plot, Rectangle2D drawArea,\n\n                     double reservedWidth) {\n\n    Rectangle2D empty = new Rectangle2D.Double();\n\n    Iterator iter = axes.iterator();\n\n    while (iter.hasNext()) {\n\n      HorizontalAxis axis = (HorizontalAxis)iter.next();\n\n      Rectangle2D area = axis.reserveAxisArea(g2, plot, drawArea, reservedWidth);\n\n      if (!area.equals(empty)) {\n\n        return area;\n\n      }\n\n    }\n\n    return empty;\n\n"
3767,getRange,OverlaidHorizontalDateAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/OverlaidHorizontalDateAxis.java,153,154,5,/**\n\n   * Returns the AxisRange (min/max) of our Axis\n\n   */,4,  public AxisRange getRange() {\n\n    return plot.getRange(axes);\n\n
3768,reserveHeight,OverlaidHorizontalDateAxis,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/combination/OverlaidHorizontalDateAxis.java,112,121,13,/**\n\n   * Returns the height required to draw the axis in the specified draw area. The\n\n   * list of our axes is checked and the first non zero height is returned.\n\n   * @param g2 The graphics device;\n\n   * @param plot The plot that the axis belongs to;\n\n   * @param drawArea The area within which the plot should be drawn;\n\n   */,20,"  public double reserveHeight(Graphics2D g2, Plot plot, Rectangle2D drawArea) {\n\n    Iterator iter = axes.iterator();\n\n    while (iter.hasNext()) {\n\n      HorizontalAxis axis = (HorizontalAxis)iter.next();\n\n      double height = axis.reserveHeight(g2, plot, drawArea);\n\n      if (height != 0) {\n\n        return height;\n\n      }\n\n    }\n\n    return 0;\n\n"
3770,createHighLowDataset,JFreeChartServletDemo,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/demo/JFreeChartServletDemo.java,150,389,5,/**\n\n   * Creates and returns a sample high-low dataset for the demo.  Added by Andrzej Porebski.\n\n   */,384,"  public HighLowDataset createHighLowDataset() {\n\n    Object[][][] data = new Object[][][] { {\n\n      { createDate(1999, Calendar.JANUARY,4), new Double(47) },\n\n      { createDate(1999, Calendar.JANUARY,4), new Double(33) },\n\n      { createDate(1999, Calendar.JANUARY,4), new Double(35) },\n\n      { createDate(1999, Calendar.JANUARY,4), new Double(33) },\n\n      { createDate(1999, Calendar.JANUARY,5), new Double(47) },\n\n      { createDate(1999, Calendar.JANUARY,5), new Double(32) },\n\n      { createDate(1999, Calendar.JANUARY,5), new Double(41) },\n\n      { createDate(1999, Calendar.JANUARY,5), new Double(37) },\n\n      { createDate(1999, Calendar.JANUARY,6), new Double(49) },\n\n      { createDate(1999, Calendar.JANUARY,6), new Double(43) },\n\n      { createDate(1999, Calendar.JANUARY,6), new Double(46) },\n\n      { createDate(1999, Calendar.JANUARY,6), new Double(48) },\n\n      { createDate(1999, Calendar.JANUARY,7), new Double(51) },\n\n      { createDate(1999, Calendar.JANUARY,7), new Double(39) },\n\n      { createDate(1999, Calendar.JANUARY,7), new Double(40) },\n\n      { createDate(1999, Calendar.JANUARY,7), new Double(47) },\n\n      { createDate(1999, Calendar.JANUARY,8), new Double(60) },\n\n      { createDate(1999, Calendar.JANUARY,8), new Double(40) },\n\n      { createDate(1999, Calendar.JANUARY,8), new Double(46) },\n\n      { createDate(1999, Calendar.JANUARY,8), new Double(53) },\n\n      { createDate(1999, Calendar.JANUARY,9), new Double(62) },\n\n      { createDate(1999, Calendar.JANUARY,9), new Double(55) },\n\n      { createDate(1999, Calendar.JANUARY,9), new Double(57) },\n\n      { createDate(1999, Calendar.JANUARY,9), new Double(61) },\n\n      { createDate(1999, Calendar.JANUARY,10), new Double(65) },\n\n      { createDate(1999, Calendar.JANUARY,10), new Double(56) },\n\n      { createDate(1999, Calendar.JANUARY,10), new Double(62) },\n\n      { createDate(1999, Calendar.JANUARY,10), new Double(59) },\n\n      { createDate(1999, Calendar.JANUARY,11), new Double(55) },\n\n      { createDate(1999, Calendar.JANUARY,11), new Double(43) },\n\n      { createDate(1999, Calendar.JANUARY,11), new Double(45) },\n\n      { createDate(1999, Calendar.JANUARY,11), new Double(47) },\n\n      { createDate(1999, Calendar.JANUARY,12), new Double(54) },\n\n      { createDate(1999, Calendar.JANUARY,12), new Double(33) },\n\n      { createDate(1999, Calendar.JANUARY,12), new Double(40) },\n\n      { createDate(1999, Calendar.JANUARY,12), new Double(51) },\n\n      { createDate(1999, Calendar.JANUARY,13), new Double(58) },\n\n      { createDate(1999, Calendar.JANUARY,13), new Double(42) },\n\n      { createDate(1999, Calendar.JANUARY,13), new Double(44) },\n\n      { createDate(1999, Calendar.JANUARY,13), new Double(57) },\n\n      { createDate(1999, Calendar.JANUARY,14), new Double(54) },\n\n      { createDate(1999, Calendar.JANUARY,14), new Double(38) },\n\n      { createDate(1999, Calendar.JANUARY,14), new Double(43) },\n\n      { createDate(1999, Calendar.JANUARY,14), new Double(52) },\n\n      { createDate(1999, Calendar.JANUARY,15), new Double(48) },\n\n      { createDate(1999, Calendar.JANUARY,15), new Double(41) },\n\n      { createDate(1999, Calendar.JANUARY,15), new Double(44) },\n\n      { createDate(1999, Calendar.JANUARY,15), new Double(41) },\n\n      { createDate(1999, Calendar.JANUARY,17), new Double(60) },\n\n      { createDate(1999, Calendar.JANUARY,17), new Double(30) },\n\n      { createDate(1999, Calendar.JANUARY,17), new Double(34) },\n\n      { createDate(1999, Calendar.JANUARY,17), new Double(44) },\n\n      { createDate(1999, Calendar.JANUARY,18), new Double(58) },\n\n      { createDate(1999, Calendar.JANUARY,18), new Double(44) },\n\n      { createDate(1999, Calendar.JANUARY,18), new Double(54) },\n\n      { createDate(1999, Calendar.JANUARY,18), new Double(56) },\n\n      { createDate(1999, Calendar.JANUARY,19), new Double(54) },\n\n      { createDate(1999, Calendar.JANUARY,19), new Double(32) },\n\n      { createDate(1999, Calendar.JANUARY,19), new Double(42) },\n\n      { createDate(1999, Calendar.JANUARY,19), new Double(53) },\n\n      { createDate(1999, Calendar.JANUARY,20), new Double(53) },\n\n      { createDate(1999, Calendar.JANUARY,20), new Double(39) },\n\n      { createDate(1999, Calendar.JANUARY,20), new Double(50) },\n\n      { createDate(1999, Calendar.JANUARY,20), new Double(49) },\n\n      { createDate(1999, Calendar.JANUARY,21), new Double(47) },\n\n      { createDate(1999, Calendar.JANUARY,21), new Double(38) },\n\n      { createDate(1999, Calendar.JANUARY,21), new Double(41) },\n\n      { createDate(1999, Calendar.JANUARY,21), new Double(40) },\n\n      { createDate(1999, Calendar.JANUARY,22), new Double(55) },\n\n      { createDate(1999, Calendar.JANUARY,22), new Double(37) },\n\n      { createDate(1999, Calendar.JANUARY,22), new Double(43) },\n\n      { createDate(1999, Calendar.JANUARY,22), new Double(45) },\n\n      { createDate(1999, Calendar.JANUARY,23), new Double(54) },\n\n      { createDate(1999, Calendar.JANUARY,23), new Double(42) },\n\n      { createDate(1999, Calendar.JANUARY,23), new Double(50) },\n\n      { createDate(1999, Calendar.JANUARY,23), new Double(42) },\n\n      { createDate(1999, Calendar.JANUARY,24), new Double(48) },\n\n      { createDate(1999, Calendar.JANUARY,24), new Double(37) },\n\n      { createDate(1999, Calendar.JANUARY,24), new Double(37) },\n\n      { createDate(1999, Calendar.JANUARY,24), new Double(47) },\n\n      { createDate(1999, Calendar.JANUARY,25), new Double(58) },\n\n      { createDate(1999, Calendar.JANUARY,25), new Double(33) },\n\n      { createDate(1999, Calendar.JANUARY,25), new Double(39) },\n\n      { createDate(1999, Calendar.JANUARY,25), new Double(41) },\n\n      { createDate(1999, Calendar.JANUARY,26), new Double(47) },\n\n      { createDate(1999, Calendar.JANUARY,26), new Double(31) },\n\n      { createDate(1999, Calendar.JANUARY,26), new Double(36) },\n\n      { createDate(1999, Calendar.JANUARY,26), new Double(41) },\n\n      { createDate(1999, Calendar.JANUARY,27), new Double(58) },\n\n      { createDate(1999, Calendar.JANUARY,27), new Double(44) },\n\n      { createDate(1999, Calendar.JANUARY,27), new Double(49) },\n\n      { createDate(1999, Calendar.JANUARY,27), new Double(44) },\n\n      { createDate(1999, Calendar.JANUARY,28), new Double(46) },\n\n      { createDate(1999, Calendar.JANUARY,28), new Double(41) },\n\n      { createDate(1999, Calendar.JANUARY,28), new Double(43) },\n\n      { createDate(1999, Calendar.JANUARY,28), new Double(44) },\n\n      { createDate(1999, Calendar.JANUARY,29), new Double(56) },\n\n      { createDate(1999, Calendar.JANUARY,29), new Double(39) },\n\n      { createDate(1999, Calendar.JANUARY,29), new Double(39) },\n\n      { createDate(1999, Calendar.JANUARY,29), new Double(51) },\n\n      { createDate(1999, Calendar.JANUARY,30), new Double(56) },\n\n      { createDate(1999, Calendar.JANUARY,30), new Double(39) },\n\n      { createDate(1999, Calendar.JANUARY,30), new Double(47) },\n\n      { createDate(1999, Calendar.JANUARY,30), new Double(49) },\n\n      { createDate(1999, Calendar.JANUARY,31), new Double(53) },\n\n      { createDate(1999, Calendar.JANUARY,31), new Double(39) },\n\n      { createDate(1999, Calendar.JANUARY,31), new Double(52) },\n\n      { createDate(1999, Calendar.JANUARY,31), new Double(47) },\n\n      { createDate(1999, Calendar.FEBRUARY,1), new Double(51) },\n\n      { createDate(1999, Calendar.FEBRUARY,1), new Double(30) },\n\n      { createDate(1999, Calendar.FEBRUARY,1), new Double(45) },\n\n      { createDate(1999, Calendar.FEBRUARY,1), new Double(47) },\n\n      { createDate(1999, Calendar.FEBRUARY,2), new Double(47) },\n\n      { createDate(1999, Calendar.FEBRUARY,2), new Double(30) },\n\n      { createDate(1999, Calendar.FEBRUARY,2), new Double(34) },\n\n      { createDate(1999, Calendar.FEBRUARY,2), new Double(46) },\n\n      { createDate(1999, Calendar.FEBRUARY,3), new Double(57) },\n\n      { createDate(1999, Calendar.FEBRUARY,3), new Double(37) },\n\n      { createDate(1999, Calendar.FEBRUARY,3), new Double(44) },\n\n      { createDate(1999, Calendar.FEBRUARY,3), new Double(56) },\n\n      { createDate(1999, Calendar.FEBRUARY,4), new Double(49) },\n\n      { createDate(1999, Calendar.FEBRUARY,4), new Double(40) },\n\n      { createDate(1999, Calendar.FEBRUARY,4), new Double(47) },\n\n      { createDate(1999, Calendar.FEBRUARY,4), new Double(44) },\n\n      { createDate(1999, Calendar.FEBRUARY,5), new Double(46) },\n\n      { createDate(1999, Calendar.FEBRUARY,5), new Double(38) },\n\n      { createDate(1999, Calendar.FEBRUARY,5), new Double(43) },\n\n      { createDate(1999, Calendar.FEBRUARY,5), new Double(40) },\n\n      { createDate(1999, Calendar.FEBRUARY,6), new Double(55) },\n\n      { createDate(1999, Calendar.FEBRUARY,6), new Double(38) },\n\n      { createDate(1999, Calendar.FEBRUARY,6), new Double(39) },\n\n      { createDate(1999, Calendar.FEBRUARY,6), new Double(53) },\n\n      { createDate(1999, Calendar.FEBRUARY,7), new Double(50) },\n\n      { createDate(1999, Calendar.FEBRUARY,7), new Double(33) },\n\n      { createDate(1999, Calendar.FEBRUARY,7), new Double(37) },\n\n      { createDate(1999, Calendar.FEBRUARY,7), new Double(37) },\n\n      { createDate(1999, Calendar.FEBRUARY,8), new Double(59) },\n\n      { createDate(1999, Calendar.FEBRUARY,8), new Double(34) },\n\n      { createDate(1999, Calendar.FEBRUARY,8), new Double(57) },\n\n      { createDate(1999, Calendar.FEBRUARY,8), new Double(43) },\n\n      { createDate(1999, Calendar.FEBRUARY,9), new Double(48) },\n\n      { createDate(1999, Calendar.FEBRUARY,9), new Double(39) },\n\n      { createDate(1999, Calendar.FEBRUARY,9), new Double(46) },\n\n      { createDate(1999, Calendar.FEBRUARY,9), new Double(47) },\n\n      { createDate(1999, Calendar.FEBRUARY,10), new Double(55) },\n\n      { createDate(1999, Calendar.FEBRUARY,10), new Double(30) },\n\n      { createDate(1999, Calendar.FEBRUARY,10), new Double(37) },\n\n      { createDate(1999, Calendar.FEBRUARY,10), new Double(30) },\n\n      { createDate(1999, Calendar.FEBRUARY,11), new Double(60) },\n\n      { createDate(1999, Calendar.FEBRUARY,11), new Double(32) },\n\n      { createDate(1999, Calendar.FEBRUARY,11), new Double(56) },\n\n      { createDate(1999, Calendar.FEBRUARY,11), new Double(36) },\n\n      { createDate(1999, Calendar.FEBRUARY,12), new Double(56) },\n\n      { createDate(1999, Calendar.FEBRUARY,12), new Double(42) },\n\n      { createDate(1999, Calendar.FEBRUARY,12), new Double(53) },\n\n      { createDate(1999, Calendar.FEBRUARY,12), new Double(54) },\n\n      { createDate(1999, Calendar.FEBRUARY,13), new Double(49) },\n\n      { createDate(1999, Calendar.FEBRUARY,13), new Double(42) },\n\n      { createDate(1999, Calendar.FEBRUARY,13), new Double(45) },\n\n      { createDate(1999, Calendar.FEBRUARY,13), new Double(42) },\n\n      { createDate(1999, Calendar.FEBRUARY,14), new Double(55) },\n\n      { createDate(1999, Calendar.FEBRUARY,14), new Double(42) },\n\n      { createDate(1999, Calendar.FEBRUARY,14), new Double(47) },\n\n      { createDate(1999, Calendar.FEBRUARY,14), new Double(54) },\n\n      { createDate(1999, Calendar.FEBRUARY,15), new Double(49) },\n\n      { createDate(1999, Calendar.FEBRUARY,15), new Double(35) },\n\n      { createDate(1999, Calendar.FEBRUARY,15), new Double(38) },\n\n      { createDate(1999, Calendar.FEBRUARY,15), new Double(35) },\n\n      { createDate(1999, Calendar.FEBRUARY,16), new Double(47) },\n\n      { createDate(1999, Calendar.FEBRUARY,16), new Double(38) },\n\n      { createDate(1999, Calendar.FEBRUARY,16), new Double(43) },\n\n      { createDate(1999, Calendar.FEBRUARY,16), new Double(42) },\n\n      { createDate(1999, Calendar.FEBRUARY,17), new Double(53) },\n\n      { createDate(1999, Calendar.FEBRUARY,17), new Double(42) },\n\n      { createDate(1999, Calendar.FEBRUARY,17), new Double(47) },\n\n      { createDate(1999, Calendar.FEBRUARY,17), new Double(48) },\n\n      { createDate(1999, Calendar.FEBRUARY,18), new Double(47) },\n\n      { createDate(1999, Calendar.FEBRUARY,18), new Double(44) },\n\n      { createDate(1999, Calendar.FEBRUARY,18), new Double(46) },\n\n      { createDate(1999, Calendar.FEBRUARY,18), new Double(44) },\n\n      { createDate(1999, Calendar.FEBRUARY,19), new Double(46) },\n\n      { createDate(1999, Calendar.FEBRUARY,19), new Double(40) },\n\n      { createDate(1999, Calendar.FEBRUARY,19), new Double(43) },\n\n      { createDate(1999, Calendar.FEBRUARY,19), new Double(44) },\n\n      { createDate(1999, Calendar.FEBRUARY,20), new Double(48) },\n\n      { createDate(1999, Calendar.FEBRUARY,20), new Double(41) },\n\n      { createDate(1999, Calendar.FEBRUARY,20), new Double(46) },\n\n      { createDate(1999, Calendar.FEBRUARY,20), new Double(41) } }\n\n    };\n\n    return null;  // broken, needs fixing...\n\n"
3771,getColor,JFreeChartServletDemo,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/demo/JFreeChartServletDemo.java,70,84,7,/**\n\n   * Utility method to return a color.  Corresponds to the color selection in the\n\n   * HTML form.\n\n   */,28,  protected Color getColor(int color) {\n\n    switch (color % 11) {\n\n      case 0: return Color.white;\n\n      case 1: return Color.black;\n\n      case 2: return Color.blue;\n\n      case 3: return Color.green;\n\n      case 4: return Color.red;\n\n      case 5: return Color.yellow;\n\n      case 6: return Color.gray;\n\n      case 7 : return Color.orange;\n\n      case 8: return Color.cyan;\n\n      case 9: return Color.magenta;\n\n      case 10: return Color.pink;\n\n      default: return Color.white;\n\n
3772,createCategoryDataset,JFreeChartServletDemo,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/demo/JFreeChartServletDemo.java,92,107,5,/**\n\n   * Creates and returns a category dataset for the demo charts.\n\n   */,26,"  public CategoryDataset createCategoryDataset() {\n\n    Number[][] data = new Integer[][] {\n\n      { new Integer(10), new Integer(4), new Integer(15), new Integer(14) },\n\n      { new Integer(5), new Integer(7), new Integer(14), new Integer(3) },\n\n      { new Integer(6), new Integer(17), new Integer(12), new Integer(7) },\n\n      { new Integer(7), new Integer(15), new Integer(11), new Integer(0) },\n\n      { new Integer(8), new Integer(6), new Integer(10), new Integer(9) },\n\n      { new Integer(9), new Integer(8), new Integer(8), new Integer(6) },\n\n      { new Integer(10), new Integer(9), new Integer(7), new Integer(7) },\n\n      { new Integer(11), new Integer(13), new Integer(9), new Integer(9) },\n\n      { new Integer(3), new Integer(7), new Integer(11), new Integer(10) }\n\n    };\n\n    return new DefaultCategoryDataset(data);\n\n"
3773,createDateTime,JFreeChartServletDemo,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/demo/JFreeChartServletDemo.java,122,124,5,"/**\n\n   * Returns a java.util.Date for the specified year, month, day, hour and minute.\n\n   */",6,"  private Date createDateTime(int year, int month, int day, int hour, int minute) {\n\n    GregorianCalendar calendar = new GregorianCalendar(year, month, day, hour, minute);\n\n    return calendar.getTime();\n\n"
3774,doGet,JFreeChartServletDemo,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/demo/JFreeChartServletDemo.java,570,609,9,"/**\n\n   * Basic servlet method, answers requests fromt the browser.\n\n   * @param request HTTPServletRequest\n\n   * @param response HTTPServletResponse\n\n   */",70,"  public void doGet(HttpServletRequest request,\n\n           HttpServletResponse response) throws ServletException, IOException {\n\n    response.setContentType(""image/jpeg"");\n\n    int type = 1;\n\n    try {\n\n      type = Integer.parseInt( request.getParameter( ""type"" ) );\n\n    }\n\n    catch (Exception e) {\n\n    }\n\n    int  initGradColor= 0;\n\n    int  finalGradColor= 0;\n\n    try {\n\n      initGradColor = Integer.parseInt( request.getParameter( ""initGradColor"" ) );\n\n      finalGradColor = Integer.parseInt( request.getParameter( ""finalGradColor"" ) );\n\n    }\n\n    catch (Exception e) {\n\n    }\n\n    JFreeChart chart = createChart( type, initGradColor, finalGradColor );\n\n    int width = 400;\n\n    int height = 300;\n\n    try {\n\n      width = Integer.parseInt( request.getParameter( ""width"" ) );\n\n      height = Integer.parseInt( request.getParameter( ""height"" ) );\n\n    }\n\n    catch (Exception e) {\n\n    }\n\n    //BufferedImage img = draw( chart, width, height );\n\n    OutputStream out = response.getOutputStream();\n\n//    BufferedImage image = chart.createBufferedImage(width, height);\n\n//    JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder(out);\n\n//    JPEGEncodeParam param = encoder.getDefaultJPEGEncodeParam(image);\n\n//    param.setQuality(1.0f, true);\n\n//    encoder.encode(image, param);\n\n    ChartUtilities.writeChartAsJPEG(out, chart, width, height);\n\n    out.close();\n\n"
3775,createTestXYDataset,JFreeChartServletDemo,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/demo/JFreeChartServletDemo.java,130,143,5,/**\n\n   * Creates and returns a XYDataset for the demo charts.\n\n   */,24,"  public XYDataset createTestXYDataset() {\n\n    Object[][][] data = new Object[][][] { {\n\n      { createDateTime(2000, Calendar.OCTOBER, 18, 9, 5), new Double(10921.0) },\n\n      { createDateTime(2000, Calendar.OCTOBER, 18, 10, 6), new Double(10886.7) },\n\n      { createDateTime(2000, Calendar.OCTOBER, 18, 11, 6), new Double(10846.6) },\n\n      { createDateTime(2000, Calendar.OCTOBER, 18, 12, 6), new Double(10843.7) },\n\n      { createDateTime(2000, Calendar.OCTOBER, 18, 13, 6), new Double(10841.2) },\n\n      { createDateTime(2000, Calendar.OCTOBER, 18, 14, 6), new Double(10830.7) },\n\n      { createDateTime(2000, Calendar.OCTOBER, 18, 15, 6), new Double(10795.8) },\n\n      { createDateTime(2000, Calendar.OCTOBER, 18, 16, 7), new Double(10733.8) }\n\n    } };\n\n    return new DefaultXYDataset(data);\n\n"
3776,init,JFreeChartServletDemo,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/demo/JFreeChartServletDemo.java,558,562,5,/**\n\n   * Override init() to set up data used by invocations of this servlet.\n\n   */,8,  public void init(ServletConfig config) throws ServletException {\n\n    super.init(config);\n\n    // save servlet context\n\n    context = config.getServletContext();\n\n
3778,createDate,JFreeChartServletDemo,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/demo/JFreeChartServletDemo.java,114,116,5,"/**\n\n   * Returns a java.util.Date for the specified year, month and day.\n\n   */",6,"  private Date createDate(int year, int month, int day) {\n\n    GregorianCalendar calendar = new GregorianCalendar(year, month, day);\n\n    return calendar.getTime();\n\n"
3779,SampleXYDataset2,SampleXYDataset2,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/demo/SampleXYDataset2.java,62,68,5,/**\n\n   * Default constructor.\n\n   */,12,  public SampleXYDataset2() {\n\n    for (int series=0; series<SERIES_COUNT; series++) {\n\n      for (int item=0; item<ITEM_COUNT; item++) {\n\n        double x = (Math.random()-0.5) * RANGE;\n\n        xValues[series][item] = new Double(x);\n\n        yValues[series][item] = new Double((Math.random() - 0.5) * x * x);\n\n
3780,getYValue,SampleXYDataset2,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/demo/SampleXYDataset2.java,90,91,11,"/**\n\n   * Returns the y-value for the specified series and item.  Series are numbered 0, 1, ...\n\n   * @param series The index (zero-based) of the series;\n\n   * @param item The index (zero-based) of the required item;\n\n   * @return The y-value for the specified series and item.\n\n   */",4,"  public Number getYValue(int series, int item) {\n\n    return yValues[series][item];\n\n"
3781,getXValue,SampleXYDataset2,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/demo/SampleXYDataset2.java,80,81,11,"/**\n\n   * Returns the x-value for the specified series and item.  Series are numbered 0, 1, ...\n\n   * @param series The index (zero-based) of the series;\n\n   * @param item The index (zero-based) of the required item;\n\n   * @return The x-value for the specified series and item.\n\n   */",4,"  public Number getXValue(int series, int item) {\n\n    return xValues[series][item];\n\n"
3782,getSeriesName,SampleXYDataset2,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/demo/SampleXYDataset2.java,107,108,9,/**\n\n   * Returns the name of the series.\n\n   * @param series The index (zero-based) of the series;\n\n   * @return The name of the series.\n\n   */,4,"  public String getSeriesName(int series) {\n\n    return ""Sample ""+series;\n\n"
3783,getSeriesCount,SampleXYDataset2,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/demo/SampleXYDataset2.java,98,99,7,/**\n\n   * Returns the number of series in the data source.\n\n   * @return The number of series in the data source.\n\n   */,4,  public int getSeriesCount() {\n\n    return SERIES_COUNT;\n\n
3784,ToolTip,ToolTip,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/tooltips/ToolTip.java,59,65,9,/**\n\n   * Constructs a new tooltip.\n\n   * @param text The tooltip text.\n\n   * @param area The area that the tooltip is relevant to.\n\n   */,10,"  public ToolTip(String text, Shape area) {\n\n    // check arguments...\n\n    if (area==null) throw new IllegalArgumentException(""ToolTip(...): null area."");\n\n    this.text = text;\n\n    this.area = area;\n\n"
3785,getText,ToolTip,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/tooltips/ToolTip.java,72,73,7,/**\n\n   * Returns the tooltip text.\n\n   * @return The tooltip text.\n\n   */,4,  public String getText() {\n\n    return this.text;\n\n
3786,StandardToolTipsCollection,StandardToolTipsCollection,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/tooltips/StandardToolTipsCollection.java,55,56,5,/**\n\n   * Constructs a new tooltip collection (initially empty).\n\n   */,4,  public StandardToolTipsCollection() {\n\n    tooltips = new ArrayList();\n\n
3787,addToolTip,StandardToolTipsCollection,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/tooltips/StandardToolTipsCollection.java,71,73,9,/**\n\n   * Adds a tooltip.\n\n   * @param text The tooltip text.\n\n   * @param area The area that the tooltip is relevant to.\n\n   */,6,"  public void addToolTip(String text, Shape area) {\n\n    ToolTip tooltip = new ToolTip(text, area);\n\n    tooltips.add(tooltip);\n\n"
3788,clearToolTips,StandardToolTipsCollection,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/tooltips/StandardToolTipsCollection.java,62,63,5,/**\n\n   * Clears the tooltips.\n\n   */,4,  public void clearToolTips() {\n\n    tooltips.clear();\n\n
3789,getPlotPropertyEditPanel,ChartPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/ChartPropertyEditPanel.java,177,178,5,/**\n\n   * Returns a reference to the plot property sub-panel.\n\n   */,4,  public PlotPropertyEditPanel getPlotPropertyEditPanel() {\n\n    return plotPropertiesPanel;\n\n
3790,getTitlePropertyEditPanel,ChartPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/ChartPropertyEditPanel.java,163,164,5,/**\n\n   * Returns a reference to the title property sub-panel.\n\n   */,4,  public TitlePropertyEditPanel getTitlePropertyEditPanel() {\n\n    return titlePropertiesPanel;\n\n
3791,actionPerformed,ChartPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/ChartPropertyEditPanel.java,198,201,5,/**\n\n   * Handles user interactions with the panel.\n\n   */,8,"  public void actionPerformed(ActionEvent event) {\n\n    String command = event.getActionCommand();\n\n    if (command.equals(""BackgroundPaint"")) {\n\n      attemptModifyBackgroundPaint();\n\n"
3792,getBackgroundPaint,ChartPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/ChartPropertyEditPanel.java,191,192,5,/**\n\n   * Returns the current background paint.\n\n   */,4,  public Paint getBackgroundPaint() {\n\n    return background.getPaint();\n\n
3793,getAntiAlias,ChartPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/ChartPropertyEditPanel.java,184,185,5,/**\n\n   * Returns the current setting of the anti-alias flag.\n\n   */,4,  public boolean getAntiAlias() {\n\n    return antialias.isSelected();\n\n
3794,getLegendPropertyEditPanel,ChartPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/ChartPropertyEditPanel.java,170,171,5,/**\n\n   * Returns a reference to the legend property sub-panel.\n\n   */,4,  public LegendPropertyEditPanel getLegendPropertyEditPanel() {\n\n    return legendPropertiesPanel;\n\n
3795,ChartPropertyEditPanel,ChartPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/ChartPropertyEditPanel.java,71,157,7,/**\n\n   * Standard constructor - the property panel is made up of a number of sub-panels that are\n\n   * displayed in the tabbed pane.\n\n   */,142,"  public ChartPropertyEditPanel(JFreeChart chart) {\n\n    setLayout(new BorderLayout());\n\n    JPanel other = new JPanel(new BorderLayout());\n\n    other.setBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));\n\n    JPanel general = new JPanel(new BorderLayout());\n\n    general.setBorder(BorderFactory.createTitledBorder(\n\n                BorderFactory.createEtchedBorder(), ""General:""));\n\n    JPanel interior = new JPanel(new LCBLayout(6));\n\n    interior.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 5));\n\n    antialias = new JCheckBox(""Draw anti-aliased"");\n\n    antialias.setSelected(chart.getAntiAlias());\n\n    interior.add(antialias);\n\n    interior.add(new JLabel(""""));\n\n    interior.add(new JLabel(""""));\n\n    interior.add(new JLabel(""Background paint:""));\n\n    background = new PaintSample(chart.getChartBackgroundPaint());\n\n    interior.add(background);\n\n    JButton button = new JButton(""Select..."");\n\n    button.setActionCommand(""BackgroundPaint"");\n\n    button.addActionListener(this);\n\n    interior.add(button);\n\n    interior.add(new JLabel(""Series Paint:""));\n\n    JTextField info = new JTextField(""No editor implemented"");\n\n    info.setEnabled(false);\n\n    interior.add(info);\n\n    button = new JButton(""Edit..."");\n\n    button.setEnabled(false);\n\n    interior.add(button);\n\n    interior.add(new JLabel(""Series Stroke:""));\n\n    info = new JTextField(""No editor implemented"");\n\n    info.setEnabled(false);\n\n    interior.add(info);\n\n    button = new JButton(""Edit..."");\n\n    button.setEnabled(false);\n\n    interior.add(button);\n\n    interior.add(new JLabel(""Series Outline Paint:""));\n\n    info = new JTextField(""No editor implemented"");\n\n    info.setEnabled(false);\n\n    interior.add(info);\n\n    button = new JButton(""Edit..."");\n\n    button.setEnabled(false);\n\n    interior.add(button);\n\n    interior.add(new JLabel(""Series Outline Stroke:""));\n\n    info = new JTextField(""No editor implemented"");\n\n    info.setEnabled(false);\n\n    interior.add(info);\n\n    button = new JButton(""Edit..."");\n\n    button.setEnabled(false);\n\n    interior.add(button);\n\n    general.add(interior, BorderLayout.NORTH);\n\n    other.add(general, BorderLayout.NORTH);\n\n    JPanel parts = new JPanel(new BorderLayout());\n\n    //Title title = chart.getTitle();\n\n    Legend legend = chart.getLegend();\n\n    Plot plot = chart.getPlot();\n\n    JTabbedPane tabs = new JTabbedPane();\n\n    //StandardTitle t = (StandardTitle)title;\n\n    //titlePropertiesPanel = new TitlePropertyEditPanel(t);\n\n    //titlePropertiesPanel.setBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));\n\n    //tabs.addTab(""Title"", titlePropertiesPanel);\n\n    if (legend!=null) {\n\n      legendPropertiesPanel = new LegendPropertyEditPanel(legend);\n\n      legendPropertiesPanel.setBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));\n\n      tabs.addTab(""Legend"", legendPropertiesPanel);\n\n    }\n\n    plotPropertiesPanel = new PlotPropertyEditPanel(plot);\n\n    plotPropertiesPanel.setBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));\n\n    tabs.addTab(""Plot"", plotPropertiesPanel);\n\n    tabs.add(""Other"", other);\n\n    parts.add(tabs, BorderLayout.NORTH);\n\n    add(parts);\n\n"
3796,attemptModifyBackgroundPaint,ChartPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/ChartPropertyEditPanel.java,209,213,7,"/**\n\n   * Allows the user the opportunity to select a new background paint.  Uses JColorChooser,\n\n   * so we are only allowing a subset of all Paint objects to be selected (fix later).\n\n   */",10,"  private void attemptModifyBackgroundPaint() {\n\n    Color c;\n\n    c = JColorChooser.showDialog(this, ""Background Color"", Color.blue);\n\n    if (c!=null) {\n\n      background.setPaint(c);\n\n"
3799,getLabelFont,AxisPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/AxisPropertyEditPanel.java,227,228,5,/**\n\n   * Returns the current label font.\n\n   */,4,  public Font getLabelFont() {\n\n    return labelFont;\n\n
3800,attemptLabelFontSelection,AxisPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/AxisPropertyEditPanel.java,316,324,5,/**\n\n   * Presents a font selection dialog to the user.\n\n   */,14,"  private void attemptLabelFontSelection() {\n\n    FontChooserPanel panel = new FontChooserPanel(labelFont);\n\n    int result = JOptionPane.showConfirmDialog(this, panel, ""Font Selection"",\n\n      JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);\n\n    if (result==JOptionPane.OK_OPTION) {\n\n      labelFont = panel.getSelectedFont();\n\n      labelFontField.setText(labelFont.getFontName()+"" ""+labelFont.getSize());\n\n"
3801,getLabelInsets,AxisPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/AxisPropertyEditPanel.java,277,278,5,/**\n\n   * Returns the current label insets value\n\n   */,4,"  public Insets getLabelInsets() {\n\n    return (_labelInsets == null) ? new Insets(0,0,0,0) : _labelInsets;\n\n"
3802,isTickMarksVisible,AxisPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/AxisPropertyEditPanel.java,263,264,7,/**\n\n   * Returns the current value of the flag that determines whether or not tick marks are\n\n   * visible.\n\n   */,4,  public boolean isTickMarksVisible() {\n\n    return showTickMarksCheckBox.isSelected();\n\n
3803,getTickLabelPaint,AxisPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/AxisPropertyEditPanel.java,255,256,5,/**\n\n   * Returns the current tick label paint.\n\n   */,4,  public Paint getTickLabelPaint() {\n\n    return tickLabelPaintSample.getPaint();\n\n
3804,getLabelPaint,AxisPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/AxisPropertyEditPanel.java,234,235,5,/**\n\n   * Returns the current label paint.\n\n   */,4,  public Paint getLabelPaint() {\n\n    return labelPaintSample.getPaint();\n\n
3805,attemptModifyLabelPaint,AxisPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/AxisPropertyEditPanel.java,332,336,5,/**\n\n   * Allows the user the opportunity to change the outline paint.\n\n   */,10,"  private void attemptModifyLabelPaint() {\n\n    Color c;\n\n    c = JColorChooser.showDialog(this, ""Label Color"", Color.blue);\n\n    if (c!=null) {\n\n      labelPaintSample.setPaint(c);\n\n"
3806,attemptTickLabelFontSelection,AxisPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/AxisPropertyEditPanel.java,343,351,5,/**\n\n   * Presents a tick label font selection dialog to the user.\n\n   */,14,"  public void attemptTickLabelFontSelection() {\n\n    FontChooserPanel panel = new FontChooserPanel(tickLabelFont);\n\n    int result = JOptionPane.showConfirmDialog(this, panel, ""Font Selection"",\n\n      JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);\n\n    if (result==JOptionPane.OK_OPTION) {\n\n      tickLabelFont = panel.getSelectedFont();\n\n      tickLabelFontField.setText(tickLabelFont.getFontName()+"" ""+tickLabelFont.getSize());\n\n"
3807,getInstance,AxisPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/AxisPropertyEditPanel.java,98,107,7,/**\n\n   * A static method that returns a panel that is appropriate for the axis type.\n\n   * @param axis The axis whose properties are to be displayed/edited in the panel;\n\n   */,18,  public static AxisPropertyEditPanel getInstance(Axis axis) {\n\n    if (axis!=null) {\n\n      // figure out what type of axis we have and instantiate the appropriate panel\n\n      if (axis instanceof NumberAxis) {\n\n        return new NumberAxisPropertyEditPanel((NumberAxis)axis);\n\n      }\n\n      else return new AxisPropertyEditPanel(axis);\n\n    }\n\n    else return null;\n\n
3808,getLabel,AxisPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/AxisPropertyEditPanel.java,220,221,5,/**\n\n   * Returns the current axis label.\n\n   */,4,  public String getLabel() {\n\n    return label.getText();\n\n
3809,getOtherTabs,AxisPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/AxisPropertyEditPanel.java,284,285,5,/**\n\n   * Returns a reference to the tabbed pane.\n\n   */,4,  public JTabbedPane getOtherTabs() {\n\n    return otherTabs;\n\n
3810,editTickLabelInsets,AxisPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/AxisPropertyEditPanel.java,361,369,9,/**\n\n   * Presents insets chooser panel allowing user to modify tick label\'s\n\n   * individual insets values. Updates the current insets text field if edit\n\n   * is accepted.\n\n   */,16,"  private void editTickLabelInsets() {\n\n    InsetsChooserPanel panel = new InsetsChooserPanel(_tickLabelInsets);\n\n    int result =\n\n      JOptionPane.showConfirmDialog(this, panel, ""Edit Insets"",\n\n                      JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);\n\n    if (result==JOptionPane.OK_OPTION) {\n\n      _tickLabelInsets = panel.getInsets();\n\n      tickLabelInsetsTextField.setInsets(_tickLabelInsets);\n\n"
3811,editLabelInsets,AxisPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/AxisPropertyEditPanel.java,378,386,9,/**\n\n   * Presents insets chooser panel allowing user to modify label\'s\n\n   * individual insets values. Updates the current insets text field if edit\n\n   * is accepted.\n\n   */,16,"  private void editLabelInsets() {\n\n    InsetsChooserPanel panel = new InsetsChooserPanel(_labelInsets);\n\n    int result =\n\n      JOptionPane.showConfirmDialog(this, panel, ""Edit Insets"",\n\n                    JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);\n\n    if (result==JOptionPane.OK_OPTION) {\n\n      _labelInsets = panel.getInsets();\n\n      labelInsetsTextField.setInsets(_labelInsets);\n\n"
3812,AxisPropertyEditPanel,AxisPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/AxisPropertyEditPanel.java,116,213,9,/**\n\n   * Standard constructor: builds a panel for displaying/editing the properties of the specified\n\n   * axis.\n\n   * @param axis The axis whose properties are to be displayed/edited in the panel;\n\n   */,152,"  public AxisPropertyEditPanel(Axis axis) {\n\n    labelFont = axis.getLabelFont();\n\n    labelPaintSample = new PaintSample(axis.getLabelPaint());\n\n    tickLabelFont = axis.getTickLabelFont();\n\n    tickLabelPaintSample = new PaintSample(axis.getTickLabelPaint());\n\n    // Insets values\n\n    _tickLabelInsets = axis.getTickLabelInsets();\n\n    _labelInsets = axis.getLabelInsets();\n\n    setLayout(new BorderLayout());\n\n    JPanel general = new JPanel(new BorderLayout());\n\n    general.setBorder(BorderFactory.createTitledBorder(\n\n              BorderFactory.createEtchedBorder(), ""General:""));\n\n    JPanel interior = new JPanel(new LCBLayout(5));\n\n    interior.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 5));\n\n    interior.add(new JLabel(""Label:""));\n\n    label = new JTextField(axis.getLabel());\n\n    interior.add(label);\n\n    interior.add(new JPanel());\n\n    interior.add(new JLabel(""Font:""));\n\n    labelFontField = new FontDisplayField(labelFont);\n\n    interior.add(labelFontField);\n\n    JButton b = new JButton(""Select..."");\n\n    b.setActionCommand(""SelectLabelFont"");\n\n    b.addActionListener(this);\n\n    interior.add(b);\n\n    interior.add(new JLabel(""Paint:""));\n\n    interior.add(labelPaintSample);\n\n    b = new JButton(""Select..."");\n\n    b.setActionCommand(""SelectLabelPaint"");\n\n    b.addActionListener(this);\n\n    interior.add(b);\n\n    interior.add(new JLabel(""Label Insets:""));\n\n    b = new JButton(""Edit..."");\n\n    b.setActionCommand(""LabelInsets"");\n\n    b.addActionListener(this);\n\n    labelInsetsTextField = new InsetsTextField(_labelInsets);\n\n    interior.add(labelInsetsTextField);\n\n    interior.add(b);\n\n    interior.add(new JLabel(""Tick Label Insets:""));\n\n    b = new JButton(""Edit..."");\n\n    b.setActionCommand(""TickLabelInsets"");\n\n    b.addActionListener(this);\n\n    tickLabelInsetsTextField = new InsetsTextField(_tickLabelInsets);\n\n    interior.add(tickLabelInsetsTextField);\n\n    interior.add(b);\n\n    general.add(interior);\n\n    add(general, BorderLayout.NORTH);\n\n    slot1 = new JPanel(new BorderLayout());\n\n    JPanel other = new JPanel(new BorderLayout());\n\n    other.setBorder(BorderFactory.createTitledBorder(\n\n               BorderFactory.createEtchedBorder(), ""Other:""));\n\n    otherTabs = new JTabbedPane();\n\n    otherTabs.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 5));\n\n    JPanel ticks = new JPanel(new LCBLayout(3));\n\n    ticks.setBorder(BorderFactory.createEmptyBorder(4, 4, 4, 4));\n\n    showTickLabelsCheckBox = new JCheckBox(""Show tick labels"", axis.isTickLabelsVisible());\n\n    ticks.add(showTickLabelsCheckBox);\n\n    ticks.add(new JPanel());\n\n    ticks.add(new JPanel());\n\n    ticks.add(new JLabel(""Tick label font:""));\n\n    tickLabelFontField = new FontDisplayField(tickLabelFont);\n\n    ticks.add(tickLabelFontField);\n\n    b = new JButton(""Select..."");\n\n    b.setActionCommand(""SelectTickLabelFont"");\n\n    b.addActionListener(this);\n\n    ticks.add(b);\n\n    showTickMarksCheckBox = new JCheckBox(""Show tick marks"", axis.isTickMarksVisible());\n\n    ticks.add(showTickMarksCheckBox);\n\n    ticks.add(new JPanel());\n\n    ticks.add(new JPanel());\n\n    otherTabs.add(""Ticks"", ticks);\n\n    other.add(otherTabs);\n\n    slot1.add(other);\n\n    slot2 = new JPanel(new BorderLayout());\n\n    slot2.add(slot1, BorderLayout.NORTH);\n\n    add(slot2);\n\n"
3813,getTickLabelInsets,AxisPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/AxisPropertyEditPanel.java,270,271,5,/**\n\n   * Returns the current tick label insets value\n\n   */,4,"  public Insets getTickLabelInsets() {\n\n    return (_tickLabelInsets == null) ? new Insets(0,0,0,0) : _tickLabelInsets;\n\n"
3814,setAxisProperties,AxisPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/AxisPropertyEditPanel.java,393,403,5,/**\n\n   * Sets the properties of the specified axis to match the properties defined on this panel.\n\n   */,22,  public void setAxisProperties(Axis axis) {\n\n    axis.setLabel(this.getLabel());\n\n    axis.setLabelFont(this.getLabelFont());\n\n    axis.setLabelPaint(this.getLabelPaint());\n\n    axis.setTickMarksVisible(this.isTickMarksVisible());\n\n    // axis.setTickMarkStroke(this.getTickMarkStroke());\n\n    axis.setTickLabelsVisible(this.isTickLabelsVisible());\n\n    axis.setTickLabelFont(this.getTickLabelFont());\n\n    axis.setTickLabelPaint(this.getTickLabelPaint());\n\n    axis.setTickLabelInsets(this.getTickLabelInsets());\n\n    axis.setLabelInsets(this.getLabelInsets());\n\n
3815,isTickLabelsVisible,AxisPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/AxisPropertyEditPanel.java,241,242,5,/**\n\n   * Returns a flag that indicates whether or not the tick labels are visible.\n\n   */,4,  public boolean isTickLabelsVisible() {\n\n    return showTickLabelsCheckBox.isSelected();\n\n
3816,actionPerformed,AxisPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/AxisPropertyEditPanel.java,292,309,7,/**\n\n   * Handles user interaction with the property panel.\n\n   * @param event Information about the event that triggered the call to this method.\n\n   */,36,"  public void actionPerformed(ActionEvent event) {\n\n    String command = event.getActionCommand();\n\n    if (command.equals(""SelectLabelFont"")) {\n\n      attemptLabelFontSelection();\n\n    }\n\n    else if (command.equals(""SelectLabelPaint"")) {\n\n      attemptModifyLabelPaint();\n\n    }\n\n    else if (command.equals(""SelectTickLabelFont"")) {\n\n      attemptTickLabelFontSelection();\n\n    }\n\n    else if (command.equals(""LabelInsets""))\n\n    {\n\n      editLabelInsets();\n\n    }\n\n    else if (command.equals(""TickLabelInsets""))\n\n    {\n\n      editTickLabelInsets();\n\n"
3817,getTickLabelFont,AxisPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/AxisPropertyEditPanel.java,248,249,5,/**\n\n   * Returns the font used to draw the tick labels (if they are showing).\n\n   */,4,  public Font getTickLabelFont() {\n\n    return tickLabelFont;\n\n
3818,PlotPropertyEditPanel,PlotPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/PlotPropertyEditPanel.java,80,159,13,"/**\n\n   * Standard constructor - constructs a panel for editing the properties of the specified plot.\n\n   * <P>\n\n   * In designing the panel, we need to be aware that subclasses of Plot will need to implement\n\n   * subclasses of PlotPropertyEditPanel - so we need to leave one or two \'slots\' where the\n\n   * subclasses can extend the user interface.\n\n   */",128,"  public PlotPropertyEditPanel(Plot plot) {\n\n    _insets = plot.getInsets();\n\n    backgroundPaintSample = new PaintSample(plot.getBackgroundPaint());\n\n    outlineStrokeSample = new StrokeSample(plot.getOutlineStroke());\n\n    outlinePaintSample = new PaintSample(plot.getOutlinePaint());\n\n    setLayout(new BorderLayout());\n\n    availableStrokeSamples = new StrokeSample[3];\n\n    availableStrokeSamples[0] = new StrokeSample(new BasicStroke(1.0f));\n\n    availableStrokeSamples[1] = new StrokeSample(new BasicStroke(2.0f));\n\n    availableStrokeSamples[2] = new StrokeSample(new BasicStroke(3.0f));\n\n    // create a panel for the settings...\n\n    JPanel panel = new JPanel(new BorderLayout());\n\n    panel.setBorder(BorderFactory.createTitledBorder(\n\n              BorderFactory.createEtchedBorder(), plot.getPlotType()+"":""));\n\n    JPanel general = new JPanel(new BorderLayout());\n\n    general.setBorder(BorderFactory.createTitledBorder(\n\n                BorderFactory.createEtchedBorder(), ""General:""));\n\n    JPanel interior = new JPanel(new LCBLayout(4));\n\n    interior.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 5));\n\n    interior.add(new JLabel(""Insets:""));\n\n    JButton button = new JButton(""Edit..."");\n\n    button.setActionCommand(""Insets"");\n\n    button.addActionListener(this);\n\n    insetsTextField = new InsetsTextField(_insets);\n\n    insetsTextField.setEnabled(false);\n\n    interior.add(insetsTextField);\n\n    interior.add(button);\n\n    interior.add(new JLabel(""Outline stroke:""));\n\n    button = new JButton(""Select..."");\n\n    button.setActionCommand(""OutlineStroke"");\n\n    button.addActionListener(this);\n\n    interior.add(outlineStrokeSample);\n\n    interior.add(button);\n\n    interior.add(new JLabel(""Outline paint:""));\n\n    button = new JButton(""Select..."");\n\n    button.setActionCommand(""OutlinePaint"");\n\n    button.addActionListener(this);\n\n    interior.add(outlinePaintSample);\n\n    interior.add(button);\n\n    interior.add(new JLabel(""Background paint:""));\n\n    button = new JButton(""Select..."");\n\n    button.setActionCommand(""BackgroundPaint"");\n\n    button.addActionListener(this);\n\n    interior.add(backgroundPaintSample);\n\n    interior.add(button);\n\n    general.add(interior, BorderLayout.NORTH);\n\n    JPanel appearance = new JPanel(new BorderLayout());\n\n    appearance.setBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));\n\n    appearance.add(general, BorderLayout.NORTH);\n\n    JTabbedPane tabs = new JTabbedPane();\n\n    tabs.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 5));\n\n    verticalAxisPropertyPanel = AxisPropertyEditPanel.getInstance(plot.getAxis(Plot.VERTICAL_AXIS));\n\n    if (verticalAxisPropertyPanel!=null) {\n\n      verticalAxisPropertyPanel.setBorder(BorderFactory.createEmptyBorder(2,2,2,2));\n\n      tabs.add(""Vertical Axis"", verticalAxisPropertyPanel);\n\n    }\n\n    horizontalAxisPropertyPanel = AxisPropertyEditPanel.getInstance(plot.getAxis(Plot.HORIZONTAL_AXIS));\n\n    if (horizontalAxisPropertyPanel!=null) {\n\n      horizontalAxisPropertyPanel.setBorder(BorderFactory.createEmptyBorder(2,2,2,2));\n\n      tabs.add(""Horizontal Axis"", horizontalAxisPropertyPanel);\n\n    }\n\n    tabs.add(""Appearance"", appearance);\n\n    panel.add(tabs);\n\n    add(panel);\n\n"
3819,getOutlinePaint,PlotPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/PlotPropertyEditPanel.java,188,189,5,/**\n\n   * Returns the current outline paint.\n\n   */,4,  public Paint getOutlinePaint() {\n\n    return outlinePaintSample.getPaint();\n\n
3820,getOutlineStroke,PlotPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/PlotPropertyEditPanel.java,181,182,5,/**\n\n   * Returns the current outline stroke.\n\n   */,4,  public Stroke getOutlineStroke() {\n\n    return outlineStrokeSample.getStroke();\n\n
3821,attemptOutlinePaintSelection,PlotPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/PlotPropertyEditPanel.java,254,258,7,"/**\n\n   * Allow the user to change the outline paint.  We use JColorChooser, so the user can only\n\n   * choose colors (a subset of all possible paints).\n\n   */",10,"  private void attemptOutlinePaintSelection() {\n\n    Color c;\n\n    c = JColorChooser.showDialog(this, ""Outline Color"", Color.blue);\n\n    if (c!=null) {\n\n      outlinePaintSample.setPaint(c);\n\n"
3822,getPlotInsets,PlotPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/PlotPropertyEditPanel.java,165,168,5,/**\n\n   * Returns the current plot insets.\n\n   */,8,"  public Insets getPlotInsets() {\n\n    if (_insets == null)\n\n      _insets = new Insets(0,0,0,0);\n\n    return _insets;\n\n"
3823,getBackgroundPaint,PlotPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/PlotPropertyEditPanel.java,174,175,5,/**\n\n   * Returns the current background paint.\n\n   */,4,  public Paint getBackgroundPaint() {\n\n    return backgroundPaintSample.getPaint();\n\n
3824,getVerticalAxisPropertyEditPanel,PlotPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/PlotPropertyEditPanel.java,195,196,5,/**\n\n   * Returns a reference to the panel for editing the properties of the vertical axis.\n\n   */,4,  public AxisPropertyEditPanel getVerticalAxisPropertyEditPanel() {\n\n    return verticalAxisPropertyPanel;\n\n
3825,attemptOutlineStrokeSelection,PlotPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/PlotPropertyEditPanel.java,240,246,5,/**\n\n   * Allow the user to change the outline stroke.\n\n   */,12,"  private void attemptOutlineStrokeSelection() {\n\n    StrokeChooserPanel panel = new StrokeChooserPanel(null, availableStrokeSamples);\n\n    int result = JOptionPane.showConfirmDialog(this, panel, ""Stroke Selection"",\n\n      JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);\n\n    if (result==JOptionPane.OK_OPTION) {\n\n      outlineStrokeSample.setStroke(panel.getSelectedStroke());\n\n"
3826,attemptBackgroundPaintSelection,PlotPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/PlotPropertyEditPanel.java,229,233,5,/**\n\n   * Allow the user to change the background paint.\n\n   */,10,"  private void attemptBackgroundPaintSelection() {\n\n    Color c;\n\n    c = JColorChooser.showDialog(this, ""Background Color"", Color.blue);\n\n    if (c!=null) {\n\n      backgroundPaintSample.setPaint(c);\n\n"
3827,getHorizontalAxisPropertyEditPanel,PlotPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/PlotPropertyEditPanel.java,202,203,5,/**\n\n   * Returns a reference to the panel for editing the properties of the horizontal axis.\n\n   */,4,  public AxisPropertyEditPanel getHorizontalAxisPropertyEditPanel() {\n\n    return horizontalAxisPropertyPanel;\n\n
3828,editInsets,PlotPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/PlotPropertyEditPanel.java,265,273,5,/**\n\n   * Allow the user to edit the individual insets\' values.\n\n   */,16,"  private void editInsets() {\n\n    InsetsChooserPanel panel = new InsetsChooserPanel(_insets);\n\n    int result =\n\n      JOptionPane.showConfirmDialog(this, panel, ""Edit Insets"",\n\n                      JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);\n\n    if (result==JOptionPane.OK_OPTION) {\n\n      _insets = panel.getInsets();\n\n      insetsTextField.setInsets(_insets);\n\n"
3829,updatePlotProperties,PlotPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/PlotPropertyEditPanel.java,282,296,7,/**\n\n   * Updates the plot properties to match the properties defined on the panel.\n\n   * @param plot The plot.\n\n   */,24,  public void updatePlotProperties(Plot plot) {\n\n    // set the plot properties...\n\n    plot.setOutlinePaint(this.getOutlinePaint());\n\n    plot.setOutlineStroke(this.getOutlineStroke());\n\n    plot.setBackgroundPaint(this.getBackgroundPaint());\n\n    plot.setInsets(this.getPlotInsets());\n\n    // then the axis properties...\n\n    if (this.horizontalAxisPropertyPanel!=null) {\n\n      this.horizontalAxisPropertyPanel.setAxisProperties(plot.getAxis(Plot.HORIZONTAL_AXIS));\n\n    }\n\n    if (this.verticalAxisPropertyPanel!=null) {\n\n      this.verticalAxisPropertyPanel.setAxisProperties(plot.getAxis(Plot.VERTICAL_AXIS));\n\n
3830,actionPerformed,PlotPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/PlotPropertyEditPanel.java,209,221,5,/**\n\n   * Handles user actions generated within the panel.\n\n   */,26,"  public void actionPerformed(ActionEvent event) {\n\n    String command = event.getActionCommand();\n\n    if (command.equals(""BackgroundPaint"")) {\n\n      attemptBackgroundPaintSelection();\n\n    }\n\n    else if (command.equals(""OutlineStroke"")) {\n\n      attemptOutlineStrokeSelection();\n\n    }\n\n    else if (command.equals(""OutlinePaint"")) {\n\n      attemptOutlinePaintSelection();\n\n    }\n\n    else if (command.equals(""Insets"")) {\n\n      editInsets();\n\n"
3831,attemptGridStrokeSelection,NumberAxisPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/NumberAxisPropertyEditPanel.java,210,216,5,/**\n\n   * Handle a grid stroke selection.\n\n   */,12,"  private void attemptGridStrokeSelection() {\n\n    StrokeChooserPanel panel = new StrokeChooserPanel(null, availableStrokeSamples);\n\n    int result = JOptionPane.showConfirmDialog(this, panel, ""Stroke Selection"",\n\n      JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);\n\n    if (result==JOptionPane.OK_OPTION) {\n\n      gridStrokeSample.setStroke(panel.getSelectedStroke());\n\n"
3832,actionPerformed,NumberAxisPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/NumberAxisPropertyEditPanel.java,187,204,5,/**\n\n   * Handles actions from within the property panel.\n\n   */,36,"  public void actionPerformed(ActionEvent event) {\n\n    String command = event.getActionCommand();\n\n    if (command.equals(""GridStroke"")) {\n\n      attemptGridStrokeSelection();\n\n    }\n\n    else if (command.equals(""GridPaint"")) {\n\n      attemptGridPaintSelection();\n\n    }\n\n    else if (command.equals(""AutoRangeOnOff"")) {\n\n      toggleAutoRange();\n\n    }\n\n    else if (command.equals(""MinimumRange"")) {\n\n      validateMinimum();\n\n    }\n\n    else if (command.equals(""MaximumRange"")) {\n\n      validateMaximum();\n\n    }\n\n    else super.actionPerformed(event);  // pass to the super-class for handling\n\n"
3834,getMaximumValue,NumberAxisPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/NumberAxisPropertyEditPanel.java,180,181,5,/**\n\n   * Returns the current setting of the maximum value in the axis range.\n\n   */,4,  public double getMaximumValue() {\n\n    return maximumValue;\n\n
3835,NumberAxisPropertyEditPanel,NumberAxisPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/NumberAxisPropertyEditPanel.java,89,159,5,/**\n\n   * Standard constructor: builds a property panel for the specified axis.\n\n   */,112,"  public NumberAxisPropertyEditPanel(NumberAxis axis) {\n\n    super(axis);\n\n    autoRange = axis.isAutoRange();\n\n    minimumValue = axis.getMinimumAxisValue();\n\n    maximumValue = axis.getMaximumAxisValue();\n\n    gridPaintSample = new PaintSample(axis.getGridPaint());\n\n    gridStrokeSample = new StrokeSample(axis.getGridStroke());\n\n    availableStrokeSamples = new StrokeSample[3];\n\n    availableStrokeSamples[0] = new StrokeSample(new BasicStroke(1.0f));\n\n    availableStrokeSamples[1] = new StrokeSample(new BasicStroke(2.0f));\n\n    availableStrokeSamples[2] = new StrokeSample(new BasicStroke(3.0f));\n\n    JTabbedPane other = getOtherTabs();\n\n    JPanel range = new JPanel(new LCBLayout(3));\n\n    range.setBorder(BorderFactory.createEmptyBorder(4,4,4,4));\n\n    range.add(new JPanel());\n\n    autoRangeCheckBox = new JCheckBox(""Auto-adjust range:"", autoRange);\n\n    autoRangeCheckBox.setActionCommand(""AutoRangeOnOff"");\n\n    autoRangeCheckBox.addActionListener(this);\n\n    range.add(autoRangeCheckBox);\n\n    range.add(new JPanel());\n\n    range.add(new JLabel(""Minimum range value:""));\n\n    minimumRangeValue = new JTextField(Double.toString(minimumValue));\n\n    minimumRangeValue.setEnabled(!autoRange);\n\n    minimumRangeValue.setActionCommand(""MinimumRange"");\n\n    minimumRangeValue.addActionListener(this);\n\n    minimumRangeValue.addFocusListener(this);\n\n    range.add(minimumRangeValue);\n\n    range.add(new JPanel());\n\n    range.add(new JLabel(""Maximum range value:""));\n\n    maximumRangeValue = new JTextField(Double.toString(maximumValue));\n\n    maximumRangeValue.setEnabled(!autoRange);\n\n    maximumRangeValue.setActionCommand(""MaximumRange"");\n\n    maximumRangeValue.addActionListener(this);\n\n    maximumRangeValue.addFocusListener(this);\n\n    range.add(maximumRangeValue);\n\n    range.add(new JPanel());\n\n    other.add(""Range"", range);\n\n    JPanel grid = new JPanel(new LCBLayout(3));\n\n    grid.setBorder(BorderFactory.createEmptyBorder(4,4,4,4));\n\n    grid.add(new JPanel());\n\n    showGridLinesCheckBox = new JCheckBox(""Show grid lines"", axis.isGridLinesVisible());\n\n    grid.add(showGridLinesCheckBox);\n\n    grid.add(new JPanel());\n\n    grid.add(new JLabel(""Grid stroke:""));\n\n    JButton button = new JButton(""Set stroke..."");\n\n    button.setActionCommand(""GridStroke"");\n\n    button.addActionListener(this);\n\n    grid.add(gridStrokeSample);\n\n    grid.add(button);\n\n    grid.add(new JLabel(""Grid paint:""));\n\n    button = new JButton(""Set paint..."");\n\n    button.setActionCommand(""GridPaint"");\n\n    button.addActionListener(this);\n\n    grid.add(gridPaintSample);\n\n    grid.add(button);\n\n    other.add(""Grid"", grid);\n\n"
3837,getMinimumValue,NumberAxisPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/NumberAxisPropertyEditPanel.java,173,174,5,/**\n\n   * Returns the current setting of the minimum value in the axis range.\n\n   */,4,  public double getMinimumValue() {\n\n    return minimumValue;\n\n
3839,attemptGridPaintSelection,NumberAxisPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/NumberAxisPropertyEditPanel.java,223,227,5,/**\n\n   * Handle a grid paint selection.\n\n   */,10,"  private void attemptGridPaintSelection() {\n\n    Color c;\n\n    c = JColorChooser.showDialog(this, ""Grid Color"", Color.blue);\n\n    if (c!=null) {\n\n      gridPaintSample.setPaint(c);\n\n"
3840,isAutoRange,NumberAxisPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/NumberAxisPropertyEditPanel.java,166,167,5,/**\n\n   * Returns the current setting of the auto-range property.\n\n   */,4,  public boolean isAutoRange() {\n\n    return autoRange;\n\n
3843,actionPerformed,LegendPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/LegendPropertyEditPanel.java,173,188,5,/**\n\n   * Handles user interactions with the panel.\n\n   */,32,"  public void actionPerformed(ActionEvent event) {\n\n    String command = event.getActionCommand();\n\n    if (command.equals(""OutlineStroke"")) {\n\n      attemptModifyOutlineStroke();\n\n    }\n\n    else if (command.equals(""OutlinePaint"")) {\n\n      attemptModifyOutlinePaint();\n\n    }\n\n    else if (command.equals(""BackgroundPaint"")) {\n\n      attemptModifyBackgroundPaint();\n\n    }\n\n    else if (command.equals(""SeriesFont"")) {\n\n      attemptModifySeriesFont();\n\n    }\n\n    else if (command.equals(""SeriesPaint"")) {\n\n      attemptModifySeriesPaint();\n\n"
3844,attemptModifySeriesPaint,LegendPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/LegendPropertyEditPanel.java,246,250,5,/**\n\n   * Allows the user the opportunity to change the series label paint.\n\n   */,10,"  private void attemptModifySeriesPaint() {\n\n    Color c;\n\n    c = JColorChooser.showDialog(this, ""Series Label Color"", Color.blue);\n\n    if (c!=null) {\n\n      seriesPaint.setPaint(c);\n\n"
3845,attemptModifySeriesFont,LegendPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/LegendPropertyEditPanel.java,230,237,5,/**\n\n   * Allows the user the opportunity to change the series label font.\n\n   */,12,"  public void attemptModifySeriesFont() {\n\n    FontChooserPanel panel = new FontChooserPanel(seriesFont);\n\n    int result = JOptionPane.showConfirmDialog(this, panel, ""Font Selection"",\n\n      JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);\n\n    if (result==JOptionPane.OK_OPTION) {\n\n      seriesFont = panel.getSelectedFont();\n\n"
3846,attemptModifyBackgroundPaint,LegendPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/LegendPropertyEditPanel.java,219,223,5,/**\n\n   * Allows the user the opportunity to change the background paint.\n\n   */,10,"  private void attemptModifyBackgroundPaint() {\n\n    Color c;\n\n    c = JColorChooser.showDialog(this, ""Background Color"", Color.blue);\n\n    if (c!=null) {\n\n      backgroundPaint.setPaint(c);\n\n"
3847,getSeriesPaint,LegendPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/LegendPropertyEditPanel.java,166,167,5,/**\n\n   * Returns the current series label paint.\n\n   */,4,  public Paint getSeriesPaint() {\n\n    return seriesPaint.getPaint();\n\n
3848,getOutlinePaint,LegendPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/LegendPropertyEditPanel.java,145,146,5,/**\n\n   * Returns the current outline paint.\n\n   */,4,  public Paint getOutlinePaint() {\n\n    return outlinePaint.getPaint();\n\n
3849,LegendPropertyEditPanel,LegendPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/LegendPropertyEditPanel.java,71,132,5,/**\n\n   * Standard constructor: builds a panel based on the specified legend.\n\n   */,102,"  public LegendPropertyEditPanel(Legend legend) {\n\n    StandardLegend l = (StandardLegend)legend;\n\n    outlineStroke = new StrokeSample(l.getOutlineStroke());\n\n    outlinePaint = new PaintSample(l.getOutlinePaint());\n\n    backgroundPaint = new PaintSample(l.getBackgroundPaint());\n\n    seriesFont = l.getSeriesFont();\n\n    seriesPaint = new PaintSample(l.getSeriesPaint());\n\n    availableStrokeSamples = new StrokeSample[4];\n\n    availableStrokeSamples[0] = new StrokeSample(new BasicStroke(1.0f));\n\n    availableStrokeSamples[1] = new StrokeSample(new BasicStroke(2.0f));\n\n    availableStrokeSamples[2] = new StrokeSample(new BasicStroke(3.0f));\n\n    availableStrokeSamples[3] = new StrokeSample(new BasicStroke(4.0f));\n\n    setLayout(new BorderLayout());\n\n    JPanel general = new JPanel(new BorderLayout());\n\n    general.setBorder(BorderFactory.createTitledBorder(\n\n                BorderFactory.createEtchedBorder(), ""General:""));\n\n    JPanel interior = new JPanel(new LCBLayout(5));\n\n    interior.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 5));\n\n    JLabel titleLabel = new JLabel(""Text:"");\n\n    interior.add(new JLabel(""Outline:""));\n\n    interior.add(outlineStroke);\n\n    JButton button = new JButton(""Select..."");\n\n    button.setActionCommand(""OutlineStroke"");\n\n    button.addActionListener(this);\n\n    interior.add(button);\n\n    interior.add(new JLabel(""Outline Paint:""));\n\n    button = new JButton(""Select..."");\n\n    button.setActionCommand(""OutlinePaint"");\n\n    button.addActionListener(this);\n\n    interior.add(outlinePaint);\n\n    interior.add(button);\n\n    interior.add(new JLabel(""Background:""));\n\n    button = new JButton(""Select..."");\n\n    button.setActionCommand(""BackgroundPaint"");\n\n    button.addActionListener(this);\n\n    interior.add(backgroundPaint);\n\n    interior.add(button);\n\n    interior.add(new JLabel(""Series label font:""));\n\n    button = new JButton(""Select..."");\n\n    button.setActionCommand(""SeriesFont"");\n\n    button.addActionListener(this);\n\n    interior.add(new FontDisplayField(seriesFont));\n\n    interior.add(button);\n\n    interior.add(new JLabel(""Series label paint:"")) ;\n\n    button = new JButton(""Select..."");\n\n    button.setActionCommand(""SeriesPaint"");\n\n    button.addActionListener(this);\n\n    interior.add(seriesPaint) ;\n\n    interior.add(button) ;\n\n    general.add(interior);\n\n    add(general, BorderLayout.NORTH);\n\n"
3850,attemptModifyOutlinePaint,LegendPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/LegendPropertyEditPanel.java,208,212,5,/**\n\n   * Allows the user the opportunity to change the outline paint.\n\n   */,10,"  private void attemptModifyOutlinePaint() {\n\n    Color c;\n\n    c = JColorChooser.showDialog(this, ""Outline Color"", Color.blue);\n\n    if (c!=null) {\n\n      outlinePaint.setPaint(c);\n\n"
3851,getBackgroundPaint,LegendPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/LegendPropertyEditPanel.java,152,153,5,/**\n\n   * Returns the current background paint.\n\n   */,4,  public Paint getBackgroundPaint() {\n\n    return backgroundPaint.getPaint();\n\n
3852,getOutlineStroke,LegendPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/LegendPropertyEditPanel.java,138,139,5,/**\n\n   * Returns the current outline stroke.\n\n   */,4,  public Stroke getOutlineStroke() {\n\n    return outlineStroke.getStroke();\n\n
3853,getSeriesFont,LegendPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/LegendPropertyEditPanel.java,159,160,5,/**\n\n   * Returns the current series label font.\n\n   */,4,  public Font getSeriesFont() {\n\n    return seriesFont;\n\n
3854,setLegendProperties,LegendPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/LegendPropertyEditPanel.java,257,264,5,/**\n\n   * Sets the properties of the specified legend to match the properties defined on this panel.\n\n   */,16,  public void setLegendProperties(Legend legend) {\n\n    if (legend instanceof StandardLegend) {  // only supports StandardLegend at present\n\n      StandardLegend standard = (StandardLegend)legend;\n\n      standard.setOutlineStroke(this.getOutlineStroke());\n\n      standard.setOutlinePaint(this.getOutlinePaint());\n\n      standard.setBackgroundPaint(this.getBackgroundPaint());\n\n      standard.setSeriesFont(this.getSeriesFont());\n\n      standard.setSeriesPaint(this.getSeriesPaint());\n\n
3855,attemptModifyOutlineStroke,LegendPropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/LegendPropertyEditPanel.java,195,201,5,/**\n\n   * Allows the user the opportunity to change the outline stroke.\n\n   */,12,"  private void attemptModifyOutlineStroke() {\n\n    StrokeChooserPanel panel = new StrokeChooserPanel(outlineStroke, availableStrokeSamples);\n\n    int result = JOptionPane.showConfirmDialog(this, panel, ""Pen/Stroke Selection"",\n\n      JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);\n\n    if (result==JOptionPane.OK_OPTION) {\n\n      outlineStroke.setStroke(panel.getSelectedStroke());\n\n"
3856,setTitleProperties,TitlePropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/TitlePropertyEditPanel.java,176,181,5,/**\n\n   * Sets the properties of the specified title to match the properties defined on this panel.\n\n   */,12,  public void setTitleProperties(Title title) {\n\n    if (title instanceof StandardTitle) {  // only supports StandardTitle at present\n\n      StandardTitle standard = (StandardTitle)title;\n\n      standard.setTitle(this.getTitle());\n\n      standard.setTitleFont(this.getTitleFont());\n\n      standard.setTitlePaint(this.getTitlePaint());\n\n
3857,attemptPaintSelection,TitlePropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/TitlePropertyEditPanel.java,166,169,9,"/**\n\n   * Allow the user the opportunity to select a Paint object.  For now, we just use the\n\n   * standard color chooser - all colors are Paint objects, but not all Paint objects are\n\n   * colors (later we can implement a more general Paint chooser).\n\n   */",8,"  public void attemptPaintSelection() {\n\n    Color c = JColorChooser.showDialog(this, ""Title Color"", Color.blue);\n\n    if (c!=null) {\n\n      titlePaint.setPaint(c);\n\n"
3858,attemptFontSelection,TitlePropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/TitlePropertyEditPanel.java,148,156,5,/**\n\n   * Presents a font selection dialog to the user.\n\n   */,14,"  public void attemptFontSelection() {\n\n    FontChooserPanel panel = new FontChooserPanel(titleFont);\n\n    int result = JOptionPane.showConfirmDialog(this, panel, ""Font Selection"",\n\n      JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);\n\n    if (result==JOptionPane.OK_OPTION) {\n\n      titleFont = panel.getSelectedFont();\n\n      fontfield.setText(titleFont.getFontName()+"" ""+titleFont.getSize());\n\n"
3859,TitlePropertyEditPanel,TitlePropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/TitlePropertyEditPanel.java,66,105,7,/**\n\n   * Standard constructor: builds a panel for displaying/editing the properties of the specified\n\n   * title.\n\n   */,62,"  public TitlePropertyEditPanel(StandardTitle title) {\n\n    // initialise local selections\n\n    titleFont = title.getTitleFont();\n\n    titlePaint = new PaintSample(title.getTitlePaint());\n\n    setLayout(new BorderLayout());\n\n    JPanel general = new JPanel(new BorderLayout());\n\n    general.setBorder(BorderFactory.createTitledBorder(\n\n              BorderFactory.createEtchedBorder(), ""General:""));\n\n    JPanel interior = new JPanel(new LCBLayout(3));\n\n    interior.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 5));\n\n    JLabel titleLabel = new JLabel(""Text:"");\n\n    titleField = new JTextField(title.getTitle());\n\n    interior.add(titleLabel);\n\n    interior.add(titleField);\n\n    interior.add(new JPanel());\n\n    interior.add(new JLabel(""Font:""));\n\n    fontfield = new FontDisplayField(titleFont);\n\n    JButton b = new JButton(""Select..."");\n\n    b.setActionCommand(""SelectFont"");\n\n    b.addActionListener(this);\n\n    interior.add(fontfield);\n\n    interior.add(b);\n\n    interior.add(new JLabel(""Color:""));\n\n    titlePaint = new PaintSample(title.getTitlePaint());\n\n    b = new JButton(""Select..."");\n\n    b.setActionCommand(""SelectPaint"");\n\n    b.addActionListener(this);\n\n    interior.add(titlePaint);\n\n    interior.add(b);\n\n    general.add(interior);\n\n    add(general, BorderLayout.NORTH);\n\n"
3860,getTitle,TitlePropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/TitlePropertyEditPanel.java,111,112,5,/**\n\n   * Returns the title entered in the panel.\n\n   */,4,  public String getTitle() {\n\n    return titleField.getText();\n\n
3861,getTitleFont,TitlePropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/TitlePropertyEditPanel.java,118,119,5,/**\n\n   * Returns the font selected in the panel.\n\n   */,4,  public Font getTitleFont() {\n\n    return titleFont;\n\n
3862,getTitlePaint,TitlePropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/TitlePropertyEditPanel.java,125,126,5,/**\n\n   * Returns the paint selected in the panel.\n\n   */,4,  public Paint getTitlePaint() {\n\n    return titlePaint.getPaint();\n\n
3863,actionPerformed,TitlePropertyEditPanel,JFreeChart071,jfreechart-0.7.1/source/com/jrefinery/chart/ui/TitlePropertyEditPanel.java,132,140,5,/**\n\n   * Handles button clicks by passing control to an appropriate handler method.\n\n   */,14,"  public void actionPerformed(ActionEvent event) {\n\n    String command = event.getActionCommand();\n\n    if (command.equals(""SelectFont"")) {\n\n      attemptFontSelection();\n\n    }\n\n    else if (command.equals(""SelectPaint"")) {\n\n      attemptPaintSelection();\n\n"
